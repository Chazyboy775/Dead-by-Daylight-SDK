#pragma once

// ÀèÃ÷É±»ú (4.22.3) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "É±»ú_DeadByDaylight_structs.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class DeadByDaylight.QuestEventEvaluatorBase
// 0x0060 (0x0090 - 0x0030)
class UQuestEventEvaluatorBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET
	class ADBDPlayer*                                  _dbdPlayer;                                               // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0058(0x0018) MISSED OFFSET
	TArray<class UClass*>                              _evaluatorConditionsClass;                                // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<class UEvaluatorCondition*>                 _evaluatorConditions;                                     // 0x0080(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.QuestEventEvaluatorBase"));

		return ptr;
	}


	void OnGameEvent(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
};


// Class DeadByDaylight.EvaluatorCondition
// 0x0018 (0x0048 - 0x0030)
class UEvaluatorCondition : public UObject
{
public:
	EConditionSubject                                  _conditionSubject;                                        // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x17];                                      // 0x0031(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EvaluatorCondition"));

		return ptr;
	}

};


// Class DeadByDaylight.GameplayModifierContainer
// 0x00D0 (0x01F0 - 0x0120)
class UGameplayModifierContainer : public UBaseModifierContainer
{
public:
	bool                                               UseApplyFunction;                                         // 0x0120(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x67];                                      // 0x0121(0x0067) MISSED OFFSET
	TArray<class UBaseModifierCondition*>              _conditionsInner;                                         // 0x0188(0x0010) (ExportObject, Net, ZeroConstructor, Transient)
	TArray<struct FName>                               _tags;                                                    // 0x0198(0x0010) (ZeroConstructor, Transient)
	bool                                               broadcastStatusView;                                      // 0x01A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01A9(0x0003) MISSED OFFSET
	struct FName                                       StatusViewID;                                             // 0x01AC(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01A9(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData03[0x30];                                      // 0x01B8(0x0030) MISSED OFFSET
	class UTimerObject*                                _activationTimer;                                         // 0x01E8(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameplayModifierContainer"));

		return ptr;
	}


	void UpdateIsApplicable();
	void UnlistenToGameEvent(EDBDScoreTypes* EventType);
	void UnlistenToDispatcherGameEvent(struct FGameplayTag* EventType);
	void UnlistenToAllGameEvents();
	void UnlistenToAllDispatcherGameEvents();
	void SetStatusView(bool* broadcastStatusView, struct FName* StatusViewID);
	void SetModifierValue(struct FGameplayTag* Type, float* GameplayModifierValue);
	void SetFlag(struct FGameplayTag* flag, bool* flagValue);
	void RemoveModifier(struct FGameplayTag* Type);
	void RemoveAllModifiers();
	void RemoveAllFlags();
	void OnRep_ConditionsInner();
	void OnRep_ActivationTimer();
	void OnListenedGameEvent(EDBDScoreTypes* EventType, float* amount, class AActor** Instigator, class AActor** Target);
	void OnLevelReadyToPlay();
	void OnInitialized_Internal();
	void OnInitialized();
	void OnGameplayEvent(EDBDScoreTypes* EventType, float* amount, class AActor** Instigator, class AActor** Target);
	void OnGameEventDispatched(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void OnApplyEnd();
	void OnApplyBegin();
	void ListenToGameEvent(EDBDScoreTypes* EventType);
	void ListenToDispatcherGameEvent(struct FGameplayTag* EventType);
	bool IsStatusViewActive();
	bool IsActivationTimerDone();
	bool IsActivationTimerActive();
	void InstantiateGameplayModifierConditions();
	bool HasModifierOfType(struct FGameplayTag* Type);
	bool HasFlag(struct FGameplayTag* flag);
	float GetRemainingLifetime();
	float GetPercentageFill();
	class ADBDPlayer* GetOwningPlayer();
	class UGameplayModifierContainer* GetOriginatingEffect();
	float GetModifierValue(struct FGameplayTag* Type);
	int GetLevelToDisplay();
	EInventoryItemType GetInventoryItemType();
	int GetIconFilePathIndex();
	float GetActivationTimerRemainingTime();
	float GetActivationTimerPercentRemaining();
	float GetActivationTimerElapsedTimePercent();
	float GetActivationTimerElapsedTime();
	void FireActiveStatusViewEvent(struct FName* StatusViewID, struct FName* uniqueSourceID, struct FStatusViewSource* StatusViewSource);
	void Authority_TriggerActivationTimer(float* activationTime);
	void Authority_SetActivationTimerPaused(bool* paused);
	void Authority_ClearActivationTimer();
	void Apply(float* DeltaTime);
	class UBaseModifierCondition* AddCondition(class UClass** conditionType);
};


// Class DeadByDaylight.StatusEffect
// 0x00D0 (0x02C0 - 0x01F0)
class UStatusEffect : public UGameplayModifierContainer
{
public:
	float                                              customParam;                                              // 0x01F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x34];                                      // 0x01F4(0x0034) MISSED OFFSET
	struct FGameplayModifierData                       ModifierData;                                             // 0x0228(0x0030) (Edit, Net)
	bool                                               shouldDisplay;                                            // 0x0258(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0259(0x0007) MISSED OFFSET
	class ADBDPlayer*                                  _originatingPlayer;                                       // 0x0260(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _removeOnRemainingLifetimeEnded;                          // 0x0268(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BroadcastAsStatusEffectWhenApplicable;                    // 0x0269(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BroadcastAsStatusEffectByActivationTimer;                 // 0x026A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BroadcastAsStatusEffectWhenLifeRemains;                   // 0x026B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BroadcastAsStatusEffectByFunction;                        // 0x026C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BroadcastAsStatusEffectAlways;                            // 0x026D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BroadcastOriginatorGameEventNotificationWhenFirstApplicable;// 0x026E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x026F(0x0001) MISSED OFFSET
	class UGameplayModifierContainer*                  _originatingEffect;                                       // 0x0270(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0278(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData04[0x10];                                      // 0x0278(0x0010) UNKNOWN PROPERTY: ArrayProperty DeadByDaylight.StatusEffect._nonStackingEffects
	unsigned char                                      UnknownData05[0x30];                                      // 0x0290(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StatusEffect"));

		return ptr;
	}


	bool ShouldDisplayStatusEffectIcon();
	void SetStatusEffectIconPercentage(float* value);
	void SetShouldDisplay(bool* On);
	void OnShouldDisplayChanged(bool* currentValue);
	void OnRep_ShouldDisplay();
	void Multicast_SetRemainingLifetime(float* Lifetime);
	void Multicast_InitializeStatusEffect(struct FName* statusEffectId, class ADBDPlayer** originatingPlayer, float* customParam, class UGameplayModifierContainer** originatingEffect, bool* shouldDisplay);
	bool IsOriginatorHooked();
	bool IsOriginatorAlive();
	bool IsKillerInOriginatorRange(float* AdditiveRangeModifier);
	bool IsInOriginatorRange();
	void InitializeLifetime(float* Lifetime);
	float GetStatusEffectCooldownRate();
	bool GetShouldDisplay();
	class ADBDPlayer* GetOriginatingPlayer();
	float GetLifetimeDuration();
	void FireActiveStatusEffectEvent(float* percentage, int* LevelToDisplay);
	void BroadcastOriginatorGameEventNotification();
	void BroadcastGameEventNotification(struct FGameplayNotificationData* notificationData, bool* addToHistory);
	void Authority_SetRemainingLifetime(float* Lifetime);
	void Authority_RemoveSelf();
	void Authority_EndSelf();
};


// Class DeadByDaylight.Perk
// 0x0160 (0x0350 - 0x01F0)
class UPerk : public UGameplayModifierContainer
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x01F0(0x0048) MISSED OFFSET
	struct FGameplayModifierData                       PerkLevelData[0x3];                                       // 0x0238(0x0030) (Edit, Net, EditFixedSize)
	int                                                _perkLevel;                                               // 0x02C8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x34];                                      // 0x02CC(0x0034) MISSED OFFSET
	class UClass*                                      PerkIconStrategyClass;                                    // 0x0300(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnTokenCountChangedBP;                                    // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               _isUsable;                                                // 0x0318(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               BroadcastWhenApplicable;                                  // 0x0319(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BroadcastOnTimer;                                         // 0x031A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BroadcastCooldownTimer;                                   // 0x031B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               BroadcastInactiveCooldownTimer;                           // 0x031C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               BroadcastAlways;                                          // 0x031D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x031E(0x0002) MISSED OFFSET
	class UBasePerkIconStrategy*                       _perkIconStrategy;                                        // 0x0320(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	EInputInteractionType                              _activatableInteractionInputType;                         // 0x0328(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	int                                                _tokenCount;                                              // 0x032C(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                _maxTokenCount;                                           // 0x0330(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0334(0x0004) MISSED OFFSET
	class UTimerObject*                                _cooldownTimer;                                           // 0x0338(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0340(0x0008) MISSED OFFSET
	class UTimerObject*                                _hudIconTimer;                                            // 0x0348(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Perk"));

		return ptr;
	}


	void SetIsUsable(bool* value);
	void OnRep_TokenCount(int* oldCount);
	void OnRep_IsUsable();
	void OnRep_CooldownTimer();
	void Multicast_InitializePerk(struct FName* PerkId, int* PerkLevel, EInputInteractionType* activatableInteractionInputType);
	bool IsHudIconTimerDone();
	bool IsCooldownTimerDone();
	int GetTokenCount();
	int GetPerkLevel();
	int GetMaxTokenCount();
	bool GetIsUsable();
	float GetHudIconTimerElapsedTimePercent();
	class UTimerObject* GetCooldownTimer();
	void FireActivePerkEvent(float* percentage, int* chargeCount);
	void Authority_TriggerHudIconTimer(float* Duration);
	void Authority_TriggerCooldownTimer(float* coolddownTime);
	void Authority_SetTokenCount(int* value);
	void Authority_SetMaxTokenCount(int* value);
	void Authority_SetIsUsable(bool* value);
	void Authority_IncrementToken();
	void Authority_DecrementToken();
};


// Class DeadByDaylight.GameplayModifierCondition
// 0x0000 (0x0118 - 0x0118)
class UGameplayModifierCondition : public UBaseModifierCondition
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameplayModifierCondition"));

		return ptr;
	}


	void SetSubjectProviderClass(class UClass** subjectProviderClass);
	void OnRep_SubjectProviderClass();
	void OnRep_OwningModifier();
	void InitializeSubjectProviderClass();
	class AActor* GetOwningActor();
};


// Class DeadByDaylight.Interactable
// 0x0088 (0x03C8 - 0x0340)
class AInteractable : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0340(0x0018) MISSED OFFSET
	TArray<class UInteractor*>                         _interactors;                                             // 0x0358(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UPrimitiveComponent*                         _singleZone;                                              // 0x0368(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               _useSingleZone;                                           // 0x0370(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0371(0x0007) MISSED OFFSET
	TMap<class UPrimitiveComponent*, struct FInteractionArray> _zoneToInteractions;                                      // 0x0378(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Interactable"));

		return ptr;
	}


	void SetSingleZone(class UPrimitiveComponent** zone);
	void SetInteractorsUsable(bool* usable, class UInteractor** exception);
	void PreInterruptionEvent(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee, class UInterruptionDefinition** interruption);
	void OnLevelReadyToPlay();
	void OnInteractorLockChanged(bool* locked, class ADBDPlayer** interactingPlayer);
	bool IsInterruptionPossible(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee, class UInteractor** Interactor, class UInteractionDefinition** definition, class UInterruptionDefinition** interruption);
	bool IsInteractionPossibleInternal(class ADBDPlayer** Player, class UInteractor** Interactor, class UInteractionDefinition** definition, EInputInteractionType* InteractionType);
	bool IsInteractionDone(class ADBDPlayer** Player, class UInteractor** Interactor, class UInteractionDefinition** definition, EInputInteractionType* InteractionType);
	bool IsInteractingWith(class ADBDPlayer** Player);
	bool HasAnOngoingInteraction();
	class ADBDPlayer* GetPlayerOwner();
	TArray<class UInteractor*> GetInteractors();
	TArray<class ADBDPlayer*> GetInteractingPlayersRaw();
	struct FVector GetFocalPointPosition(class ADBDPlayer** Player, class UInteractionDefinition** definition);
	void AuthorityRequestCancelOngoingInteractions(bool* onlyOnHitCancelableInteractions);
	TArray<class ADBDPlayer*> Authority_GetInteractingPlayers();
	void AttachEveryInteractionToZone(class UPrimitiveComponent** zone);
};


// Class DeadByDaylight.Collectable
// 0x0108 (0x04D0 - 0x03C8)
class ACollectable : public AInteractable
{
public:
	bool                                               DisplayUsePercent;                                        // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAtlantaItemProgressionBarEnum                     ProgressBar;                                              // 0x03C9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StrafeOnUse;                                              // 0x03CA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AimOnUse;                                                 // 0x03CB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               VisibleWhenEquipped;                                      // 0x03CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StopRunningOnUse;                                         // 0x03CD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EItemHandPosition                                  HandPosition;                                             // 0x03CE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasUseInteraction;                                        // 0x03CF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	ECollectableCategory                               Category;                                                 // 0x03D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsInUse;                                                  // 0x03D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03D2(0x0002) MISSED OFFSET
	struct FName                                       ItemId;                                                   // 0x03D4(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03D2(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	bool                                               FromPlayerSpawn;                                          // 0x03E0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET
	class UItemModifier*                               BaseItemModifier;                                         // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UItemModifier*                               ItemModifier1;                                            // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UItemModifier*                               ItemModifier2;                                            // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0400(0x0030) MISSED OFFSET
	bool                                               BeingCollected;                                           // 0x0430(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BeingDropped;                                             // 0x0431(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x0432(0x0006) MISSED OFFSET
	class UInteractor*                                 _itemInteractor;                                          // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      _mesh;                                                    // 0x0440(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             _placementOrigin;                                         // 0x0448(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0450(0x0010) MISSED OFFSET
	class ADBDPlayer*                                  _collector;                                               // 0x0460(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class ADBDPlayer*                                  _firstCollector;                                          // 0x0468(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	ECollectableState                                  _state;                                                   // 0x0470(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	TArray<class UItemAddon*>                          _itemAddons;                                              // 0x0478(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData07[0x10];                                      // 0x0488(0x0010) MISSED OFFSET
	int                                                _itemCount;                                               // 0x0498(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x049C(0x000C) MISSED OFFSET
	struct FGuid                                       _begunPlayFenceName;                                      // 0x04A8(0x0010) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EAttachToSocketNameEnum                            _attachToSocketName;                                      // 0x04B8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x04B9(0x0007) MISSED OFFSET
	class UGameplayTagContainerComponent*              _objectState;                                             // 0x04C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	ELoadoutItemType                                   _itemType;                                                // 0x04C8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x04C8(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData11[0x4];                                       // 0x04CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Collectable"));

		return ptr;
	}


	void SetVisibility(bool* Visibility);
	void SetItemInteractor(class UInteractor** Interactor);
	void SetCount(int* Count);
	void OnUseReleased();
	void OnUse();
	void OnRep_State();
	void OnRep_Collector();
	void OnRep_BegunPlayFenceName();
	void OnPostItemAddonsCreation(class ADBDPlayer** Player);
	void OnFenceInitialized();
	void OnDropped();
	void OnCustomizationChanged();
	void OnCollectorEndPlay(class AActor** Actor, TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void OnCollected(class ADBDPlayer** collector);
	void NotifyUpdated();
	void Multicast_UseReleased();
	void Multicast_Use();
	void Multicast_RemoveItemAddon(class UItemAddon** addon);
	void Multicast_Dropped(class ADBDPlayer** droppedBy, struct FVector* Location, struct FRotator* Rotation);
	void Multicast_Collected(class ADBDPlayer** collector);
	void Local_Dropped_Location(class ADBDPlayer** droppedBy, struct FVector* Location, struct FRotator* Rotation);
	bool IsStored();
	bool IsRechargeable();
	bool IsOnGround();
	bool IsLocallyControlled();
	bool IsEquipped();
	bool IsCountDisplayForced();
	bool IsCollected();
	bool IsBeingUsed();
	bool HasGameplayModifierFlag(struct FGameplayTag* modifierFlag);
	float GetUsePercentLeft();
	float GetModifierSum(struct FGameplayTag* ModifierType, float* defaultValue);
	float GetModifierMax(struct FGameplayTag* ModifierType, float* defaultValue);
	class UInteractor* GetItemInteractor();
	unsigned char GetItemIconIndex();
	TArray<class UItemAddon*> GetItemAddons();
	struct FString GetIconFilePath();
	int GetCount();
	class ADBDPlayer* GetCollector();
	void Discard(bool* consumedDiscard);
	void DebugPrintStats();
	bool CanUse();
	bool CanBeDropped(class ADBDPlayer** dropper);
	bool CanBeCollected(class ADBDPlayer** collector);
	void Authority_Use();
	void Authority_RemoveItemAddon(class UItemAddon** addon);
	void Authority_AddItemAddon(class UItemAddon** addon);
};


// Class DeadByDaylight.DBDGameState
// 0x04A0 (0x0848 - 0x03A8)
class ADBDGameState : public AGameState
{
public:
	struct FScriptMulticastDelegate                    OnEscapeDoorActivated;                                    // 0x03A8(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x90];                                      // 0x03B8(0x0090) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLevelReadyToPlay;                                       // 0x0448(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnIntroCompleted;                                         // 0x0458(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLightingGenerated;                                      // 0x0468(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSurvivorsLeftChanged;                                   // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AuthorityOnAllPlayerLoaded;                               // 0x0488(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0498(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActivatedGeneratorCountChangedDynamic;                  // 0x04B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSlasherSet;                                             // 0x04C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x18];                                      // 0x04D0(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnObsessionChanged;                                       // 0x04E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                CamperDeadCount;                                          // 0x04F8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                CamperInMeatLockerCount;                                  // 0x04FC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                CamperEscaped;                                            // 0x0500(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                WaitingForEscape;                                         // 0x0504(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                CamperCount;                                              // 0x0508(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               LeaveSpectateRequested;                                   // 0x050C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x050D(0x0003) MISSED OFFSET
	int                                                SecondsLeftInLobby;                                       // 0x0510(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x34];                                      // 0x0514(0x0034) MISSED OFFSET
	class ASlasherPlayer*                              Slasher;                                                  // 0x0548(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0550(0x0010) MISSED OFFSET
	int                                                _camperHookedInBasementCount;                             // 0x0560(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0564(0x0008) MISSED OFFSET
	bool                                               _playersReadyToStart;                                     // 0x056C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x056D(0x0003) MISSED OFFSET
	struct FBuiltLevelData                             _builtLevelData;                                          // 0x0570(0x0050) (Net, Transient)
	struct FOfferingData                               _levelOfferings;                                          // 0x05C0(0x0018) (Net, Transient)
	class AClipManager*                                _clipManager;                                             // 0x05D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FServerJoiningData                          _serverJoiningData;                                       // 0x05E0(0x0058) (Net, Transient)
	unsigned char                                      UnknownData08[0x28];                                      // 0x0638(0x0028) MISSED OFFSET
	struct FGuid                                       _sessionId;                                               // 0x0660(0x0010) (Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FGuid                                       _lobbyId;                                                 // 0x0670(0x0010) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                _activatedGeneratorCount;                                 // 0x0680(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                _requiredActivatedGeneratorCount;                         // 0x0684(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _escapeDoorActivated;                                     // 0x0688(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _escapeDoorOpened;                                        // 0x0689(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isHatchOpen;                                             // 0x068A(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _levelReadyToPlay;                                        // 0x068B(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _playerDistributionReady;                                 // 0x068C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _usingWeakenedMechanic;                                   // 0x068D(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x068E(0x0002) MISSED OFFSET
	int                                                _survivorLeft;                                            // 0x0690(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0694(0x0004) MISSED OFFSET
	TArray<class AMeatHook*>                           _meatHooks;                                               // 0x0698(0x0010) (ZeroConstructor, Transient)
	TArray<class AGenerator*>                          _generators;                                              // 0x06A8(0x0010) (ZeroConstructor, Transient)
	TArray<class AEscapeDoor*>                         _escapeDoors;                                             // 0x06B8(0x0010) (ZeroConstructor, Transient)
	TArray<class AHatch*>                              _hatches;                                                 // 0x06C8(0x0010) (ZeroConstructor, Transient)
	TArray<class APallet*>                             _pallets;                                                 // 0x06D8(0x0010) (ZeroConstructor, Transient)
	TArray<class ASearchable*>                         _searchables;                                             // 0x06E8(0x0010) (ZeroConstructor, Transient)
	TArray<class ATotem*>                              _totems;                                                  // 0x06F8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData11[0x38];                                      // 0x0708(0x0038) MISSED OFFSET
	int                                                _camperEscapedThroughHatch;                               // 0x0740(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0744(0x0004) MISSED OFFSET
	class ACamperPlayer*                               _obsessionTarget;                                         // 0x0748(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _cachedObsessionEscaped;                                  // 0x0750(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0751(0x0007) MISSED OFFSET
	TArray<class AInteractable*>                       _traps;                                                   // 0x0758(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0768(0x0008) MISSED OFFSET
	struct FGamePresetData                             _gamePresetData;                                          // 0x0770(0x0078) (Net, Transient)
	bool                                               _gameLevelLoaded;                                         // 0x07E8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _gameLevelCreated;                                        // 0x07E9(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _gameLevelEnded;                                          // 0x07EA(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	EEndGameReason                                     _gameEndedReason;                                         // 0x07EB(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x07EC(0x0004) MISSED OFFSET
	class UEndGameStateComponent*                      _endGameState;                                            // 0x07F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UActorPairQueryEvaluatorComponent*           _actorPairQueryEvaluatorComponent;                        // 0x07F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData16[0x8];                                       // 0x0800(0x0008) MISSED OFFSET
	class UCharacterCollection*                        _characterCollection;                                     // 0x0808(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UServerTimeProviderComponent*                _serverTimeProvider;                                      // 0x0810(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData17[0x30];                                      // 0x0818(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGameState"));

		return ptr;
	}


	void TravelToKillerServer();
	void SortOfferings();
	void SetPlayersReadyToStart(bool* playersReadyToStart);
	void SetKillerIntroCompletedNormalized(float* completedAmount);
	void SetGameLevelEnded(EEndGameReason* endGameReason);
	void SetDisplayMapName(bool* Display);
	void SetBuiltLevelData(struct FName* ThemeName, struct FName* ThemeWeather, struct FString* MapName, int* TileCount, TArray<struct FDependency>* levelDependencies, struct FName* SpecialEventId);
	void Server_UpdateGameRole();
	void ResetGameLevelStatus();
	void RemoveTrap(class AInteractable** toRemove);
	void OnSlasherSetMultiDelegate__DelegateSignature(class ASlasherPlayer** SlasherPlayer);
	void OnRep_SurvivorLeft(int* oldValue);
	void OnRep_SessionId();
	void OnRep_ServerJoiningData();
	void OnRep_SecondsLeftInLobby(int* oldValue);
	void OnRep_RequiredActivatedGeneratorCount(int* oldRequiredActivatedGeneratorCount);
	void OnRep_PlayersReadyToStart(bool* oldValue);
	void OnRep_OnLevelReadyToPlay(bool* oldValue);
	void OnRep_OnGameLevelLoaded();
	void OnRep_OnGameLevelCreated();
	void OnRep_OfferingSequenceReady();
	void OnRep_ObsessionTarget(class ACamperPlayer** previousObsessionTarget);
	void OnRep_LobbyId();
	void OnRep_HatchOpened(bool* oldValue);
	void OnRep_GamePresetData();
	void OnRep_EscapeDoorActivated(bool* oldValue);
	void OnRep_BuildLevelData();
	void OnRep_ActivatedGeneratorCount(int* oldValue);
	void OnLevelReadyToPlayDelegate__DelegateSignature();
	void Multicast_UpdateRemainingQueueTime(int* remainingQueueTimeSeconds, bool* bIsStable);
	void Multicast_UpdateCharacterFromGamePreset(class ADBDPlayerState_Menu** playerState_Menu, struct FGamePresetData* GamePresetData);
	void Multicast_SetServerLeftGame(bool* hasServerLeftGame);
	void Multicast_SetLostServerConnection(bool* hasLostServerConnection);
	void Multicast_SetGameLevelEnded(EEndGameReason* endGameReason);
	void Multicast_SetGameEnded(bool* hasServerLeftGame);
	void Multicast_SetBuiltLevelData(struct FName* ThemeName, struct FName* ThemeWeather, struct FString* MapName, int* TileCount, TArray<struct FDependency>* levelDependencies, struct FName* SpecialEventId);
	void Multicast_OnGameStarted();
	void Multicast_KillerServerSearchFailed();
	void Multicast_KillerSearchStarted();
	void Multicast_JoinKillerServerFailed();
	void KillerServerFound(struct FServerJoiningData* joinParams);
	bool IsPlayerDistributionReady();
	bool IsOnePlayerLeft();
	bool IsOfferingReceived();
	bool IsObsessionTargetAliveInLevel();
	bool IsObsessionTargetAlive();
	bool IsLightingGenerated();
	bool IsLevelSetupDone();
	bool IsLevelReadyToPlay();
	bool IsIntroCompleted();
	bool IsHatchVisible();
	bool IsEscapeRequirementCompleted();
	bool IsEscapeDoorOpen();
	bool IsEscapeDoorActivated();
	void IntroCompleted();
	TArray<class AInteractable*> GetTraps();
	int GetSurvivorLeft();
	TArray<struct FSelectedOffering> GetSelectedOfferings();
	bool GetSelectedOffering(int* Index, struct FSelectedOffering* SelectedOffering);
	int GetRequiredActivatedGeneratorCount();
	int GetRemainingGeneratorsNeeded();
	class ADBDPlayerState* GetPlayerStateByMirrorsID(struct FString* ID);
	class ADBDPlayerState* GetPlayerStateByIDString(struct FString* ID);
	bool GetPlayersReadyToStart();
	void GetPlayerRoleCounts(int* survivorCount, int* killerCount, int* spectatorCount);
	class ACamperPlayer* GetObsessionTarget();
	int GetNumberOfOtherActiveSurvivors(class ADBDPlayer** exception);
	int GetNumberOfActiveSurvivors();
	struct FName GetMapThemeName();
	class ADBDPlayerState* GetLocalPlayerState();
	class ADBDPlayer* GetLocalPlayerPawn();
	class APawn* GetLocalPlayerBasePawn();
	struct FBuiltLevelData GetLevelData();
	float GetKillerIntroCompletedNormalized();
	class ASlasherPlayer* GetKiller();
	bool GetIsGameEnded();
	TArray<class ASearchable*> GetInGameSearchables();
	TArray<class APallet*> GetInGamePallets();
	TArray<class AMeatHook*> GetInGameMeatHooks();
	TArray<class AHatch*> GetInGameHatches();
	TArray<class AGenerator*> GetInGameGenerators();
	TArray<class AEscapeDoor*> GetInGameEscapeDoors();
	bool GetGameLevelLoaded();
	class UEndGameStateComponent* GetEndGameStateComponent();
	class UCharacterCollection* GetCharacterCollection();
	void CallOnSlasherSet(struct FScriptDelegate* callback);
	void CallOnLevelReadyToPlay(struct FScriptDelegate* callback);
	void BroadcastOnSetBuildLevelData();
	void Authority_SetSurvivorLeft(int* survivorRemaining);
	void Authority_SetServerJoiningData(struct FServerJoiningData* joiningData);
	void Authority_SetLevelReadyToPlay();
	void Authority_SetHatchOpen(bool* OPENED);
	void Authority_SetGameSelectedOffering(TArray<struct FSelectedOffering>* offerings);
	void Authority_SetGameLevelLoaded();
	void Authority_SetGameLevelEnded(EEndGameReason* endGameReason);
	void Authority_SetGameLevelCreated();
	void Authority_SetEscapeDoorOpened(bool* OPENED);
	void Authority_SetAllPlayerLoaded();
	void Authority_EvaluateObsessionTarget(class ADBDPlayer** potentialTarget);
	void Authority_EscapeThroughHatch();
	void Authority_EnableObsession();
	void AddTrap(class AInteractable** toAdd);
};


// Class DeadByDaylight.ItemModifier
// 0x0030 (0x0220 - 0x01F0)
class UItemModifier : public UGameplayModifierContainer
{
public:
	struct FGameplayModifierData                       ModifierData;                                             // 0x01F0(0x0030) (Edit, Net)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ItemModifier"));

		return ptr;
	}


	void HandleIncreaseMaxCharge();
	void HandleIncreaseItemCount();
	void HandleIncreaseCharge();
	float GetItemMaxEnergy();
	float GetItemEnergy();
	int GetItemCount();
	class ACollectable* GetBaseItem();
	void AuthoritySetItemMaxEnergy(float* energy);
	void AuthoritySetItemEnergy(float* energy);
	void AuthoritySetItemCount(int* itemCount);
};


// Class DeadByDaylight.ItemAddon
// 0x0018 (0x0238 - 0x0220)
class UItemAddon : public UItemModifier
{
public:
	class UClass*                                      BaseItemType;                                             // 0x0220(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	EInventoryItemType                                 InventoryItemType;                                        // 0x0228(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0229(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ItemAddon"));

		return ptr;
	}


	void OnPostItemAddonsCreation(class ADBDPlayer** Player, class ACollectable** Item);
	void Multicast_SetBaseItem(class ACollectable** baseItem);
	void Multicast_InitializeItemAddon(struct FName* addonID, EInventoryItemType* ItemType);
	void Multicast_AddAddonToItem(class ACollectable** Item);
	bool IsReadyForInitialization();
	void InitializeAddon();
	void DebugPrintStats();
	void Authority_OnCollectablePickedUp(class ADBDPlayer** Player);
	void Authority_OnCollectableDropped(class ADBDPlayer** Player);
	void ApplyMetaModifiers();
};


// Class DeadByDaylight.PresentationItemProgressComponent
// 0x0000 (0x0100 - 0x0100)
class UPresentationItemProgressComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PresentationItemProgressComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.InteractionDefinition
// 0x0240 (0x04B0 - 0x0270)
class UInteractionDefinition : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0270(0x0020) MISSED OFFSET
	struct FString                                     InteractionID;                                            // 0x0290(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	EInputInteractionType                              interactionInputType;                                     // 0x02A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EInputInteractionType                              InteractionAtlantaInputType;                              // 0x02A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x02A2(0x0002) MISSED OFFSET
	float                                              SnapTime;                                                 // 0x02A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ResetCameraDuringSnap;                                    // 0x02A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInteractionCancelled;                                   // 0x02A9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowStartInteractionFromHeldInput;                       // 0x02AA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StopInteractionOnInputRelease;                            // 0x02AB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AtlantaOverridePowerButtonImage;                          // 0x02AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AtlantaOverrideItemUseToggleState;                        // 0x02AD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               OverrideStopInteractionOnInputRelease;                    // 0x02AE(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AtlantaStopInteractionOnInputRelease;                     // 0x02AF(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               StopInteractionOnMontageComplete;                         // 0x02B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StopInteractionOnMontageBlendingOut;                      // 0x02B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StopInteractionOnTimerExpire;                             // 0x02B2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StopInteractionOnHeightDelta;                             // 0x02B3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               StopEnterMontageOnExit;                                   // 0x02B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StopUpdateMontageOnExit;                                  // 0x02B5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreStrafeAnimFix;                                      // 0x02B6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EInteractionAnimation                              InteractionAnimation;                                     // 0x02B7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CamperCanInteract;                                        // 0x02B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SlasherCanInteract;                                       // 0x02B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowInputPersistence;                                    // 0x02BA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               snapPosition;                                             // 0x02BB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               snapRotation;                                             // 0x02BC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x02BD(0x0003) MISSED OFFSET
	float                                              SnapStopDistance;                                         // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TestClearPathDuringSnap;                                  // 0x02C4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TestPlayerOrientationOnSnap;                              // 0x02C5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ScaleEnterAnimationToTime;                                // 0x02C6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ScaleMainAnimationToTime;                                 // 0x02C7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ScaleExitAnimationToTime;                                 // 0x02C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanInteractWhileIncapacitated;                            // 0x02C9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanInteractWhileCloaked;                                  // 0x02CA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanInteractWhileChainBlinking;                            // 0x02CB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanInteractWhileAttacking;                                // 0x02CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanInteractWhileShocked;                                  // 0x02CD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanInteractWhileUnhookingSelf;                            // 0x02CE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanInteractWhileCarrying;                                 // 0x02CF(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowNavigation;                                          // 0x02D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowRotation;                                            // 0x02D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseCameraMontageMode;                                     // 0x02D2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OwnerBlocksAttack;                                        // 0x02D3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsHighPriority;                                           // 0x02D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreOverlapOnInteractable;                              // 0x02D5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseAuthoritativeMovement;                                 // 0x02D6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanBeAuthoritativePushedDuringUpdate;                     // 0x02D7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanAuthoritativePush;                                     // 0x02D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DisableServerPositionUpdates;                             // 0x02D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CancelOnHit;                                              // 0x02DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CancelOnAttack;                                           // 0x02DB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HideItem;                                                 // 0x02DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AutoBindToParentInteractor;                               // 0x02DD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AutoBindToParentZone;                                     // 0x02DE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x02DF(0x0001) MISSED OFFSET
	struct FString                                     SecondaryInteractionID;                                   // 0x02E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	EInputInteractionType                              SecondaryInteractionInputType;                            // 0x02F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x02F1(0x0007) MISSED OFFSET
	struct FText                                       SecondaryInteractionDescriptionText;                      // 0x02F8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              CancelOnMoveInitialDelay;                                 // 0x0310(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CancelOnMoveInput;                                        // 0x0314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CancelOnMoveInputOnlyWhenRunning;                         // 0x0318(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0319(0x0007) MISSED OFFSET
	TArray<float>                                      ProgressBasedSkillChecks;                                 // 0x0320(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               CanCrouch;                                                // 0x0330(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AffectsStillness;                                         // 0x0331(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ConsideredIdle;                                           // 0x0332(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BlockSelfInteract;                                        // 0x0333(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InteractionTime;                                          // 0x0334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShowHighlightWhenActive;                                  // 0x0338(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShowHighlightWhenAvailable;                               // 0x0339(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EPowerProgressBar                                  ProgressBarToUpdate;                                      // 0x033A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UpdateHighlightOpacityUsingCharge;                        // 0x033B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	TArray<class UInterruptionDefinition*>             _interruptionDefinitions;                                 // 0x0340(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData07[0x18];                                      // 0x0350(0x0018) MISSED OFFSET
	class UCurveFloat*                                 NavigationSpeedCurveEnter;                                // 0x0368(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 NavigationSpeedCurve;                                     // 0x0370(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 NavigationSpeedCurveExit;                                 // 0x0378(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnInteractionAnimNotify;                                  // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               DebugUnavailability;                                      // 0x0390(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EInputInteractionType                              SecondaryActionInputType;                                 // 0x0391(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EInteractionOwnership                              OwnershipUsability;                                       // 0x0392(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x0393(0x0001) MISSED OFFSET
	float                                              ExitInteractionTime;                                      // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       InteractionDescriptionText;                               // 0x0398(0x0018) (Edit, BlueprintVisible)
	EButtonType                                        AtlantaLastButtonPressed;                                 // 0x03B0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x03B1(0x0003) MISSED OFFSET
	float                                              InteractionHeightDeltaMax;                                // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaximumVelocity;                                          // 0x03B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	struct FAnimationMontageDescriptor                 EnterMontage;                                             // 0x03C0(0x0020) (Edit, BlueprintVisible)
	struct FAnimationMontageDescriptor                 UpdateMontage;                                            // 0x03E0(0x0020) (Edit, BlueprintVisible)
	struct FAnimationMontageDescriptor                 ExitMontage;                                              // 0x0400(0x0020) (Edit, BlueprintVisible)
	struct FName                                       SnapSocketName;                                           // 0x0420(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0420(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	bool                                               _canBeAttachedToAnyZone;                                  // 0x042C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EButtonType                                        CancelButtonType;                                         // 0x042D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EButtonType                                        SecondaryActionButtonType;                                // 0x042E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               _isInterruptibleBySacrifice;                              // 0x042F(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IgnoreStun;                                               // 0x0430(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x0431(0x0007) MISSED OFFSET
	struct FGameplayTagContainer                       _tags;                                                    // 0x0438(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData13[0x1];                                       // 0x0458(0x0001) MISSED OFFSET
	bool                                               _allowInteractionInNarrowSpaces;                          // 0x0459(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               _startUpdateMontageDuringEnter;                           // 0x045A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x5];                                       // 0x045B(0x0005) MISSED OFFSET
	class UInteractor*                                 _interactor;                                              // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UInteractionDefinition*>              _mutuallyExclusiveInteractionsClient;                     // 0x0468(0x0010) (ExportObject, ZeroConstructor, Transient)
	struct FActivationDefinition                       _activationDefinition;                                    // 0x0478(0x0028) (Edit)
	class UPrimitiveComponent*                         _zone;                                                    // 0x04A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	EInputInteractionType                              _cancelInputType;                                         // 0x04A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x7];                                       // 0x04A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.InteractionDefinition"));

		return ptr;
	}


	bool ShouldStartUpdateMontageDuringEnter(class ADBDPlayer** Character);
	void SetSecondaryActionInputType(EInputInteractionType* inputType);
	void SetSecondaryActionButtonType(EButtonType* ButtonType);
	void SetCancelButtonType(EButtonType* ButtonType);
	void OnUpdateMontageStart(class ADBDPlayer** Player);
	void OnInterruptorUpdateStart(class UInterruptionDefinition** currentInterruption, class ADBDPlayer** interruptor, class ADBDPlayer** interruptee);
	void OnInteractionUpdateTick(class ADBDPlayer** Player, float* DeltaTime);
	void OnInteractionUpdateStart(class ADBDPlayer** Player);
	void OnInteractionUpdateMontageReachedMiddle(class ADBDPlayer** Player);
	void OnInteractionUpdateEnd(class ADBDPlayer** Player);
	void OnInteractionInterruptStarted(class ADBDPlayer** Player, class UInterruptionDefinition** currentInterruption, class ADBDPlayer** interruptingPlayer);
	void OnInteractionInterruptStart(class ADBDPlayer** Player, class UInterruptionDefinition** currentInterruption, class ADBDPlayer** interruptingPlayer);
	void OnInteractionInterruptEnd(class ADBDPlayer** Player, class UInterruptionDefinition** currentInterruption, class ADBDPlayer** interruptingPlayer);
	void OnInteractionInit(class ADBDPlayer** Player);
	void OnInteractionFinished(class ADBDPlayer** Player, bool* hasInteractionStarted);
	void OnInteractionExitTick(class ADBDPlayer** Player, float* DeltaTime);
	void OnInteractionExitStart(class ADBDPlayer** Player);
	void OnInteractionExitEnd(class ADBDPlayer** Player);
	void OnInteractionEnterTick(class ADBDPlayer** Player, float* DeltaTime);
	void OnInteractionEnterStart(class ADBDPlayer** Player, float* actualSnapTime);
	void OnInteractionEnterFailed(class ADBDPlayer** Player);
	void OnInteractionEnterEnd(class ADBDPlayer** Player);
	void OnInteractionCancelled(class ADBDPlayer** Player);
	void OnInteractionAnimNotifyEvent(struct FName* NotifyId, class ADBDPlayer** Player);
	bool IsSupportedCharacterType(class ADBDPlayer** Player);
	bool IsInterruptionPossible(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee, class UInterruptionDefinition** interruption);
	bool IsInteractionUsingOffering(class ADBDPlayer** Player);
	bool IsInteractionPossibleClient(class ADBDPlayer** Player, EInputInteractionType* InteractionType);
	bool IsInteractionPossibleBP(class ADBDPlayer** Player, EInputInteractionType* InteractionType);
	bool IsInteractionDone(class ADBDPlayer** Player, EInputInteractionType* InteractionType);
	bool IsInputPressed(class ADBDPlayer** Player);
	bool IsCharacterFacingInteractorDirection(class ADBDPlayer** Player);
	bool IsCancelable(class ADBDPlayer** Player);
	struct FAnimationMontageDescriptor GetUpdateMontage(class ADBDPlayer** Player);
	bool GetUpdateHighlightOpacityUsingCharge();
	float GetUpdateAnimationPlayRate(class ADBDPlayer** Player);
	struct FMontagePlaybackDefinition GetUpdateAnimationPlayBackDefinition(class ADBDPlayer** Player, bool* Follower);
	float GetSnapTimeAtStart(class ADBDPlayer** Player);
	float GetSnapTime(class ADBDPlayer** Player);
	struct FName GetSnapSocketName(class ADBDPlayer** Player);
	struct FVector GetSnapPointPositionAtStart(class ADBDPlayer** Player);
	struct FVector GetSnapPointPosition(class ADBDPlayer** Player);
	float GetSnapDistanceAtStart(class ADBDPlayer** Player);
	float GetSnapDistance(class ADBDPlayer** Player);
	EInputInteractionType GetSecondaryActionInputType();
	EButtonType GetSecondaryActionButtonType();
	struct FRotator GetRotationToSnapPointAtStart(class ADBDPlayer** Player);
	struct FRotator GetRotationToSnapPoint(class ADBDPlayer** Player);
	EPowerProgressBar GetPowerProgressBar();
	class ADBDPlayer* GetPlayerDependancy(class ADBDPlayer** interactingPlayer);
	TArray<class UInterruptionDefinition*> GetInterruptionDefinitions();
	class UInteractor* GetInteractor();
	float GetInteractionTimeMultiplier(class ADBDPlayer** Character);
	float GetInteractionTime(class ADBDPlayer** Character);
	struct FString GetInteractionText(class ADBDPlayer** Player);
	float GetInteractionExitTime(class ADBDPlayer** Character);
	struct FText GetInteractionDescriptionText();
	class AInteractable* GetInteractable();
	struct FVector GetFocalPointPosition(class ADBDPlayer** Player);
	struct FAnimationMontageDescriptor GetExitMontage(class ADBDPlayer** Player);
	struct FMontagePlaybackDefinition GetExitAnimationPlayBackDefinition(class ADBDPlayer** Player, bool* Follower);
	struct FAnimationMontageDescriptor GetEnterMontage(class ADBDPlayer** Player);
	struct FMontagePlaybackDefinition GetEnterAnimationPlayBackDefinition(class ADBDPlayer** Player, bool* Follower);
	float GetChargePercent();
	EButtonType GetCancelButtonType();
	bool GetAllowNavigation(class ADBDPlayer** Player);
	struct FVector GetActualSnapPointPositionAtStart(class ADBDPlayer** Player);
	struct FVector GetActualSnapPointPosition(class ADBDPlayer** Player);
	TArray<class AActor*> GetActorsToIgnoreOverlap();
	float GetActorHeightDelta(class ADBDPlayer** Player);
	bool DoesPlayerHaveClearPath(class ADBDPlayer** Player);
	void CompleteCharge(class ADBDPlayer** Character);
	bool CanOverrideInteraction(class UInteractionDefinition** Interaction);
	float CalculateSnapTimeForConstantSpeed(class ADBDPlayer** Player, float* Speed);
	float CalculateSnapTimeForConstantMaxNormalMovementSpeed(class ADBDPlayer** Player, float* speedBoost);
	void AttachToZone(class UPrimitiveComponent** zone);
	void AttachToInteractor(class UInteractor** Interactor);
	bool AtlantaItemUseToggleState();
	struct FName AtlantaGetPowerButtonImageID();
	void AddMutuallyExclusiveInteraction(class UInteractionDefinition** Interaction);
};


// Class DeadByDaylight.ChargeableInteractionDefinition
// 0x0130 (0x05E0 - 0x04B0)
class UChargeableInteractionDefinition : public UInteractionDefinition
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x04B0(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    SkillCheckResponseAestheticDelegate;                      // 0x04C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SkillCheckResponseAuthorityDelegate;                      // 0x04D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               StopInteractionOnChargeComplete;                          // 0x04E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HasProgressivelyHarderSkillChecks;                        // 0x04E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x04EA(0x0002) MISSED OFFSET
	float                                              ProgressiveDifficultyModifier;                            // 0x04EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EChargeableInteractionBarType                      ProgressBarType;                                          // 0x04F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x04F1(0x0007) MISSED OFFSET
	TArray<float>                                      ProgressPips;                                             // 0x04F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               HideProgressBar;                                          // 0x0508(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShowItemIcon;                                             // 0x0509(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x050A(0x0006) MISSED OFFSET
	class UChargeableComponent*                        _chargeableComponent;                                     // 0x0510(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               AtlantaIsCancellableWhileCharging;                        // 0x0518(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x57];                                      // 0x0519(0x0057) MISSED OFFSET
	bool                                               ShowSpeedProficiencyForMultipleInteractors;               // 0x0570(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0571(0x0007) MISSED OFFSET
	struct FGameplayTagContainer                       _interactionSpecificActionSpeedTags;                      // 0x0578(0x0020) (Edit, DisableEditOnInstance)
	struct FGameplayTagContainer                       _interactionSpecificActionSpeedMultiplicativeTags;        // 0x0598(0x0020) (Edit, DisableEditOnInstance)
	struct FGameplayTagContainer                       _interactionSpecificActionSpeedAdditiveTags;              // 0x05B8(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x8];                                       // 0x05D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ChargeableInteractionDefinition"));

		return ptr;
	}


	bool ShouldShowSpeedProficiencyForMultipleInteractors();
	void SetSpeedBase(float* speedBase);
	void SetChargeableComponent(class UChargeableComponent** ChargeableComponent);
	void OnSkillCheckResponseAuthorityBP(class ADBDPlayer** Player, bool* success, bool* Bonus, bool* hadInput, ESkillCheckCustomType* Type);
	void OnSkillCheckResponseAuthority(bool* success, bool* Bonus, class ADBDPlayer** Player, bool* TriggerLoudNoise, bool* hadInput, ESkillCheckCustomType* Type);
	void OnSkillCheckResponseAestheticBP(class ADBDPlayer** Player, bool* success, bool* Bonus, bool* hadInput, ESkillCheckCustomType* Type);
	void OnSkillCheckResponseAesthetic(bool* success, bool* Bonus, class ADBDPlayer** Player, bool* TriggerLoudNoise, bool* hadInput, ESkillCheckCustomType* Type);
	void OnInteractionCompletionStateChanged(class ADBDPlayer** Player, bool* complete);
	void OnChargeableChangedBP(class UChargeableComponent** oldChargeable, class UChargeableComponent** newChargeable);
	bool HasSkillCheckHappened(class ADBDPlayer** Character);
	float GetTunableValue(struct FName* TunableValueID, float* defaultValue);
	float GetSuccessProbability();
	float GetSkillCheckProbability();
	float GetSkillCheckFailureTimePenalty();
	float GetSkillCheckFailurePercentPenalty(class ADBDPlayer** Player);
	float GetSkillCheckDifficulityModifier(class ADBDPlayer** Character);
	float GetSkillCheckCharge(class ADBDPlayer** Player, bool* success, bool* Bonus, ESkillCheckCustomType* Type);
	int GetPipsPassed();
	float GetPerkMultiplier(class ADBDPlayer** Character);
	float GetMultiplicativeLuckBonus(class ADBDPlayer** Character);
	float GetMaxCharge();
	float GetItemEfficiencyModifier(class ADBDPlayer** Character);
	float GetGoodSkillCheckSuccessPercentReward(class ADBDPlayer** Player);
	float GetChargeSpeedModifier(class ADBDPlayer** Character);
	float GetChargeAmountForTime(float* DeltaSeconds, class ADBDPlayer** Character);
	class UChargeableComponent* GetChargeableComponent();
	float GetBonusSkillCheckZoneSizeModifier(class ADBDPlayer** Character);
	float GetBonusSkillCheckSuccessPercentReward(class ADBDPlayer** Player);
	float GetBlueprintChargeSpeedMultiplier(class ADBDPlayer** Character);
	float GetAdditiveLuckBonus(class ADBDPlayer** Character);
	float GetAdditiveChargeTimeReductionAsMultiplier(class ADBDPlayer** Character);
	void Authority_ChargeWithItem(float* DeltaSeconds, class ACollectable** Item, class ADBDPlayer** Character);
	void AddCharge(float* DeltaSeconds, class ADBDPlayer** Character);
};


// Class DeadByDaylight.AchievementHandlerComponent
// 0x0000 (0x0100 - 0x0100)
class UAchievementHandlerComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AchievementHandlerComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.BaseUserWidget
// 0x00A0 (0x0300 - 0x0260)
class UBaseUserWidget : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0260(0x0010) MISSED OFFSET
	class UWidget*                                     HighlightWidget;                                          // 0x0270(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       _tutorialAnimationName;                                   // 0x0278(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0278(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	int                                                _tutorialNumberOfLoops;                                   // 0x0284(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x78];                                      // 0x0288(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BaseUserWidget"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.ActionButton
// 0x01D8 (0x04D8 - 0x0300)
class UActionButton : public UBaseUserWidget
{
public:
	struct FSlateBrush                                 Normal;                                                   // 0x0300(0x0090) (Edit, DisableEditOnInstance)
	struct FSlateBrush                                 Toggled;                                                  // 0x0390(0x0090) (Edit, DisableEditOnInstance)
	struct FSlateBrush                                 Disabled;                                                 // 0x0420(0x0090) (Edit, DisableEditOnInstance)
	class UImage*                                      IconImage;                                                // 0x04B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ToggleSmokeImage;                                         // 0x04B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     Button;                                                   // 0x04C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              DefaultOpacity;                                           // 0x04C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ToggledOpacity;                                           // 0x04CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DisabledOpacity;                                          // 0x04D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EActionButtonState                                 _currentState;                                            // 0x04D4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	EActionButtonState                                 _previousState;                                           // 0x04D5(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04D6(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActionButton"));

		return ptr;
	}


	void SetState(EActionButtonState* State);
	void SetSlateBrush(struct FSlateBrush* InBrush);
	void SetPreviousState();
};


// Class DeadByDaylight.BasePerkIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UBasePerkIconStrategy : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BasePerkIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.ActivationTimerElapsedIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UActivationTimerElapsedIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActivationTimerElapsedIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.ActivationTimerIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UActivationTimerIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActivationTimerIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.ActivationTimerRemainingPercentIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UActivationTimerRemainingPercentIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActivationTimerRemainingPercentIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.ActiveOnTimerOrApplicablePerkIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UActiveOnTimerOrApplicablePerkIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActiveOnTimerOrApplicablePerkIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.ActiveOnTimerPerkIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UActiveOnTimerPerkIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActiveOnTimerPerkIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.ActiveWhenApplicableAndNotCampingPerkIconStrategy
// 0x0008 (0x0038 - 0x0030)
class UActiveWhenApplicableAndNotCampingPerkIconStrategy : public UBasePerkIconStrategy
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActiveWhenApplicableAndNotCampingPerkIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.ActiveWhenApplicablePerkIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UActiveWhenApplicablePerkIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActiveWhenApplicablePerkIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.ActivityTrackerComponent
// 0x0020 (0x0120 - 0x0100)
class UActivityTrackerComponent : public UActorComponent
{
public:
	TWeakObjectPtr<class ADBDPlayerState>              _player;                                                  // 0x0100(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0108(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActivityTrackerComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.ActorClipperComponent
// 0x0068 (0x0168 - 0x0100)
class UActorClipperComponent : public UActorComponent
{
public:
	class USphereComponent*                            Shape;                                                    // 0x0100(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<class AActor*, struct FClippedActor>          _clippedActors;                                           // 0x0108(0x0050) (ZeroConstructor, Transient)
	TWeakObjectPtr<class UPrimitiveCollection>         _clippables;                                              // 0x0158(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0160(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActorClipperComponent"));

		return ptr;
	}


	void SetPrimitiveCollection(class UPrimitiveCollection** clippables);
	void SetClippingEnabled(bool* Enabled);
};


// Class DeadByDaylight.ActorComponentExt
// 0x0000 (0x0030 - 0x0030)
class UActorComponentExt : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActorComponentExt"));

		return ptr;
	}

};


// Class DeadByDaylight.ActorDependency
// 0x0010 (0x0110 - 0x0100)
class UActorDependency : public UActorComponent
{
public:
	TArray<struct FDependency>                         Dependencies;                                             // 0x0100(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActorDependency"));

		return ptr;
	}

};


// Class DeadByDaylight.ActorDetectorComponent
// 0x0028 (0x0128 - 0x0100)
class UActorDetectorComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnActorDetected;                                          // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UClass*>                              CollectedTypes;                                           // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UPrimitiveComponent*                         _primitive;                                               // 0x0120(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActorDetectorComponent"));

		return ptr;
	}


	void SetDetectionPrimitive(class UPrimitiveComponent** Primitive);
	void OnOverlapEnter(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
};


// Class DeadByDaylight.ActorKnowledgeCollection
// 0x0028 (0x0128 - 0x0100)
class UActorKnowledgeCollection : public UActorComponent
{
public:
	TArray<class AActor*>                              _actors;                                                  // 0x0100(0x0010) (Net, ZeroConstructor, Transient)
	bool                                               _available;                                               // 0x0110(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	class ACharacter*                                  _possessor;                                               // 0x0118(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EKnowledgeSharingType                              _sharing;                                                 // 0x0120(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0121(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActorKnowledgeCollection"));

		return ptr;
	}


	bool IsAvailable(class ACharacter** Character);
	bool Contains(class AActor** Actor);
	void Authority_SetSharingType(EKnowledgeSharingType* value);
	void Authority_SetPossessor(class ACharacter** possessor);
	void Authority_SetAvailable(bool* value);
	void Authority_Remove(class AActor** Actor);
	void Authority_Empty();
	void Authority_Append(TArray<class AActor*>* Actors);
	bool Authority_Add(class AActor** Actor);
};


// Class DeadByDaylight.ActorSpawner
// 0x00B0 (0x0320 - 0x0270)
class UActorSpawner : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0270(0x0008) MISSED OFFSET
	EGameplayElementType                               Type;                                                     // 0x0278(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0279(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData02[0x30];                                      // 0x0279(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.ActorSpawner.Visualization
	bool                                               ActivatedByDefault;                                       // 0x02B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x02B1(0x0007) MISSED OFFSET
	TArray<struct FActorSpawnerProperties>             ActivatedSceneElement;                                    // 0x02B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FActorSpawnerProperties>             DeactivatedSceneElement;                                  // 0x02C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              Weight;                                                   // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SpawnCountMax;                                            // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SpawnPriorityTier;                                        // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x02E4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAsyncActorSpawned;                                      // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData05[0x8];                                       // 0x02F8(0x0008) MISSED OFFSET
	bool                                               WeightInfluenceable;                                      // 0x0300(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WeightInfluencer;                                         // 0x0301(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x0302(0x0002) MISSED OFFSET
	float                                              Cost;                                                     // 0x0304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      _toSpawn;                                                 // 0x0308(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0310(0x0008) MISSED OFFSET
	TWeakObjectPtr<class AActor>                       _spawnedActorOnAuthority;                                 // 0x0318(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActorSpawner"));

		return ptr;
	}


	bool UseActivatedElement();
	bool IsEnabled();
	void EditorForceSpawnVisualization();
	class AActor* AuthorityGetSpawnedActor();
	void Authority_SpawnActorAsyncEvent();
};


// Class DeadByDaylight.ObjectRandomizer
// 0x0010 (0x0280 - 0x0270)
class UObjectRandomizer : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0270(0x0008) MISSED OFFSET
	int                                                MinPopulation;                                            // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxPopulation;                                            // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ObjectRandomizer"));

		return ptr;
	}

};


// Class DeadByDaylight.ActorSpawnerRandomizer
// 0x0020 (0x02A0 - 0x0280)
class UActorSpawnerRandomizer : public UObjectRandomizer
{
public:
	TArray<struct FSpawnerElement>                     ActivatedSpawnerContentLists;                             // 0x0280(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FSpawnerElement>                     DeactivatedSpawnerContentLists;                           // 0x0290(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActorSpawnerRandomizer"));

		return ptr;
	}

};


// Class DeadByDaylight.ActorVariationSpawner
// 0x0050 (0x02C0 - 0x0270)
class UActorVariationSpawner : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0270(0x0028) MISSED OFFSET
	TArray<struct FActorVariationElements>             Variations;                                               // 0x0298(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02A8(0x0008) MISSED OFFSET
	class UClass*                                      _toSpawn;                                                 // 0x02B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ActorVariationSpawner"));

		return ptr;
	}

};


// Class DeadByDaylight.AICharacterBehaviourData
// 0x0000 (0x0030 - 0x0030)
class UAICharacterBehaviourData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AICharacterBehaviourData"));

		return ptr;
	}

};


// Class DeadByDaylight.AICharacterBehaviour
// 0x0028 (0x0058 - 0x0030)
class UAICharacterBehaviour : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AICharacterBehaviour"));

		return ptr;
	}

};


// Class DeadByDaylight.CharacterEvasionBehaviourData
// 0x0020 (0x0050 - 0x0030)
class UCharacterEvasionBehaviourData : public UAICharacterBehaviourData
{
public:
	class AActor*                                      _hunter;                                                  // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TArray<class AActor*>                              _escapePoints;                                            // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              _minEscapeDist;                                           // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterEvasionBehaviourData"));

		return ptr;
	}


	void Init(class AActor** Hunter, TArray<class AActor*>* escapePoints, float* minEscapeDist);
};


// Class DeadByDaylight.AICharacterEvasionBehaviour
// 0x0028 (0x0080 - 0x0058)
class UAICharacterEvasionBehaviour : public UAICharacterBehaviour
{
public:
	class ADBDPlayer*                                  _prey;                                                    // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ADBDAIPlayerController*                      _preyAIController;                                        // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      _currentEscapePoint;                                      // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCharacterEvasionBehaviourData*              _characterEvasionData;                                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AICharacterEvasionBehaviour"));

		return ptr;
	}


	void EscapeDestinationReached(struct FAIRequestID* RequestID, TEnumAsByte<EPathFollowingResult>* Result);
};


// Class DeadByDaylight.AimableInterface
// 0x0000 (0x0030 - 0x0030)
class UAimableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AimableInterface"));

		return ptr;
	}

};


// Class DeadByDaylight.AimAssistComponent
// 0x0030 (0x0130 - 0x0100)
class UAimAssistComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AimAssistComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.AimingStrategyInterface
// 0x0000 (0x0030 - 0x0030)
class UAimingStrategyInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AimingStrategyInterface"));

		return ptr;
	}

};


// Class DeadByDaylight.AIMoveToInteractData
// 0x0018 (0x0048 - 0x0030)
class UAIMoveToInteractData : public UAICharacterBehaviourData
{
public:
	class AActor*                                      _interactActor;                                           // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      _targetPositionActor;                                     // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ECharacterMovementTypes                            _characterMovementTypes;                                  // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AIMoveToInteractData"));

		return ptr;
	}


	void Init(class AActor** interactActor, ECharacterMovementTypes* characterMovementTypes, class AActor** targetPositionActor);
};


// Class DeadByDaylight.AIMoveToInteract
// 0x0018 (0x0070 - 0x0058)
class UAIMoveToInteract : public UAICharacterBehaviour
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET
	class ADBDAIPlayerController*                      _aiController;                                            // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AIMoveToInteract"));

		return ptr;
	}


	void InteractionPointReached(struct FAIRequestID* RequestID, TEnumAsByte<EPathFollowingResult>* Result);
	void Init(class ADBDPlayer** Character, class UAICharacterBehaviourData** behaviourData);
};


// Class DeadByDaylight.AlternatingColor
// 0x0048 (0x0078 - 0x0030)
class UAlternatingColor : public UObject
{
public:
	struct FLinearColor                                FirstColor;                                               // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                SecondColor;                                              // 0x0040(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ColorChangePeriod;                                        // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x24];                                      // 0x0054(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AlternatingColor"));

		return ptr;
	}

};


// Class DeadByDaylight.AlwaysVisiblePerkIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UAlwaysVisiblePerkIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AlwaysVisiblePerkIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.AmbienceBoxComponent
// 0x0000 (0x05C0 - 0x05C0)
class UAmbienceBoxComponent : public UBoxComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AmbienceBoxComponent"));

		return ptr;
	}


	void SetBoxExtent(struct FVector* InBoxExtent, bool* bUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
};


// Class DeadByDaylight.AnalyticsFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UAnalyticsFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AnalyticsFunctionLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.Gate
// 0x0018 (0x0358 - 0x0340)
class AGate : public AActor
{
public:
	TArray<float>                                      InteractionInputs;                                        // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              InteractionOutput;                                        // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0354(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Gate"));

		return ptr;
	}

};


// Class DeadByDaylight.AndGate
// 0x0000 (0x0358 - 0x0358)
class AAndGate : public AGate
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AndGate"));

		return ptr;
	}

};


// Class DeadByDaylight.AnimationMontageSlave
// 0x0008 (0x0108 - 0x0100)
class UAnimationMontageSlave : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AnimationMontageSlave"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.AnimNotifyState_HideCustomizationAttachments
// 0x0008 (0x0040 - 0x0038)
class UAnimNotifyState_HideCustomizationAttachments : public UAnimNotifyState
{
public:
	ECustomizationCategory                             Category;                                                 // 0x0038(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AnimNotifyState_HideCustomizationAttachments"));

		return ptr;
	}

};


// Class DeadByDaylight.AnimTagProvider
// 0x0000 (0x0030 - 0x0030)
class UAnimTagProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AnimTagProvider"));

		return ptr;
	}

};


// Class DeadByDaylight.ScreenBase
// 0x00C0 (0x00F0 - 0x0030)
class UScreenBase : public UObject
{
public:
	bool                                               isAnimationDone;                                          // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	class UGFxObject*                                  ScreenObject;                                             // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0040(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ScreenBase"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ArchiveBaseScreen
// 0x0018 (0x0108 - 0x00F0)
class UArchiveBaseScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00F0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchiveBaseScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ArchiveIntroScreen
// 0x0000 (0x00F0 - 0x00F0)
class UArchiveIntroScreen : public UScreenBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchiveIntroScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.BasePopupScreen
// 0x0000 (0x00F0 - 0x00F0)
class UBasePopupScreen : public UScreenBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BasePopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.GenericPopupScreen
// 0x0020 (0x0110 - 0x00F0)
class UGenericPopupScreen : public UBasePopupScreen
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00F0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GenericPopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ArchivePassPurchasePopupScreen
// 0x0000 (0x0110 - 0x0110)
class UArchivePassPurchasePopupScreen : public UGenericPopupScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchivePassPurchasePopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ArchivePastStoriesScreen
// 0x0018 (0x0120 - 0x0108)
class UArchivePastStoriesScreen : public UArchiveBaseScreen
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0108(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchivePastStoriesScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ArchiveRewardsScreen
// 0x0078 (0x0180 - 0x0108)
class UArchiveRewardsScreen : public UArchiveBaseScreen
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0108(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchiveRewardsScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ArchivesHelper
// 0x0000 (0x0030 - 0x0030)
class UArchivesHelper : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchivesHelper"));

		return ptr;
	}

};


// Class DeadByDaylight.ArchivesManager
// 0x0020 (0x0058 - 0x0038)
class UArchivesManager : public UGameInstanceSubsystem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	class UArchiveStoriesContainer*                    _storiesContainer;                                        // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UArchiveVignettesContainer*                  _vignettesContainer;                                      // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class URewardTrackContainer*                       _rewardTrackContainer;                                    // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchivesManager"));

		return ptr;
	}

};


// Class DeadByDaylight.ArchiveStoriesContainer
// 0x0268 (0x0298 - 0x0030)
class UArchiveStoriesContainer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x198];                                     // 0x0030(0x0198) MISSED OFFSET
	class URewardTrackContainer*                       _rewardTrackContainer;                                    // 0x01C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB8];                                      // 0x01D0(0x00B8) MISSED OFFSET
	class UWalletHandler*                              _wallet;                                                  // 0x0288(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UArchiveVignettesContainer*                  _vignettesContainer;                                      // 0x0290(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchiveStoriesContainer"));

		return ptr;
	}

};


// Class DeadByDaylight.ArchiveStoryScreen
// 0x0130 (0x0238 - 0x0108)
class UArchiveStoryScreen : public UArchiveBaseScreen
{
public:
	unsigned char                                      UnknownData00[0x130];                                     // 0x0108(0x0130) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchiveStoryScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ArchiveTierPurchasePopupScreen
// 0x0018 (0x0128 - 0x0110)
class UArchiveTierPurchasePopupScreen : public UGenericPopupScreen
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0110(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchiveTierPurchasePopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ArchiveVignettesContainer
// 0x00B0 (0x00E0 - 0x0030)
class UArchiveVignettesContainer : public UObject
{
public:
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0030(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchiveVignettesContainer"));

		return ptr;
	}

};


// Class DeadByDaylight.ArchiveWidgetScreen
// 0x0030 (0x0120 - 0x00F0)
class UArchiveWidgetScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00F0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArchiveWidgetScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ArmIKSensorComponent
// 0x0088 (0x0188 - 0x0100)
class UArmIKSensorComponent : public UActorComponent
{
public:
	class USkeletalMeshComponent*                      _mesh;                                                    // 0x0100(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              _capsuleRadius;                                           // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              _capsuleHalfHeight;                                       // 0x010C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              _traceLength;                                             // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	TMap<EArm, struct FArmIKSensorDatum>               _arms;                                                    // 0x0118(0x0050) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0168(0x0008) MISSED OFFSET
	TArray<TWeakObjectPtr<class AActor>>               _ignoredActors;                                           // 0x0170(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0180(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ArmIKSensorComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.AssetLibrary
// 0x0080 (0x00B0 - 0x0030)
class UAssetLibrary : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class UObjectLibrary*                              _objectLibrary;                                           // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x64];                                      // 0x0040(0x0064) MISSED OFFSET
	float                                              SecondsDelayBetweenBatch;                                 // 0x00A4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AssetLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.AssetLibraryManager
// 0x00D0 (0x0100 - 0x0030)
class UAssetLibraryManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	class UObject*                                     _worldContextObject;                                      // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<int, class UCharacterItemsAssetLibrary*>      _characterItemsAssetLibrary;                              // 0x0048(0x0050) (ZeroConstructor, Transient)
	class UIniAssetLibrary*                            _globalAssetLibrary;                                      // 0x0098(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMenuAssetLibrary*                           _menuAssetLibrary;                                        // 0x00A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UGameAssetLibrary*                           _gameAssetLibrary;                                        // 0x00A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTutorialAssetLibrary*                       _tutorialAssetLibrary;                                    // 0x00B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET
	class UShopManager*                                _shopManager;                                             // 0x00C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x00C8(0x0010) MISSED OFFSET
	TArray<struct FAssetLibraryLoader>                 _loadingList;                                             // 0x00D8(0x0010) (ZeroConstructor, Transient)
	int                                                CharacterItemsAssetLoadCountPerChunk;                     // 0x00E8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                BlindPackAssetLoadCountPerChunk;                          // 0x00EC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MenuAssetLoadCountPerChunk;                               // 0x00F0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                GlobalAssetLoadCountPerChunk;                             // 0x00F4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                GameAssetLoadCountPerChunk;                               // 0x00F8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AssetLibraryManager"));

		return ptr;
	}

};


// Class DeadByDaylight.AssetUtilities
// 0x0000 (0x0030 - 0x0030)
class UAssetUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AssetUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaCamperInitializer
// 0x0018 (0x0118 - 0x0100)
class UAtlantaCamperInitializer : public UActorComponent
{
public:
	struct FVector                                     HeartbeatOffset;                                          // 0x0100(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x010C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaCamperInitializer"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaCDNWrapper
// 0x0060 (0x03A0 - 0x0340)
class AAtlantaCDNWrapper : public AActor
{
public:
	struct FString                                     ServiceEndpoint;                                          // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     ManifestURL;                                              // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     CloudURL;                                                 // 0x0360(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     InstallDirectory;                                         // 0x0370(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UAtlantaPendingContent*                      _contentToInstall;                                        // 0x0380(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0388(0x0004) MISSED OFFSET
	struct FScriptDelegate                             _onProcessComplete;                                       // 0x038C(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0388(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaCDNWrapper"));

		return ptr;
	}


	void RequestManifestURL(struct FString* platform, struct FString* Version);
	void RequestContent(struct FString* manifest, struct FString* cloud, struct FString* installDir);
	void OnRequestSucceeded(class UAtlantaPendingContent** PendingContent);
	void OnRequestFailed(struct FText* ErrorText, int* ErrorCode);
	void OnInstallSucceeded();
	void OnInstallFailed(struct FText* ErrorText, int* ErrorCode);
};


// Class DeadByDaylight.AtlantaFriendsListScreenUMG
// 0x0068 (0x0158 - 0x00F0)
class UAtlantaFriendsListScreenUMG : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x00F0(0x0060) MISSED OFFSET
	class UUMGAtlantaFriendListScreen*                 _atlantaFriendListScreen;                                 // 0x0150(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaFriendsListScreenUMG"));

		return ptr;
	}


	void HandleResearchButtonClicked(struct FText* searchInput);
	void HandleClosedButtonClicked();
};


// Class DeadByDaylight.AtlantaHeartbeatActor
// 0x0020 (0x0360 - 0x0340)
class AAtlantaHeartbeatActor : public AActor
{
public:
	bool                                               IsHeartbeatShown;                                         // 0x0340(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0341(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaHeartbeatActor"));

		return ptr;
	}


	void ShowHeartbeat();
	void SetHeartbeatIntensity(float* heartbeatIntensity);
	void SetHeartbeatAnimationSpeedRate(float* speedRate);
	void HideHeartbeat();
};


// Class DeadByDaylight.AtlantaHudDirectionalStick
// 0x0010 (0x0310 - 0x0300)
class UAtlantaHudDirectionalStick : public UBaseUserWidget
{
public:
	class UCanvasPanel*                                ContainerToRotate;                                        // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ArrowsContainer;                                          // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaHudDirectionalStick"));

		return ptr;
	}


	void SetArrowsActive(bool* value);
};


// Class DeadByDaylight.LobbyLevel
// 0x0020 (0x0368 - 0x0348)
class ALobbyLevel : public ALevelScriptActor
{
public:
	EWorldFlowEvent                                    LobbyLoadedEvent;                                         // 0x0348(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	TArray<class APlayerStart*>                        _registeredSpawns;                                        // 0x0350(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0360(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LobbyLevel"));

		return ptr;
	}


	void OnShopSubLevelLoaded();
	void OnLobbySubLevelLoaded();
};


// Class DeadByDaylight.AtlantaLobbyLevel
// 0x0060 (0x03C8 - 0x0368)
class AAtlantaLobbyLevel : public ALobbyLevel
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	struct FLightingChannels                           ForefrontLightingChannel;                                 // 0x0370(0x0001) (Edit)
	struct FLightingChannels                           BackgroundLightingChannel;                                // 0x0371(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0372(0x0002) MISSED OFFSET
	TWeakObjectPtr<class ADBDMenuPlayer>               _backgroundPawn;                                          // 0x0374(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	class AAtlantaOfflineLobbyCamera*                  _offlineLobbyCamera;                                      // 0x0380(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      _roleSelectionLobbyCameraPosition;                        // 0x0388(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      _characterSelectionLobbyCameraPosition;                   // 0x0390(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class APlayerStart*                                _frontKillerStart;                                        // 0x0398(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class APlayerStart*                                _backKillerStart;                                         // 0x03A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class APlayerStart*                                _frontSurvivorStart;                                      // 0x03A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class APlayerStart*                                _backSurvivorStart;                                       // 0x03B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x03B8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaLobbyLevel"));

		return ptr;
	}


	void FrontMenuPlayerSpawnedHandle(class ADBDMenuPlayer** forefrontPawn);
};


// Class DeadByDaylight.AtlantaNavigationScreen
// 0x0008 (0x00F8 - 0x00F0)
class UAtlantaNavigationScreen : public UScreenBase
{
public:
	class UUMGAtlantaNavigationScreen*                 _umgScreen;                                               // 0x00F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaNavigationScreen"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaObjectiveWidget
// 0x0068 (0x0368 - 0x0300)
class UAtlantaObjectiveWidget : public UBaseUserWidget
{
public:
	class UTextBlock*                                  ObjectiveLabel;                                           // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x54];                                      // 0x0308(0x0054) MISSED OFFSET
	float                                              _totalFadeOutTime;                                        // 0x035C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                _polynomialOrder;                                         // 0x0360(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0364(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaObjectiveWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaOfflineLobbyCamera
// 0x0010 (0x08B0 - 0x08A0)
class AAtlantaOfflineLobbyCamera : public ACameraActor
{
public:
	float                                              ZCameraPositionOffsetMultiplier;                          // 0x08A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x08A4(0x0004) MISSED OFFSET
	float                                              _kDefaultAspectRatio;                                     // 0x08A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x08AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaOfflineLobbyCamera"));

		return ptr;
	}


	void SetCameraRotation(struct FRotator* rotationVector);
	void SetCameraPosition(struct FVector* positionVector);
};


// Class DeadByDaylight.AtlantaPartyFlowHandler
// 0x0198 (0x01C8 - 0x0030)
class UAtlantaPartyFlowHandler : public UObject
{
public:
	unsigned char                                      UnknownData00[0x198];                                     // 0x0030(0x0198) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaPartyFlowHandler"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaInstalledContent
// 0x0020 (0x0050 - 0x0030)
class UAtlantaInstalledContent : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaInstalledContent"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaPendingContent
// 0x0040 (0x0090 - 0x0050)
class UAtlantaPendingContent : public UAtlantaInstalledContent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0050(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaPendingContent"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaPatchingLibrary
// 0x0000 (0x0030 - 0x0030)
class UAtlantaPatchingLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaPatchingLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaPromptWidget
// 0x0018 (0x0318 - 0x0300)
class UAtlantaPromptWidget : public UBaseUserWidget
{
public:
	class UTextBlock*                                  PromptLabel;                                              // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0308(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaPromptWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaRitualsScreen
// 0x0068 (0x0158 - 0x00F0)
class UAtlantaRitualsScreen : public UScreenBase
{
public:
	class UUMGAtlantaRitualsScreen*                    _umgScreen;                                               // 0x00F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x60];                                      // 0x00F8(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaRitualsScreen"));

		return ptr;
	}


	void OnRefreshRitual();
	void OnExitRequested();
	void OnClaimRewards(int* ritualId);
};


// Class DeadByDaylight.AtlantaRoleSelectionScreen
// 0x0008 (0x00F8 - 0x00F0)
class UAtlantaRoleSelectionScreen : public UScreenBase
{
public:
	class UUMGRoleSelectionScreen*                     _umgScreen;                                               // 0x00F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaRoleSelectionScreen"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaSkillCheckWidget
// 0x0050 (0x0350 - 0x0300)
class UAtlantaSkillCheckWidget : public UBaseUserWidget
{
public:
	float                                              PathCoveredAngle;                                         // 0x0300(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0304(0x0004) MISSED OFFSET
	class UCanvasPanel*                                SkillCheckArea;                                           // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      HitArea;                                                  // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      BonusArea;                                                // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                HitAreaContainer;                                         // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                BonusAreaContainer;                                       // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                HitAreaStartMarkerContainer;                              // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                HitAreaEndMarkerContainer;                                // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                MarkerContainer;                                          // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0348(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaSkillCheckWidget"));

		return ptr;
	}


	void SetActive(bool* Active);
	void OnIsActiveChanged(bool* IsActive);
	bool IsActive();
};


// Class DeadByDaylight.TutorialLevel
// 0x0040 (0x0388 - 0x0348)
class ATutorialLevel : public ALevelScriptActor
{
public:
	bool                                               _tutorialStarted;                                         // 0x0348(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3F];                                      // 0x0349(0x003F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TutorialLevel"));

		return ptr;
	}


	void SetHandledTutorialStep(ETutorialStep* tutorialStep);
	void RemoveObjective(struct FName* ObjectiveId);
	void OnTutorialStepUpdated(ETutorialStep* tutorialStep);
	void OnNotificationDismissed(struct FName* notificationId);
	void HandleTutorialStepReached();
	void HandleNotificationDismissed(struct FName* notificationId);
	void DisplayNotification(struct FName* notificationId, float* Time);
	void DisplayBlockingNotification(struct FName* notificationId);
	void CompleteObjective(struct FName* ObjectiveId);
	void AddObjective(struct FName* ObjectiveId);
};


// Class DeadByDaylight.AtlantaTutorialLevel
// 0x0000 (0x0388 - 0x0388)
class AAtlantaTutorialLevel : public ATutorialLevel
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaTutorialLevel"));

		return ptr;
	}


	void SetHandledTutorialStep(ETutorialStep* tutorialStep);
	void RemoveObjective(struct FName* ObjectiveId);
	void OnTutorialStepUpdated(ETutorialStep* tutorialStep);
	void OnNotificationDismissed(struct FName* notificationId);
	void HandleTutorialStepReached();
	void HandleNotificationDismissed(struct FName* notificationId);
	void DisplayNotification(struct FName* notificationId, float* Time);
	void DisplayBlockingNotification(struct FName* notificationId);
	void CompleteObjective(struct FName* ObjectiveId);
	void AddObjective(struct FName* ObjectiveId);
};


// Class DeadByDaylight.AtlantaTutorialObjectiveManager
// 0x0020 (0x0050 - 0x0030)
class UAtlantaTutorialObjectiveManager : public UObject
{
public:
	TArray<class UAtlantaObjectiveWidget*>             _objectivesList;                                          // 0x0030(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UVerticalBox*                                _objectivesContainer;                                     // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaTutorialObjectiveManager"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlantaTutorialWidget
// 0x0030 (0x0330 - 0x0300)
class UAtlantaTutorialWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0300(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaTutorialWidget"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.AtlantaUtilities
// 0x0000 (0x0030 - 0x0030)
class UAtlantaUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlantaUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.AtlCookedMaps
// 0x0010 (0x0048 - 0x0038)
class UAtlCookedMaps : public UPrimaryDataAsset
{
public:
	TArray<struct FAtlCookedMapDescription>            Descriptions;                                             // 0x0038(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AtlCookedMaps"));

		return ptr;
	}

};


// Class DeadByDaylight.AudioFXComponent
// 0x0058 (0x0158 - 0x0100)
class UAudioFXComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         _audioAmbientDetector;                                    // 0x0100(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0108(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AudioFXComponent"));

		return ptr;
	}


	void SetAudioAmbientDetector(class UPrimitiveComponent** audioAmbientDetector);
	void OnLocallyObservedChanged(bool* locallyObserved);
	void OnDeafenCompleted();
	void Deafen(float* Duration);
};


// Class DeadByDaylight.AuthoritativeMovementComponent
// 0x0040 (0x0140 - 0x0100)
class UAuthoritativeMovementComponent : public UActorComponent
{
public:
	TArray<class ADBDPlayer*>                          _playersToPush;                                           // 0x0100(0x0010) (ZeroConstructor, Transient)
	TArray<class ADBDPlayer*>                          _stopIgnorePlayerOnEndOverlap;                            // 0x0110(0x0010) (ZeroConstructor, Transient)
	TArray<class ADBDPlayer*>                          _ignorePlayers;                                           // 0x0120(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0130(0x0008) MISSED OFFSET
	class UCapsuleComponent*                           _pawnDetector;                                            // 0x0138(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AuthoritativeMovementComponent"));

		return ptr;
	}


	void SetPawnDetector(class UCapsuleComponent** pawnDetector);
	void OnPawnDetectorOverlapExit(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void OnPawnDetectorOverlapEnter(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
};


// Class DeadByDaylight.AutomaticLeanComponent
// 0x02A8 (0x03A8 - 0x0100)
class UAutomaticLeanComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnLeanStateChanged;                                       // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCanInitiateLeanChanged;                                 // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FSocketOrBoneCache                          _cameraIdleLocation;                                      // 0x0120(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSocketOrBoneCache                          _cameraLeftLeanLocation;                                  // 0x0180(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSocketOrBoneCache                          _cameraRightLeanLocation;                                 // 0x01E0(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSocketOrBoneCache                          _cameraCrouchLocation;                                    // 0x0240(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSocketOrBoneCache                          _cameraCrouchLeftLeanLocation;                            // 0x02A0(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSocketOrBoneCache                          _cameraCrouchRightLeanLocation;                           // 0x0300(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              _middleSphereTraceLength;                                 // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              _sideSphereTraceLength;                                   // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              _sphereTraceRadius;                                       // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              _standingTraceHeightOffset;                               // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              _crouchingTraceHeightOffset;                              // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              _sideTraceOffset;                                         // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              _maxMovementDistance;                                     // 0x0378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              _maxCameraAngle;                                          // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               _debugMode;                                               // 0x0380(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ELeanState                                         _leanState;                                               // 0x0381(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x26];                                      // 0x0382(0x0026) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AutomaticLeanComponent"));

		return ptr;
	}


	void Server_SetLeanState(ELeanState* leanState);
	void OnRep_LeanState();
	void OnLeanStateChanged__DelegateSignature(ELeanState* leanState);
	void OnCanInitiateLeanChanged__DelegateSignature(bool* canInitiate);
	void Local_Unlean();
	void Local_Lean();
	bool IsLeaning();
	ELeanState GetPotentialLeanState();
	ELeanState GetLeanState();
	float GetAvailableDistanceInFrontOfCamera();
	bool CanInitiateLean();
};


// Class DeadByDaylight.AutoQualityAdjuster
// 0x0028 (0x0368 - 0x0340)
class AAutoQualityAdjuster : public AActor
{
public:
	float                                              TargetResolutionScale;                                    // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumMS;                                                // 0x0344(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaximumMS;                                                // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaleIncreaseRate;                                        // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaleDecreaseRate;                                        // 0x0350(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumAllowableScale;                                    // 0x0354(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0358(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AutoQualityAdjuster"));

		return ptr;
	}

};


// Class DeadByDaylight.AxisFlick
// 0x0030 (0x0060 - 0x0030)
class UAxisFlick : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0030(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AxisFlick"));

		return ptr;
	}

};


// Class DeadByDaylight.AxisFlickMasher
// 0x0040 (0x0140 - 0x0100)
class UAxisFlickMasher : public UActorComponent
{
public:
	class UInputComponent*                             _inputComponent;                                          // 0x0100(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0108(0x0008) MISSED OFFSET
	class UAxisFlick*                                  _axisFlick1;                                              // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	class UAxisFlick*                                  _axisFlick2;                                              // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0120(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AxisFlickMasher"));

		return ptr;
	}


	void OnAxisFlicked2();
	void OnAxisFlicked1();
};


// Class DeadByDaylight.BannerDataProcessor
// 0x0050 (0x0080 - 0x0030)
class UBannerDataProcessor : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BannerDataProcessor"));

		return ptr;
	}

};


// Class DeadByDaylight.BaseIndicatorWidget
// 0x0030 (0x0330 - 0x0300)
class UBaseIndicatorWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET
	float                                              RadiusMultiplier;                                         // 0x0310(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0314(0x0004) MISSED OFFSET
	class UCanvasPanel*                                IndicatorPanel;                                           // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                Indicator;                                                // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ArrowImage;                                               // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BaseIndicatorWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.KillerProjectile
// 0x0000 (0x0350 - 0x0350)
class AKillerProjectile : public APhysicsBasedProjectile
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.KillerProjectile"));

		return ptr;
	}

};


// Class DeadByDaylight.BaseLinkedVomitProjectile
// 0x0058 (0x03A8 - 0x0350)
class ABaseLinkedVomitProjectile : public AKillerProjectile
{
public:
	bool                                               _useSplashDamage;                                         // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _passThroughSurvivors;                                    // 0x0351(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0352(0x0006) MISSED OFFSET
	class UParticleSystemComponent*                    _vomitTrail;                                              // 0x0358(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USplineMeshComponent*                        _splineMesh;                                              // 0x0360(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USphereComponent*                            _splashDamageSphere;                                      // 0x0368(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkComponent*                                _akAudioVomitProjectile;                                  // 0x0370(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UParticleSystem*                             _vomitSplashCamper;                                       // 0x0378(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             _vomitSplash;                                             // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               _akAudioEventAudioEventVomitSplash;                       // 0x0388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   _minDecalSize;                                            // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   _maxDecalSize;                                            // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               _isSuperVomit;                                            // 0x03A0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BaseLinkedVomitProjectile"));

		return ptr;
	}


	void OnAffectSurvivor(class ACamperPlayer** CamperPlayer);
	void OnAffectInteractable(class AInteractable** Interactable, class USceneComponent** HitComponent);
	void NativeExplode(struct FImpactInfo* ImpactInfo);
};


// Class DeadByDaylight.BaseOutlineRenderStrategy
// 0x0010 (0x0040 - 0x0030)
class UBaseOutlineRenderStrategy : public UObject
{
public:
	TArray<class UBatchMeshCommands*>                  _batchCommands;                                           // 0x0030(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BaseOutlineRenderStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.BaseSky
// 0x0010 (0x0350 - 0x0340)
class ABaseSky : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0340(0x0008) MISSED OFFSET
	bool                                               AdjustCullDistance;                                       // 0x0348(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0349(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BaseSky"));

		return ptr;
	}


	void SetCullDistance(float* NewCullDistance);
	void OnFadeEnd(class AActor** Other);
	void OnFadeBegin(class AActor** Other);
	void OnAlphaChanged(float* newAlpha, class AActor** Other);
	class UPostProcessComponent* GetPostprocessComponent();
};


// Class DeadByDaylight.OutlineUpdateStrategy
// 0x0008 (0x0108 - 0x0100)
class UOutlineUpdateStrategy : public UActorComponent
{
public:
	class UDBDOutlineComponent*                        _outlineComponent;                                        // 0x0100(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.BearTrapOutlineUpdateStrategy
// 0x0038 (0x0140 - 0x0108)
class UBearTrapOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                                UnrevealedColor;                                          // 0x0108(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                RevealedColorToSurvivor;                                  // 0x0118(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveLinearColor*                           KillerOutlineFadeCurve;                                   // 0x0128(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0130(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BearTrapOutlineUpdateStrategy"));

		return ptr;
	}


	void SetOwningBearTrapMapActorComponent(class UMapActorComponent** MapActorComponent);
	void SetOwningBearTrapIsBroken(bool* IsBroken);
};


// Class DeadByDaylight.BlindableComponent
// 0x00F0 (0x01F0 - 0x0100)
class UBlindableComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET
	class UChargeableComponent*                        _chargeableComponent;                                     // 0x0130(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<class AActor*, TScriptInterface<class UBlindingEffectorInterface>> _blindingEffectors;                                       // 0x0138(0x0050) (ZeroConstructor, Transient)
	float                                              _blindnessRemainingTime;                                  // 0x0188(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x64];                                      // 0x018C(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BlindableComponent"));

		return ptr;
	}


	void SetChargeable(class UChargeableComponent** value);
	void OnRep_BlindnessRemainingTime(float* oldValue);
	void OnChargeableCompletionPercentChanged(class UChargeableComponent** ChargeableComponent, float* TotalPercentComplete);
	bool IsBlinded();
	void Authority_Blinded(EBlindType* blindType, float* BlindnessDuration, class AActor** effectorActor);
};


// Class DeadByDaylight.BlindingEffectorInterface
// 0x0000 (0x0030 - 0x0030)
class UBlindingEffectorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BlindingEffectorInterface"));

		return ptr;
	}

};


// Class DeadByDaylight.BlindingFXComponent
// 0x0038 (0x0138 - 0x0100)
class UBlindingFXComponent : public UActorComponent
{
public:
	struct FName                                       _blendWeightParameter;                                    // 0x0100(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0100(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData01[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	class UCurveFloat*                                 _blindnessMaterialCurve;                                  // 0x0110(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 _blindnessCurve;                                          // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UPostProcessComponent*                       _postProcess;                                             // 0x0120(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UMaterialParameterCollection*                _materialParameters;                                      // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBlindableComponent*                         _blindableComponent;                                      // 0x0130(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BlindingFXComponent"));

		return ptr;
	}


	void SetPostProcess(class UPostProcessComponent** value);
	void SetMaterialParameters(class UMaterialParameterCollection** value);
};


// Class DeadByDaylight.BlinkComponent
// 0x0018 (0x0118 - 0x0100)
class UBlinkComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnBlinkStateChangedDelegate;                              // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               _isInBlinkingState;                                       // 0x0110(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0111(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BlinkComponent"));

		return ptr;
	}


	bool IsOwnerInBlinkingState();
};


// Class DeadByDaylight.BlinkerComponent
// 0x00B8 (0x01B8 - 0x0100)
class UBlinkerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0100(0x0004) MISSED OFFSET
	float                                              _rayCastZOffet;                                           // 0x0104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _rayCastLength;                                           // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _minimumIndicatorVelocity;                                // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _IndicatorVelocityEasingFactor;                           // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     _lineOfSightBlinkOffset;                                  // 0x0114(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0120(0x0008) MISSED OFFSET
	class UDBDTimerComponent*                          _blinkChainTimer;                                         // 0x0128(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x88];                                      // 0x0130(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BlinkerComponent"));

		return ptr;
	}


	struct FVector UpdateTargetLocation(class ADBDPlayer** Player, float* blinkDistance, TArray<float>* scanPercentLocations);
	bool ShouldInterpolateIndicatorPosition();
	void SetBlinkerState(EBlinkerState* blinkerState);
	struct FVector LocalAddRandomToTargetLocation(class ADBDPlayer** Player, struct FVector* targetLocation, float* Distance);
	bool IsReady();
	struct FVector GetInterpolatedIndicatorPosition(struct FVector* BlinkTarget, struct FVector* indicatorPosition, float* DeltaTime);
	float GetFatigueDuration(class ADBDPlayer** Player, bool* attacked, int* blinkCount);
	EBlinkerState GetBlinkerState();
	class UDBDTimerComponent* GetBlinkChainTimer();
	float GetAutomaticBlinkDelay(int* chainBlinkCount);
};


// Class DeadByDaylight.BlockElement
// 0x0068 (0x0098 - 0x0030)
class UBlockElement : public UObject
{
public:
	TWeakObjectPtr<class UObject>                      _source;                                                  // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.BlockElement._affectedPlayers
	unsigned char                                      UnknownData01[0x10];                                      // 0x0088(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BlockElement"));

		return ptr;
	}

};


// Class DeadByDaylight.BlockableComponent
// 0x0088 (0x0188 - 0x0100)
class UBlockableComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0100(0x0018) MISSED OFFSET
	struct FBlockableReplicatedDatum                   _replicatedDatum;                                         // 0x0118(0x0020) (Net, Transient)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0138(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.BlockableComponent._blockElements

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BlockableComponent"));

		return ptr;
	}


	void OnRep_ReplicatedDatum();
	void Authority_RemoveBlock(class UObject** Source);
	void Authority_AddTimedBlock(class UObject** Source, float* Duration);
};


// Class DeadByDaylight.BloodDecalEffectIntensity
// 0x0018 (0x0050 - 0x0038)
class UBloodDecalEffectIntensity : public UDataAsset
{
public:
	struct FColor                                      IntensifyBloodColor;                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FColor                                      IntensifyBloodColor2;                                     // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FColor                                      IntensifyBloodColorEmissive;                              // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              IntensifyBloodColorEmissiveMinimumIntensity;              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              IntensifyBloodColorEmissiveMaximumIntensity;              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BloodDecalEffectIntensity"));

		return ptr;
	}

};


// Class DeadByDaylight.BloodDecalEffect
// 0x0168 (0x04B0 - 0x0348)
class ABloodDecalEffect : public ADecalActor
{
public:
	class UCurveFloat*                                 AnimationTimelineCurve;                                   // 0x0348(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 DestroyTimelineCurve;                                     // 0x0350(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UTexture2D*>                          Textures;                                                 // 0x0358(0x0010) (Edit, ZeroConstructor)
	TArray<class UTexture2D*>                          Normals;                                                  // 0x0368(0x0010) (Edit, ZeroConstructor)
	class UBloodDecalEffectIntensity*                  BloodDecalEffectIntensity;                                // 0x0378(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ColorInterpolationSpeed;                                  // 0x0380(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0384(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    DynamicDecalMaterial;                                     // 0x0388(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x120];                                     // 0x0390(0x0120) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BloodDecalEffect"));

		return ptr;
	}

};


// Class DeadByDaylight.Bloodlust
// 0x00B8 (0x0378 - 0x02C0)
class UBloodlust : public UStatusEffect
{
public:
	class UCurveFloat*                                 BloodlustCurve;                                           // 0x02C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x02C8(0x0020) MISSED OFFSET
	float                                              _bloodlustTime;                                           // 0x02E8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8C];                                      // 0x02EC(0x008C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Bloodlust"));

		return ptr;
	}


	void OnRep_BloodlustTime(float* oldBloodlustTime);
	void OnChaseStartedEvent(class ADBDPlayer** chasedPlayer);
	void OnAllChaseEndedEvent();
	void Multicast_ResetBloodlust();
	float GetBloodlustTime();
};


// Class DeadByDaylight.BloodwebDistribution
// 0x02F8 (0x0328 - 0x0030)
class UBloodwebDistribution : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	class UDBDDesignTunables*                          _designTunables;                                          // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBloodwebTunables*                           _bloodwebTunables;                                        // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2D8];                                     // 0x0050(0x02D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BloodwebDistribution"));

		return ptr;
	}

};


// Class DeadByDaylight.BloodwebEntity
// 0x0048 (0x0078 - 0x0030)
class UBloodwebEntity : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBloodwebTunables*                           _bloodwebTunables;                                        // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class UDBDBloodwebDefinitionBase> _bloodWebDefinition;                                      // 0x0048(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0058(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BloodwebEntity"));

		return ptr;
	}

};


// Class DeadByDaylight.BloodwebGenerator
// 0x00C0 (0x00F0 - 0x0030)
class UBloodwebGenerator : public UObject
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0030(0x000C) MISSED OFFSET
	struct FRandomStream                               _randomizationStream;                                     // 0x003C(0x0008) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<struct FString>                             _selectedNodes;                                           // 0x0048(0x0010) (ZeroConstructor)
	TArray<struct FName>                               _selectedContent;                                         // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x48];                                      // 0x0068(0x0048) MISSED OFFSET
	TScriptInterface<class UDBDBloodwebDefinitionBase> _bloodWebDefinition;                                      // 0x00B0(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDDesignTunables*                          _designTunables;                                          // 0x00C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBloodwebTunables*                           _bloodwebTunables;                                        // 0x00C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              _alternativePathOccurenceFactor;                          // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	class UBloodwebDistribution*                       _dataDistribution;                                        // 0x00D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBloodwebSettings*                           _bloodwebSettings;                                        // 0x00E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BloodwebGenerator"));

		return ptr;
	}

};


// Class DeadByDaylight.BloodwebManager
// 0x00A0 (0x00D0 - 0x0030)
class UBloodwebManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0030(0x0030) MISSED OFFSET
	class UClass*                                      _bloodwebBuilderClass;                                    // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDDesignTunables*                          _designTunables;                                          // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBloodwebTunables*                           _bloodwebTunables;                                        // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class UDBDBloodwebDefinitionBase> _bloodWebDefinition;                                      // 0x0080(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	class UBloodwebGenerator*                          _bloodwebBuilder;                                         // 0x0090(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBloodwebEntity*                             _entity;                                                  // 0x0098(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x00A0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BloodwebManager"));

		return ptr;
	}


	void Init(class UDBDGameInstance** GameInstance, class UDBDDesignTunables** Tunables);
};


// Class DeadByDaylight.BloodwebSettings
// 0x0010 (0x0048 - 0x0038)
class UBloodwebSettings : public UDataAsset
{
public:
	TArray<struct FName>                               _duplicableItems;                                         // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BloodwebSettings"));

		return ptr;
	}

};


// Class DeadByDaylight.BloodwebTester
// 0x0018 (0x0358 - 0x0340)
class ABloodwebTester : public AActor
{
public:
	class UDBDDesignTunables*                          _designTunables;                                          // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDBloodWebDefinition*                      _bloodWebDefinition;                                      // 0x0348(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBloodwebGenerator*                          _bloodwebBuilder;                                         // 0x0350(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BloodwebTester"));

		return ptr;
	}

};


// Class DeadByDaylight.BloodwebTunables
// 0x0008 (0x0038 - 0x0030)
class UBloodwebTunables : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BloodwebTunables"));

		return ptr;
	}

};


// Class DeadByDaylight.BlueprintDebugUtilities
// 0x0000 (0x0030 - 0x0030)
class UBlueprintDebugUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BlueprintDebugUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.BlueprintPlatformUtilities
// 0x0000 (0x0030 - 0x0030)
class UBlueprintPlatformUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BlueprintPlatformUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.BonusPointEventsManager
// 0x00B8 (0x00E8 - 0x0030)
class UBonusPointEventsManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xB8];                                      // 0x0030(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BonusPointEventsManager"));

		return ptr;
	}

};


// Class DeadByDaylight.Tile
// 0x0110 (0x0450 - 0x0340)
class ATile : public AActor
{
public:
	int                                                MinimumSpacing;                                           // 0x0340(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaximumSpacing;                                           // 0x0344(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaximumCount;                                             // 0x0348(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   Dimension;                                                // 0x034C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0354(0x0004) MISSED OFFSET
	TArray<EscapeStrategyType>                         AvailableEscapeTypes;                                     // 0x0358(0x0010) (Edit, ZeroConstructor)
	ETileType                                          Type;                                                     // 0x0368(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EDensity                                           Density;                                                  // 0x0369(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EPathType                                          Path;                                                     // 0x036A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x036B(0x0001) MISSED OFFSET
	int                                                Number;                                                   // 0x036C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               PlaceHolder;                                              // 0x0370(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	int                                                SpawnPriorityTier;                                        // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Weight;                                                   // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   Coord;                                                    // 0x037C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	EQuadrantSpawnType                                 QuadrantSpawnType;                                        // 0x0384(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0385(0x0003) MISSED OFFSET
	TArray<class UActorComponent*>                     SpawnPointsCache;                                         // 0x0388(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UActorComponent*>                     ObjectRandomizersCache;                                   // 0x0398(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UActorComponent*>                     ActorSpawnersCache;                                       // 0x03A8(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UActorComponent*>                     ActorVariationSpawnersCache;                              // 0x03B8(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x7C];                                      // 0x03C8(0x007C) MISSED OFFSET
	struct FRandomStream                               SharedTileRandomizer;                                     // 0x0444(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               _initialized;                                             // 0x044C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               TypeSpacing;                                              // 0x044D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x044E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Tile"));

		return ptr;
	}


	void OnSetSpawnObject(class UTileSpawnPoint** TileSpawnPoint, class AActor** spawnedObject);
	void OnRep_Initialized(bool* oldValue);
	void InitOnSpawned();
};


// Class DeadByDaylight.BorderTile
// 0x0020 (0x0470 - 0x0450)
class ABorderTile : public ATile
{
public:
	TArray<struct FBorderElements>                     Borders;                                                  // 0x0450(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UMapData*                                    _map;                                                     // 0x0460(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BorderTile"));

		return ptr;
	}

};


// Class DeadByDaylight.BreakableBase
// 0x0020 (0x03E8 - 0x03C8)
class ABreakableBase : public AInteractable
{
public:
	class UBoxComponent*                               BreakableCollision;                                       // 0x03C8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UDestructibleComponent*                      BreakableDestructible_DM;                                 // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	EBreakableState                                    _state;                                                   // 0x03D8(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET
	class USceneComponent*                             _rootComponent;                                           // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BreakableBase"));

		return ptr;
	}


	void ExplodeVfxSfx(struct FVector* ImpulseDir);
	void Explode(class ADBDPlayer** Player);
};


// Class DeadByDaylight.CameraAttachmentComponent
// 0x0048 (0x0148 - 0x0100)
class UCameraAttachmentComponent : public UActorComponent
{
public:
	class USceneComponent*                             _anchor;                                                  // 0x0100(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0108(0x0010) MISSED OFFSET
	struct FCameraAttachment                           _defaultCameraAttachment;                                 // 0x0118(0x0018) (Transient)
	struct FCameraAttachment                           _currentCameraAttachment;                                 // 0x0130(0x0018) (Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CameraAttachmentComponent"));

		return ptr;
	}


	void Reset();
	bool IsDetached();
	bool IsAttached();
	void Detach();
};


// Class DeadByDaylight.CameraHandlerComponent
// 0x00B8 (0x01B8 - 0x0100)
class UCameraHandlerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSocketChanged;                                          // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TMap<EDBDCameraSocketID, class AActor*>            _cameraMap;                                               // 0x0118(0x0050) (ZeroConstructor, Transient)
	EDBDCameraSocketID                                 _delayedSocketID;                                         // 0x0168(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EDBDCameraSocketID                                 _currentSocketID;                                         // 0x0169(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x36];                                      // 0x016A(0x0036) MISSED OFFSET
	struct FName                                       _cameraAttachmentSocket;                                  // 0x01A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x016A(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData03[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	class USceneComponent*                             _cameraAttachmentComponent;                               // 0x01B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CameraHandlerComponent"));

		return ptr;
	}


	void SetSocketID(EDBDCameraSocketID* Mode);
	void SetAttachmentComponent(class USceneComponent** attachmentComponent);
	void PlayVFXOnCurrentCamera(class UParticleSystemComponent** Component);
	EDBDCameraSocketID GetSocketID();
	class AActor* GetCurrentCamera();
	void AddCameraToSocket(EDBDCameraSocketID* Mode, class AActor** Camera);
};


// Class DeadByDaylight.CamperAnimInstance
// 0x0140 (0x03B0 - 0x0270)
class UCamperAnimInstance : public UAnimInstance
{
public:
	float                                              MyDeltaTime;                                              // 0x0270(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsHooked;                                                 // 0x0274(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsSacrificeStruggling;                                    // 0x0275(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0276(0x0002) MISSED OFFSET
	float                                              SacrificeStrugglePercent;                                 // 0x0278(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x027C(0x0004) MISSED OFFSET
	class UAnimMontage*                                MontageMadnessTierUp;                                     // 0x0280(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UAnimCompositeBase*>                  ArrayCarryAttackMontage;                                  // 0x0288(0x0010) (Edit, ZeroConstructor)
	bool                                               IsBeingCarried;                                           // 0x0298(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsBeingPutOnHook;                                         // 0x0299(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               isCrouched;                                               // 0x029A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ECamperGuidedAction                                GuidedAction;                                             // 0x029B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsTrapped;                                                // 0x029C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsCrawling;                                               // 0x029D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsDead;                                                   // 0x029E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x029F(0x0001) MISSED OFFSET
	float                                              MaxSpeed;                                                 // 0x02A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsInsideCloset;                                           // 0x02A4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x02A5(0x0003) MISSED OFFSET
	float                                              IsPlayingMadnessTierUpWeight;                             // 0x02A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsTotallyInsane;                                          // 0x02AC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsBeingKilled;                                            // 0x02AD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsCarryAttackSucess;                                      // 0x02AE(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ShouldLookSleepy;                                         // 0x02AF(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsUsingAimItem;                                           // 0x02B0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsHoldingAimItem;                                         // 0x02B1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               AllowLookAt;                                              // 0x02B2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x02B3(0x0001) MISSED OFFSET
	float                                              DropStaggerTimeLeft;                                      // 0x02B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LeftArmIKAlpha;                                           // 0x02B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RightArmIKAlpha;                                          // 0x02BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LeftForeArmIKAlpha;                                       // 0x02C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RightForeArmIKAlpha;                                      // 0x02C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET
	struct FTransform                                  LeftHandIKTransform;                                      // 0x02D0(0x0030) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	struct FTransform                                  RightHandIKTransform;                                     // 0x0300(0x0030) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	bool                                               Strafe;                                                   // 0x0330(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsInteracting;                                            // 0x0331(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               Injured;                                                  // 0x0332(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EInteractionAnimation                              InteractionType;                                          // 0x0333(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EInteractionAnimation                              PreviousInteractionType;                                  // 0x0334(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsSlasherInFPV;                                           // 0x0335(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x0336(0x0002) MISSED OFFSET
	float                                              CarriedAlpha;                                             // 0x0338(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsHoldingHandleItem;                                      // 0x033C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsHoldingSmallItem;                                       // 0x033D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsHoldingFirecracker;                                     // 0x033E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x033F(0x0001) MISSED OFFSET
	float                                              Turning;                                                  // 0x0340(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x0344(0x000C) MISSED OFFSET
	bool                                               InAir;                                                    // 0x0350(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0351(0x0003) MISSED OFFSET
	float                                              Speed;                                                    // 0x0354(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Direction;                                                // 0x0358(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Pitch;                                                    // 0x035C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Yaw;                                                      // 0x0360(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     RightFootEffectorLocation;                                // 0x0364(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LeftFootEffectorLocation;                                 // 0x0370(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               Idle;                                                     // 0x037C(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x037D(0x0003) MISSED OFFSET
	float                                              MyTime;                                                   // 0x0380(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               SkillCheckFailed;                                         // 0x0384(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsGassed;                                                 // 0x0385(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               HasAnyMontagePlaying;                                     // 0x0386(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x1];                                       // 0x0387(0x0001) MISSED OFFSET
	struct FName                                       CurrentlyPlayerMontageId;                                 // 0x0388(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0387(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	bool                                               IsBeingCarriedByTheSpirit;                                // 0x0394(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsBeingCarriedByTheNightmare;                             // 0x0395(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsBeingCarriedByThePig;                                   // 0x0396(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsBeingCarriedByTheHag;                                   // 0x0397(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsBeingCarriedByTheLegion;                                // 0x0398(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsBeingCarriedByTheGhostFace;                             // 0x0399(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsUsingDeadHard;                                          // 0x039A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsPlayingWakeUpOther;                                     // 0x039B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsPlayingFreddyMori;                                      // 0x039C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsSpooked;                                                // 0x039D(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsHealingKOCamper;                                        // 0x039E(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x11];                                      // 0x039F(0x0011) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperAnimInstance"));

		return ptr;
	}


	void SetSkillCheckFailed(bool* failed);
	void SetSacrificeStrugglePercent(float* value);
	void SetIsSacrificeStruggling(bool* value);
	void SetIsGassed(bool* value);
	void SetAudioRummageAkEvent(struct FName* Distance);
	void OnInfectiousFrightScream();
	void NativeAudioSurvivorFootstepRight(class UAkAudioEvent** AkEvent);
	void NativeAudioSurvivorFootstepLeft(class UAkAudioEvent** AkEvent);
	void NativeAudioSurvivorBody(class UAkAudioEvent** AkEvent);
	bool IsPlayingMontageByName(struct FName* MontageID);
	void AddAudioRepairRateRadius(int* Distance);
};


// Class DeadByDaylight.BloodTrailSettings
// 0x0020 (0x0058 - 0x0038)
class UBloodTrailSettings : public UDataAsset
{
public:
	float                                              _initialDelay;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                _numBloodDropsPerBloodPool;                               // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _bloodDropsInterval;                                      // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               _randomlyRotateBloodDrops;                                // 0x0044(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              _bloodDropsRandomScatter;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ETraceTypeQuery>                       _bloodTraceChannel;                                       // 0x004C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	class UClass*                                      _bloodDropClass;                                          // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BloodTrailSettings"));

		return ptr;
	}

};


// Class DeadByDaylight.CamperBloodTrailComponent
// 0x00B0 (0x01B0 - 0x0100)
class UCamperBloodTrailComponent : public UActorComponent
{
public:
	class UPerkManager*                                _camperPerkManager;                                       // 0x0100(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBloodTrailSettings*                         _bloodTrailSettings;                                      // 0x0108(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0110(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperBloodTrailComponent"));

		return ptr;
	}


	void OnDamageStateChanged(ECamperDamageState* oldDamageState, ECamperDamageState* currentDamageState);
	void ConditionalStartBleeding();
};


// Class DeadByDaylight.CharacterDreamworldComponent
// 0x0040 (0x0140 - 0x0100)
class UCharacterDreamworldComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    DreamStateChanged;                                        // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               _isInDreamworld;                                          // 0x0110(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2F];                                      // 0x0111(0x002F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterDreamworldComponent"));

		return ptr;
	}


	bool ShouldShowVignette();
	void OnRep_IsInDreamworld(bool* Previous);
	bool IsInDreamworld();
	class ADBDPlayer* STATIC_GetLocallyObservedOrLocalCharacter(class UObject** WorldContextObject);
	void FireWakeUpScoreEvent(class ADBDPlayer** Instigator);
	void Authority_SetIsInDreamworld(bool* NewValue, bool* isScripted);
};


// Class DeadByDaylight.CamperDreamworldComponent
// 0x00D8 (0x0218 - 0x0140)
class UCamperDreamworldComponent : public UCharacterDreamworldComponent
{
public:
	struct FScriptMulticastDelegate                    OnCamperTriggeredDreamTrap;                               // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FSurvivorSleepiness                         _survivorSleepiness;                                      // 0x0150(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, Transient)
	float                                              _sleepGainPerSecond;                                      // 0x0158(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x015C(0x0008) MISSED OFFSET
	int                                                _wakeUpByOtherCount;                                      // 0x0164(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _showKiller;                                              // 0x0168(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0169(0x0007) MISSED OFFSET
	struct FFastTimer                                  _killerGlimpseDurationTimer;                              // 0x0170(0x0028) (Transient)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0198(0x0010) MISSED OFFSET
	struct FFastTimer                                  _killerGlimpseCooldownTimer;                              // 0x01A8(0x0028) (Transient)
	unsigned char                                      UnknownData03[0x10];                                      // 0x01D0(0x0010) MISSED OFFSET
	float                                              _glimpseMinDistance;                                      // 0x01E0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              _glimpseMaxDistance;                                      // 0x01E4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              _killerGlimpseCooldown;                                   // 0x01E8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              _killerGlimpseDuration;                                   // 0x01EC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                _wakeUpBySkillCheckCount;                                 // 0x01F0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                _fellAsleepCount;                                         // 0x01F4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _forcedAsleep;                                            // 0x01F8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x01F9(0x0007) MISSED OFFSET
	class AWakerObject*                                _linkedWaker;                                             // 0x0200(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _useScriptedKillerVisibility;                             // 0x0208(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0209(0x0007) MISSED OFFSET
	bool                                               _showKillerInstantly;                                     // 0x0210(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0211(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperDreamworldComponent"));

		return ptr;
	}


	bool ShouldLookSleepyToLocalPlayer();
	void SetScriptedKillerVisibility(bool* useScriptedKillerVisibility);
	void Server_WakeUp();
	void Server_PutToSleep();
	void OnRep_ShowKiller();
	void Local_SetShowKiller(bool* showKiller, bool* instantly);
	void InitializeTunableValues(class ASlasherPlayer** Killer);
	void HandleShowKillerChanged(bool* showKiller, bool* instantly);
	int GetWakeUpByOtherCount();
	bool CanWakeUpBySkillCheck();
	bool CanWakeUp();
	void BroadcastCamperTriggeredDreamTrap(class AActor** dreamObject);
	void Authority_WakeUpByWakerObject();
	void Authority_WakeUpByOther(class ADBDPlayer** Instigator);
	void Authority_WakeUpByHook();
	void Authority_SpawnDreamworldStatusEffect();
	void Authority_PutAsleep();
	void Authority_OnAttacked();
	void Authority_HandleSkillCheckFailure(bool* wakeUpEveryoneInteracting, class ADBDPlayer** Instigator);
	int Authority_GetWakeUpBySkillCheckCount();
	int Authority_GetFellAsleepCount();
};


// Class DeadByDaylight.CamperEndGameComponent
// 0x0060 (0x0160 - 0x0100)
class UCamperEndGameComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0100(0x0048) MISSED OFFSET
	class UClass*                                      _endGameEntityClass;                                      // 0x0148(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0150(0x0004) MISSED OFFSET
	float                                              _delayBeforeSacrifice;                                    // 0x0154(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               _readyToBeSacrificed;                                     // 0x0158(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0159(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperEndGameComponent"));

		return ptr;
	}


	void OnEndGameSacrificeEnd();
	void OnDelayBeforeSacrificeEnd();
	bool GetSacrificedByEndGame();
};


// Class DeadByDaylight.CamperExposerInstance
// 0x0030 (0x0370 - 0x0340)
class ACamperExposerInstance : public AActor
{
public:
	bool                                               IsInterior;                                               // 0x0340(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0341(0x0007) MISSED OFFSET
	struct FString                                     _audioAgravationLevelRtpc;                                // 0x0348(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0358(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperExposerInstance"));

		return ptr;
	}


	void StartSpawnSequence(bool* withRandomDelay);
	void StartExitSequence(bool* withRandomDelay);
	void SetIsInteriorBP(bool* interior);
	void ExitSequenceComplete();
};


// Class DeadByDaylight.CamperHealthComponent
// 0x0148 (0x0248 - 0x0100)
class UCamperHealthComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnHealedDelegate;                                         // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInjuredBleedoutStarted;                                 // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInjuredBleedoutEnded;                                   // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInjuredBleedoutKO;                                      // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0140(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDamageStateChanged;                                     // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDamageStateChangedCosmetic;                             // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FTagStateBool                               _inInjuredBleedOut;                                       // 0x0178(0x0030) (Net, Transient)
	struct FDBDTimer                                   _bleedOutTimer;                                           // 0x01A8(0x0028) (Net, Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01D0(0x0004) MISSED OFFSET
	int                                                _currentHealthStateCount;                                 // 0x01D4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01D8(0x0004) MISSED OFFSET
	int                                                _numHealthyHeals;                                         // 0x01DC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FDBDTimer                                   _dyingTimer;                                              // 0x01E0(0x0028) (Net, Transient)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0208(0x0008) MISSED OFFSET
	class UChargeableComponent*                        _healFromDyingChargeable;                                 // 0x0210(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _healFromInjuredChargeable;                               // 0x0218(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _mendChargeable;                                          // 0x0220(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ADBDPlayer*                                  _injuredBleedoutInstigator;                               // 0x0228(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0230(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperHealthComponent"));

		return ptr;
	}


	void SetDead(bool* IsDead, bool* IsSacrificed, bool* isLeaving);
	void OnRep_InInjuredBleedOut();
	void OnMendChargeCompletionStateChanged(bool* complete, TArray<class AActor*>* instigators);
	void OnHealthBarCharged(bool* complete, TArray<class AActor*>* instigators);
	void OnDamageStateChangedCosmetic__DelegateSignature();
	void Multicast_SetHealthStateFromDamageState(ECamperDamageState* damageState, bool* FireScoreEvent);
	void Multicast_SetDamageState(ECamperDamageState* damageState, bool* FireScoreEvent, bool* sacrificed);
	void Multicast_SetCurrentHealthStateCount(int* newHealth, bool* FireScoreEvent);
	void Multicast_OnInjuredBleedoutKO(class ADBDPlayer** injuredBleedoutInstigator);
	void Multicast_OnHealed(int* healAmount);
	void Multicast_OnDamagedGameEvents(unsigned char* healthStatesLost);
	bool IsKO();
	bool IsInjuredBleedoutTimerExpired();
	bool IsInjured();
	bool IsInInjuredBleedout();
	bool IsHealthy();
	bool IsDyingTimerExpired();
	bool IsDead();
	void IncreaseHPSlotSize(float* percent);
	float GetPercentInjuredBleedoutTimer();
	float GetPercentDyingTimer();
	ECamperDamageState GetDamageState();
	float GetCurrentTotalHealthBarPercent();
	class UChargeableComponent* GetCurrentHPSlot();
	bool CanHealSelf();
	bool CanBeHealedFromInjured();
	bool CanBeHealed();
	bool CanBecomeHealthy();
	void Authority_SetDamageState(ECamperDamageState* damageState, bool* FireScoreEvent, bool* sacrificed);
	void Authority_EndInjuredBleedout();
	void Authority_ApplyDoubleDamage(class AActor** damageSource);
	void Authority_ApplyDamage(class AActor** damageSource);
	void ApplyHeal(int* healAmount);
};


// Class DeadByDaylight.PlayerInteractable
// 0x0000 (0x03C8 - 0x03C8)
class APlayerInteractable : public AInteractable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerInteractable"));

		return ptr;
	}


	void SetSingleZone(class UPrimitiveComponent** zone);
	void SetInteractorsUsable(bool* usable, class UInteractor** exception);
	void PreInterruptionEvent(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee, class UInterruptionDefinition** interruption);
	void OnLevelReadyToPlay();
	void OnInteractorLockChanged(bool* locked, class ADBDPlayer** interactingPlayer);
	bool IsInterruptionPossible(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee, class UInteractor** Interactor, class UInteractionDefinition** definition, class UInterruptionDefinition** interruption);
	bool IsInteractionPossibleInternal(class ADBDPlayer** Player, class UInteractor** Interactor, class UInteractionDefinition** definition, EInputInteractionType* InteractionType);
	bool IsInteractionDone(class ADBDPlayer** Player, class UInteractor** Interactor, class UInteractionDefinition** definition, EInputInteractionType* InteractionType);
	bool IsInteractingWith(class ADBDPlayer** Player);
	bool HasAnOngoingInteraction();
	class ADBDPlayer* GetPlayerOwner();
	TArray<class UInteractor*> GetInteractors();
	TArray<class ADBDPlayer*> GetInteractingPlayersRaw();
	struct FVector GetFocalPointPosition(class ADBDPlayer** Player, class UInteractionDefinition** definition);
	void AuthorityRequestCancelOngoingInteractions(bool* onlyOnHitCancelableInteractions);
	TArray<class ADBDPlayer*> Authority_GetInteractingPlayers();
	void AttachEveryInteractionToZone(class UPrimitiveComponent** zone);
};


// Class DeadByDaylight.CamperInteractable
// 0x00B0 (0x0478 - 0x03C8)
class ACamperInteractable : public APlayerInteractable
{
public:
	TArray<class UInteractor*>                         HealingInteractors;                                       // 0x03C8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, Transient)
	class UChargeableComponent*                        _killCharge;                                              // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _snapOutOfItCharge;                                       // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _wakeUpCharge;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UActivatorComponent*                         _activator;                                               // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x68];                                      // 0x03F8(0x0068) MISSED OFFSET
	class UInteractor*                                 _killInteractor;                                          // 0x0460(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               _killInteractionZone;                                     // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USphereComponent*                            _killHealthyInteractionZone;                              // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperInteractable"));

		return ptr;
	}


	void SetKillInteraction(class UInteractionDefinition** killInteraction);
	void ServerMoveOut();
	class UInteractor* GetSlasherInteractor();
	class ACamperPlayer* GetOwningSurvivor();
};


// Class DeadByDaylight.DBDCharacterMovementComponent
// 0x01E0 (0x0940 - 0x0760)
class UDBDCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	float                                              ProjectedWallSlidingFactor;                               // 0x0760(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RandomInputFrontMultiplier;                               // 0x0764(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RandomInputSideMultiplier;                                // 0x0768(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RandomInputBackMultiplier;                                // 0x076C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x88];                                      // 0x0770(0x0088) MISSED OFFSET
	float                                              _resetServerCorrectionDuration;                           // 0x07F8(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2C];                                      // 0x07FC(0x002C) MISSED OFFSET
	bool                                               _forceUseDropStaggerFix;                                  // 0x0828(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x107];                                     // 0x0829(0x0107) MISSED OFFSET
	class UBaseMovementInputStrategy*                  _movementInputStrategy;                                   // 0x0930(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0938(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDCharacterMovementComponent"));

		return ptr;
	}


	void SetRandomInputAmplitude(float* value);
	void Server_SetMaxSpeedMultiplierScalar(float* Timestamp, float* value);
	void Server_SetMaxAccelerationMultiplierScalar(float* Timestamp, float* value);
	void Server_SetGroundFriction(float* Timestamp, float* value);
	void Server_SetAdditiveMaxSpeedScalar(float* Timestamp, float* value);
	void Server_RemoveMaxSpeedMultiplierCurve(float* Timestamp, class UCurveFloat** Curve);
	void Server_AddMaxSpeedMultiplierCurve(float* Timestamp, class UCurveFloat** Curve, float* Duration);
	void Local_AddMaxSpeedMultiplierCurve(class UCurveFloat** Curve, float* Duration, bool* autoRemove);
	bool IsApplyingRandomInput();
};


// Class DeadByDaylight.CamperMovementComponent
// 0x0010 (0x0950 - 0x0940)
class UCamperMovementComponent : public UDBDCharacterMovementComponent
{
public:
	float                                              MaxDashAcceleration;                                      // 0x0940(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0944(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperMovementComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDBasePlayer
// 0x0030 (0x0790 - 0x0760)
class ADBDBasePlayer : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0760(0x0010) MISSED OFFSET
	int                                                _characterIndex;                                          // 0x0770(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0774(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDBasePlayer"));

		return ptr;
	}


	bool TeleportWithClothHandling(struct FVector* Location, struct FRotator* Rotation, bool* checkCollisions);
	bool GetShowBlindDebugInfo();
	struct FName GetCharacterName();
	int GetCharacterIndex();
};


// Class DeadByDaylight.DBDPlayer
// 0x0B70 (0x1300 - 0x0790)
class ADBDPlayer : public ADBDBasePlayer
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0790(0x0028) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLocallyObservedChangedForPlayer;                        // 0x07B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCameraComponent*                            Camera;                                                   // 0x07C8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UMaterialHelper*                             MaterialHelper;                                           // 0x07D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x07D8(0x0030) MISSED OFFSET
	class UClass*                                      Interactable;                                             // 0x0808(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowInterrupting;                                        // 0x0810(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0811(0x0003) MISSED OFFSET
	float                                              MinFallHeight;                                            // 0x0814(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInterruptable;                                          // 0x0818(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               AllowNavigationInput;                                     // 0x0819(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               AllowNavigationBackwardInput;                             // 0x081A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               AllowTurningInput;                                        // 0x081B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowPitchInput;                                          // 0x081C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowStrafeInput;                                         // 0x081D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x081E(0x0002) MISSED OFFSET
	float                                              PitchLimitLower;                                          // 0x0820(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchLimitUpper;                                          // 0x0824(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     StrafingOffset;                                           // 0x0828(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PelvisHeight;                                             // 0x0834(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PelvisHeightForPounceOnStandingCamper;                    // 0x0838(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PelvisHeightForPounceOnCrouchingCamper;                   // 0x083C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x60];                                      // 0x0840(0x0060) MISSED OFFSET
	struct FScriptMulticastDelegate                    Authority_OnAttackedDelegate;                             // 0x08A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDamageTargetDelegate;                                   // 0x08B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSensed;                                                 // 0x08C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAnimNotify_Pickup;                                      // 0x08D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAnimNotify_Release;                                     // 0x08E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSecondaryActionInput;                                   // 0x08F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFirstPersonModeChanged;                                 // 0x0900(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDreamworldComponentSet;                                 // 0x0910(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class USpringArmComponent*                         CameraBoom;                                               // 0x0920(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x30];                                      // 0x0928(0x0030) MISSED OFFSET
	bool                                               ForceDisableFootIK;                                       // 0x0958(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ForceSkillChecks;                                         // 0x0959(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x095A(0x0006) MISSED OFFSET
	struct FTransform                                  IKLeftHandTransform;                                      // 0x0960(0x0030) (BlueprintVisible, Transient, IsPlainOldData)
	struct FTransform                                  IKRightHandTransform;                                     // 0x0990(0x0030) (BlueprintVisible, Transient, IsPlainOldData)
	float                                              CameraResetSpeed;                                         // 0x09C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x24];                                      // 0x09C4(0x0024) MISSED OFFSET
	class UCurveFloat*                                 BlinkFOVCurve;                                            // 0x09E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentBlinkDistance;                                     // 0x09F0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentBlinkChargePercent;                                // 0x09F4(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AverageSpeedBufferTime;                                   // 0x09F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AlmostCurrentSpeedBufferTime;                             // 0x09FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 GamepadYawCurve;                                          // 0x0A00(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 GamepadPitchCurve;                                        // 0x0A08(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnIsCrouchedChanged;                                      // 0x0A10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRunningAndMovingChanged;                                // 0x0A20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCharacterInventoryComponent*                _characterInventoryComponent;                             // 0x0A30(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FName                                       CarryJointName;                                           // 0x0A38(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0A38(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData09[0x4];                                       // 0x0A44(0x0004) MISSED OFFSET
	TArray<class UCurveFloat*>                         AttackPounceCurves;                                       // 0x0A48(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UCurveFloat*>                         AttackLungeCurves;                                        // 0x0A58(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UCurveFloat*>                         AttackSlashCurves;                                        // 0x0A68(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UCurveFloat*>                         AttackChainsawCurves;                                     // 0x0A78(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UCurveFloat*>                         AttackBlinkCurves;                                        // 0x0A88(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UCurveFloat*>                         AttackAmbushCurves;                                       // 0x0A98(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UCurveFloat*>                         AttackChargedDashCurves;                                  // 0x0AA8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UCurveFloat*>                         AttackFrenzyCurves;                                       // 0x0AB8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UCurveFloat*>                         AttackPounceCurves_StalkTier0;                            // 0x0AC8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UCurveFloat*>                         AttackPounceCurves_StalkTier1;                            // 0x0AD8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UCurveFloat*>                         AttackPounceCurves_StalkTier2;                            // 0x0AE8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              _pitchOffsetForInteractionPriority;                       // 0x0AF8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0AFC(0x0004) MISSED OFFSET
	class UBoxOcclusionQueryComponent*                 _renderedPixelCounter;                                    // 0x0B00(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               IsInteracting;                                            // 0x0B08(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0B09(0x0003) MISSED OFFSET
	float                                              ClearPathTestRadiusMultiplier;                            // 0x0B0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClearPathTestHeightMultiplier;                            // 0x0B10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LocationClearTestRadiusMultiplier;                        // 0x0B14(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LocationClearTestHeightMultiplier;                        // 0x0B18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x14];                                      // 0x0B1C(0x0014) MISSED OFFSET
	float                                              ClearPathTestStepHeight;                                  // 0x0B30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GamePadTurnRate;                                          // 0x0B34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GamePadLookUpRate;                                        // 0x0B38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MouseTurnSpeedMultiplier;                                 // 0x0B3C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MouseLookUpSpeedMultiplier;                               // 0x0B40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0B44(0x0004) MISSED OFFSET
	class USoundCue*                                   DeathSound;                                               // 0x0B48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ECamperState                                       CurrentCamperState;                                       // 0x0B50(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0B51(0x0003) MISSED OFFSET
	struct FName                                       CollectableAttachPoint;                                   // 0x0B54(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0B51(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	TArray<struct FOffering>                           _offerings;                                               // 0x0B60(0x0010) (Net, ZeroConstructor)
	class UStateMachine*                               _SM;                                                      // 0x0B70(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPlayerInteractionHandler*                   _interactionHandler;                                      // 0x0B78(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UMontagePlayer*                              _montagePlayer;                                           // 0x0B80(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPerkManager*                                _perkManager;                                             // 0x0B88(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UDBDPlayerData*                              _playerData;                                              // 0x0B90(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAxisFlickMasher*                            _wiggleAxisFlickMasher;                                   // 0x0B98(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UInputMasher*                                _interactInputMasher;                                     // 0x0BA0(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData16[0x20];                                      // 0x0BA8(0x0020) MISSED OFFSET
	class APlayerInteractable*                         _interactable;                                            // 0x0BC8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0x50];                                      // 0x0BD0(0x0050) MISSED OFFSET
	TArray<class ADBDPlayer*>                          _overlappingPlayers;                                      // 0x0C20(0x0010) (ZeroConstructor, Transient)
	class ADBDPlayer*                                  _guidingPlayer;                                           // 0x0C30(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData18[0x8];                                       // 0x0C38(0x0008) MISSED OFFSET
	class ADBDPlayer*                                  _interactingPlayer;                                       // 0x0C40(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData19[0x2C];                                      // 0x0C48(0x002C) MISSED OFFSET
	EAttackSubstate                                    _nextAttackSubstate;                                      // 0x0C74(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData20[0x3];                                       // 0x0C75(0x0003) MISSED OFFSET
	TWeakObjectPtr<class ADBDPlayer>                   _lockOnTarget;                                            // 0x0C78(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class ADBDPlayer>                   _hitTarget;                                               // 0x0C80(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCharacterDreamworldComponent*               _dreamworldComponent;                                     // 0x0C88(0x0008) (Edit, BlueprintVisible, ExportObject, Net, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCharacterChaseVisualComponent*              _characterChaseVisualComponent;                           // 0x0C90(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UCameraHandlerComponent*                     _cameraHandlerComponent;                                  // 0x0C98(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	class USpecialEventSpawnerComponent*               _specialEventSpawnerComponent;                            // 0x0CA0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class USceneComponent*                             _itemDropOffPosition;                                     // 0x0CA8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class AActor*>                              _ignoreActors;                                            // 0x0CB0(0x0010) (ZeroConstructor, Transient)
	TArray<class AActor*>                              _ignoreBelowActors;                                       // 0x0CC0(0x0010) (ZeroConstructor, Transient)
	TArray<class AActor*>                              _overlappingActors;                                       // 0x0CD0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FEffectCameraTypeSettings>           EffectCameraTypeSettings;                                 // 0x0CE0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData21[0x28];                                      // 0x0CF0(0x0028) MISSED OFFSET
	class UChargeableComponent*                        _blindingChargeableComponent;                             // 0x0D18(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData22[0x68];                                      // 0x0D20(0x0068) MISSED OFFSET
	class UPollableEventListener*                      _eventListener;                                           // 0x0D88(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData23[0x38];                                      // 0x0D90(0x0038) MISSED OFFSET
	class UChaseComponent*                             _chaseComponent;                                          // 0x0DC8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UZoneDetectorComponent*                      _meatHookZoneDetector;                                    // 0x0DD0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UZoneDetectorComponent*                      _basementZoneDetector;                                    // 0x0DD8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData24[0x70];                                      // 0x0DE0(0x0070) MISSED OFFSET
	int                                                _framesForSlasherAutoAttackOnCamperInteract;              // 0x0E50(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                _framesForSlasherAutoAttack;                              // 0x0E54(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData25[0x38];                                      // 0x0E58(0x0038) MISSED OFFSET
	class UInteractionDefinition*                      _bookmarkedInteraction;                                   // 0x0E90(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TMap<EDetectionZone, class UPrimitiveComponent*>   _detectionZoneMap;                                        // 0x0E98(0x0050) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData26[0x68];                                      // 0x0EE8(0x0068) MISSED OFFSET
	class UAuthoritativeMovementComponent*             _authoritativeMovementComponent;                          // 0x0F50(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData27[0x2B4];                                     // 0x0F58(0x02B4) MISSED OFFSET
	float                                              _screenAspectRatio;                                       // 0x120C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData28[0x38];                                      // 0x1210(0x0038) MISSED OFFSET
	class UGameplayTagContainerComponent*              _objectState;                                             // 0x1248(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioFXComponent*                           _audioFXComponent;                                        // 0x1250(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBlindableComponent*                         _blindableComponent;                                      // 0x1258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBlindingFXComponent*                        _blindFxComponent;                                        // 0x1260(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPlayerPerspectiveComponent*                 _playerPerspectiveComponent;                              // 0x1268(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData29[0x8];                                       // 0x1270(0x0008) MISSED OFFSET
	class UCharacterSightComponent*                    _characterSightComponent;                                 // 0x1278(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData30[0x8];                                       // 0x1280(0x0008) MISSED OFFSET
	class UCharacterSightableComponent*                _characterSightableComponent;                             // 0x1288(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData31[0x10];                                      // 0x1290(0x0010) MISSED OFFSET
	class UInteractionDetectorComponent*               _interactionDetectorComponent;                            // 0x12A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPrimitivesRegistererComponent*              _clippablePrimitivesRegistererComponent;                  // 0x12A8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UClippableProviderComponent*                 _clippableProviderComponent;                              // 0x12B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UDynamicCapsuleResizerComponent*             _dynCapsuleResizer;                                       // 0x12B8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPlayerGameRelevancyComponent*               _playerGameRelevancyComponent;                            // 0x12C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData32[0x20];                                      // 0x12C8(0x0020) MISSED OFFSET
	class UActorComponent*                             _questEventHandler;                                       // 0x12E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UInterpolatedMovementInputStrategy*          _movementInputStrategy;                                   // 0x12F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData33[0x8];                                       // 0x12F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayer"));

		return ptr;
	}


	void UpdateLoadoutFromInventory();
	bool TryInteractionType(EInputInteractionType* interactionInputType, class ADBDPlayer** Requester, bool* usingInputPersistence);
	bool TryInteraction(class UInteractionDefinition** Interaction, class ADBDPlayer** Requester, bool* force, bool* usingInputPersistence);
	bool TryFireScoreEvent(EDBDScoreTypes* scoreType, float* PercentToAward);
	void TriggerTrapImmunity(float* Duration);
	void TriggerAnimNotify(EAnimNotifyType* animNotifyType);
	void ToggleGhost();
	bool TeleportToBP(struct FVector* DestLocation, struct FRotator* DestRotation, bool* bIsATest, bool* bNoCheck);
	void StopSnap(bool* snap);
	void StopMontage();
	void StopAllMovement();
	void SnapCharacter(bool* snapPosition, struct FVector* Position, float* stopSnapDistance, bool* snapRotation, struct FRotator* Rotation, float* Time, bool* useZCoord, bool* sweepOnFinalSnap);
	bool ShouldPlayCarryAnim();
	bool ShouldFall();
	void SetYawScale(float* yawScale, float* adjustTime);
	void SetWorldCollisionResponse(TEnumAsByte<ECollisionResponse>* response);
	void SetShouldPlayCarryAnim(bool* ShouldPlayCarryAnim);
	void SetRightFootAudioSurfaceName(struct FString* Name);
	void SetReverseMontage(bool* Reverse);
	void SetQuestEventHandlerComponent(class UActorComponent** Component);
	void SetPlayerDirection(struct FRotator* Rotation);
	void SetPitchScale(float* pitchScale, float* adjustTime);
	void SetPawnAuthoritativeMovement(bool* authoritative);
	void SetLeftFootAudioSurfaceName(struct FString* Name);
	void SetItemUseAsToggle(bool* value);
	void SetIsCloaked(bool* IsCloaked, bool* Forced);
	void SetInParadise(bool* InParadise);
	void SetIgnoreActorCollision(class AActor** ActorToIgnore, bool* ignore);
	void SetGuidingPlayer(class ADBDPlayer** guidingPlayer);
	void SetForceDisableSkillChecks(bool* IsEnabled);
	void SetFirstPersonVfxsVisibility(bool* isFirstPerson);
	void SetFirstPersonModelEnabled(bool* Enabled, bool* force);
	void SetFeetOnGround(bool* feetOnGround);
	void SetEthereal(bool* Enabled, bool* allowOverlaps);
	void SetEnableServerPositionUpdates(bool* enable);
	void SetEmulateGamepadForMouseYaw(bool* emulate);
	void SetEmulateGamepadForMousePitch(bool* emulate);
	void SetDetectionZoneEnabled(EDetectionZone* detectionZoneID, bool* Enabled);
	void SetCurrentInteractionAnimation(EInteractionAnimation* Animation);
	void SetCharacterAudioSurfaceName(struct FString* Name);
	void SetAuthoritativeMovementFlag(EAuthoritativeMovementFlag* flagIndex, bool* Enabled);
	void SetAnimationCrouchState(bool* crouched);
	void SetAllowNavigation(bool* enable);
	void SetAllDetectionZonesEnabled(bool* Enabled);
	void ServerResetMeshRelativeOffSet();
	void Server_UpdateScreenAspectRatio(float* value);
	void Server_TeleportTo(struct FVector* DestLocation, struct FRotator* DestRotation, bool* bIsATest, bool* bNoCheck);
	void Server_SpawnItemAddon(struct FName* addonID);
	void Server_SpawnItem(struct FName* ItemId);
	void Server_SetSlasherAutoAttackOnCamperInteractFrameDelay(int* Frames);
	void Server_SetSlasherAutoAttackFrameDelay(int* Frames);
	void Server_SetRunVaultEnabled(bool* Enabled);
	void Server_SetReverseTraverseEnabled(bool* Enabled);
	void Server_SetMaxWalkSpeed(float* MaxWalkSpeed);
	void Server_SetForceAuthoritativeMovement(bool* value);
	void Server_SetEthereal(bool* Enabled);
	void Server_SetEnableServerPositionUpdates(bool* Enabled);
	void Server_SetEnableCapsuleDynamicResize(bool* Enabled);
	void Server_SetDebugSnapPoint(bool* Enabled);
	void Server_SetDebugPrintAvailableInteractions(bool* Enabled);
	void Server_SetDebugFailAllInteractions(bool* Enabled);
	void Server_SetDebugCarry(bool* Enabled);
	void Server_SetCustomization(TArray<struct FName>* customizationParts, TArray<struct FCharmIdSlot>* customizationCharms);
	void Server_SetContinuousPrintDebug(bool* Enabled);
	void Server_SetAuthoritativeMovement(bool* Enabled);
	void Server_SendSecondaryActionPressed();
	void Server_SendItemUseInput(bool* pressed);
	void Server_SendItemUse(bool* Use);
	void Server_SendItemDropInput(bool* pressed);
	void Server_SendInteractionInput(bool* pressed);
	void Server_SendFastInteractionInput(bool* pressed);
	void Server_SendAbilityInput(bool* pressed);
	void Server_RemoveStatusEffectByID(struct FName* statusEffectId, bool* bRemoveAllWithID);
	void Server_PlayerReady();
	void Server_OnInsaneSkillCheck();
	void Server_Ghost(bool* Ghost);
	void Server_FailInterruption(class ADBDPlayer** interruptee);
	void Server_EndStatusEffectByID(struct FName* statusEffectId, bool* bRemoveAllWithID);
	void Server_Drop(class ACollectable** Item, struct FVector* Location, struct FRotator* Rotation, bool* onDeath);
	void Server_CheatDispatchOnPostItemAddonsCreation();
	void Server_Cheat();
	void SecondaryActionInputPressed();
	void ResetYawScale(float* adjustTime);
	void ResetPitchScale(float* adjustTime);
	void ResetMeshRelativeRotation();
	void ResetMeshRelativePosition();
	void ResetCamera();
	void RemoveStatusEffect(class UStatusEffect** StatusEffect);
	void Remotely_HandleScoreEvent(struct FGameplayTag* scoreTypeTag, struct FScoreEventData* ScoreEventData);
	class UAnimMontage* PlayMontage(struct FAnimationMontageDescriptor* animMontageID, float* PlayRate, bool* isFollower);
	void OnRep_Interactable();
	void OnRep_DreamworldComponent();
	void OnPickupStart(class ADBDPlayer** Target);
	void OnPickupEnd(class ADBDPlayer** Target);
	void OnPawnDetectorOverlapExit(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void OnPawnDetectorOverlapEnter(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void OnLocallyObservedChanged();
	void OnLevelReadyToPlay();
	void OnIsCrouchedChanged__DelegateSignature(bool* isCrouched);
	void OnIntroCompletedNative();
	void OnIntroCompleted();
	void OnInterruptedStart();
	void OnInsaneSkillCheck();
	void OnHeadHidden(bool* hidden);
	struct FString OnGetCharacterName();
	void OnEscapeDoorActivated();
	void OnCurrentMontageComplete(class UAnimMontage** MontageAsset, bool* interrupted);
	void OnCurrentMontageBlendingOut(class UAnimMontage** MontageAsset, bool* interrupted);
	void OnClientRestart();
	void OnBlindChargeEmptied();
	void OnAttackStarted(EAttackType* attackType);
	void OnAttackFinished(EAttackType* attackType);
	void OnAnimInstanceChanged();
	void OnAllPlayerLoaded();
	void Multicast_SetRunVaultEnabled(bool* Enabled);
	void Multicast_SetReverseTraverseEnabled(bool* Enabled);
	void Multicast_SetMaxWalkSpeed(float* MaxWalkSpeed);
	void Multicast_SetInteractingPlayer(class ADBDPlayer** interactingPlayer);
	void Multicast_SetForceAuthoritativeMovement(bool* value);
	void Multicast_SetEthereal(bool* Enabled);
	void Multicast_SetEnableServerPositionUpdates(bool* Enabled);
	void Multicast_SetEnableCapsuleDynamicResize(bool* Enabled);
	void Multicast_SetDebugSnapPoint(bool* Enabled);
	void Multicast_SetDebugPrintAvailableInteractions(bool* Enabled);
	void Multicast_SetDebugCarry(bool* Enabled);
	void Multicast_SetCustomization(TArray<struct FName>* customizationParts, TArray<struct FCharmIdSlot>* customizationCharms);
	void Multicast_SetContinuousPrintDebug(bool* Enabled);
	void Multicast_SetAuthoritativeMovement(bool* Enabled);
	void Multicast_ServerResetMeshRelativeOffSet();
	void Multicast_RequestAttackSubstateChange(EAttackSubstate* attackSubstate);
	void Multicast_PlayMontage(struct FAnimationMontageDescriptor* animMontageID, float* PlayRate);
	void Multicast_OnInsaneSkillCheck();
	void Multicast_LockOnTarget(class ADBDPlayer** Target);
	void Multicast_LeaveGame(struct FGuid* uniqueLeavingPlayerId);
	void Multicast_InteractionRollResult(bool* rollResult);
	void Multicast_HitTarget(class ADBDPlayer** Target, EAttackType* attackType);
	void Multicast_Ghost(bool* Ghost);
	void Multicast_ConfirmItemDrop(bool* pressed);
	void Multicast_AttackBegin(EAttackType* attackType);
	void Local_RequestBlink(struct FTransform* destination);
	void Local_NotifyMatchEnded();
	bool LineTraceSingleForFootIK(struct FVector* Start, struct FVector* End, bool* traceComplex, struct FHitResult* OutHit);
	bool K2_SetActorLocationByBottomCapsule(struct FVector* NewLocation, bool* bSweep, struct FHitResult* SweepHitResult);
	void ItemUseReleased();
	void ItemUsePressed();
	void ItemDropReleased();
	void ItemDropPressed();
	bool IsStrafing();
	bool IsSnappingRotation();
	bool IsSnappingPosition();
	bool IsSnapping();
	bool IsRunningAndMoving();
	bool IsRunning();
	bool IsPlayingMontage(struct FAnimationMontageDescriptor* animMontageID);
	bool IsPlayingAnyMontage();
	bool IsLocationClear(struct FVector* targetPosition);
	bool IsLocallyObserved();
	bool IsKiller();
	bool IsInTerrorRadius();
	bool IsInteractionInputPressed(EInputInteractionType* InteractionType);
	bool IsInStalkMode();
	bool IsInsideCloset();
	bool IsInParadise();
	bool IsInMeathookZone();
	bool IsIncapacitated();
	bool IsInBasement();
	bool IsHeadHidden();
	bool IsFacing(struct FVector* Direction);
	bool IsExhausted();
	bool IsCrouchPressed();
	bool IsCrouching();
	bool IsCloaked();
	bool IsCamper();
	bool IsBeingInterrupted();
	bool IsAllowedNavigation();
	bool IsAIControlled();
	void InteractionInputReleased();
	void InteractionInputPressed();
	void Input_ToggleCrouch();
	void HideHead(bool* hide);
	bool HasTrapImmunity();
	bool HasMoveInput();
	bool HasDamageImmunity();
	bool HasClearPathToTargetWithIgnore(struct FVector* targetPosition, TArray<class AActor*>* ignoreActors);
	bool HasClearPathToTarget(struct FVector* targetPosition);
	bool HasClearPathToItemDropOffPosition();
	bool HasAnimMontageEnded();
	float GetTunableValue(struct FName* Key, float* defaultValue, bool* warnIfRowMissing);
	class USpecialEventSpawnerComponent* GetSpecialEventSpawnerComponent();
	bool GetRunVaultEnabled();
	struct FString GetRightFootAudioSurfaceName();
	bool GetReverseTraverseEnabled();
	struct FRotator GetRepControlRotation();
	float GetRemainingTrapImmunityDuration();
	float GetProgressToEscapeCarry(class ADBDPlayer** Player);
	EPlayerRole GetPlayerRole();
	class UPlayerInteractionHandler* GetPlayerInteractionHandler();
	struct FRotator GetPlayerDirection();
	class ADBDPlayerController* GetPlayerController();
	class UCameraComponent* GetPlayerCamera();
	class UBoxOcclusionQueryComponent* GetPixelCounter();
	class UPerkManager* GetPerkManager();
	float GetPercentPixelsVisible();
	float GetPercentMovementSpeed();
	class UGameplayTagContainerComponent* GetObjectState();
	bool GetNearbyGroundLocation(struct FVector* groundLocation);
	struct FString GetNameDebugString();
	class UMontagePlayer* GetMontagePlayer();
	struct FMontagePlaybackDefinition GetMontagePlaybackDefinition(struct FAnimationMontageDescriptor* animMontageID, float* PlayRate, bool* isFollower);
	float GetMontageLength(struct FAnimationMontageDescriptor* animMontageID);
	class UAnimMontage* GetMontage(struct FAnimationMontageDescriptor* animMontageID);
	struct FVector GetMeshFeetPosition();
	float GetMaxSpeed();
	float GetLuck();
	struct FString GetLeftFootAudioSurfaceName();
	struct FVector GetLastSafeLocation();
	TArray<class UItemModifier*> GetItemModifiers();
	class USceneComponent* GetItemDropOffTransform();
	TArray<class UItemAddon*> GetItemAddons();
	bool GetIsInterrupting();
	bool GetIsInteracting();
	bool GetIsInFirstPerson();
	bool GetIsBeyondCrouchWalkSpeed();
	bool GetInteractionRollResult();
	struct FInteractionPlayerProperties GetInteractionPlayerProperties();
	class UInteractionDetectorComponent* GetInteractionDetectorComponent();
	class AInteractable* GetInteractable();
	class ADBDPlayer* GetGuidingPlayer();
	float GetGrassEffectRadiusMultiplier();
	bool GetForceDisableSkillChecks();
	class UActorComponent* GetFirstComponentByClass(class UClass** ComponentClass);
	struct FVector GetFeetPositionAtTargetLocation(struct FVector* Location);
	struct FVector GetFeetPosition();
	bool GetFeetOnGround();
	bool GetEnableServerPositionUpdates();
	class UCharacterDreamworldComponent* GetDreamworldComponent();
	class UPrimitiveComponent* GetDetectionZone(EDetectionZone* detectionZoneID);
	bool GetDebugPrintAvailableInteractions();
	bool GetDebugFailAllInteractions();
	class ADBDPlayerState* GetDBDPlayerState();
	class UCustomizedSkeletalMesh* GetCustomizedSkeletalMesh();
	class UCustomizedAudioComponent* GetCustomizedAudio();
	EInteractionAnimation GetCurrentInteractionAnimation();
	class UInteractionDefinition* GetCurrentInteraction();
	EAttackType GetCurrentAttackType();
	bool GetContinuousPrintDebug();
	class UChaseComponent* GetChaseComponent();
	class UCharacterInventoryComponent* GetCharacterInventoryComponent();
	struct FString GetCharacterAudioSurfaceName();
	struct FVector GetCapsuleTopPosition();
	struct FVector GetCapsuleBottomPosition();
	class ADBDPlayerCameraManager* GetCameraManager();
	float GetCameraCharacterYawDiff();
	struct FVector GetBoneRelativeLocation(struct FName* targetBone, struct FName* relativeBone);
	struct FVector GetBoneLocation(struct FName* Name, TEnumAsByte<EBoneSpaces>* space);
	float GetBlinkTime();
	class UBlindableComponent* GetBlindableComponent();
	float GetBaseFOV();
	struct FVector GetAverageVelocity();
	class UAuthoritativeMovementComponent* GetAuthoritativeMovementComponent();
	class UAkComponent* GetAudioComponent();
	EAttackType GetAttackMontageEvent();
	class USceneComponent* GetAttachPoint(struct FName* attachPointName);
	void GetAnimTags(TArray<struct FName>* outTags);
	class UAnimInstance* GetAnimInstance();
	struct FAnimData GetAnimData();
	struct FVector GetAlmostCurrentVelocity();
	struct FVector GetActorLocationFromFeetLocation(struct FVector* FeetLocation);
	struct FVector FindFurthestClearLocationBetweenPoints(struct FVector* startPosition, struct FVector* targetPosition);
	class ADBDPlayer* FindClosestSlashablePlayerInDetectionZone(EDetectionZone* detectionZoneID);
	void FastInteractionInputReleased();
	void FastInteractionInputPressed();
	void Dissolve(bool* Dissolve);
	void DetachInteractor();
	void DebugPrint(struct FString* inString);
	void DeactivateSkillChecks();
	void DBDUnCrouch();
	void DBDLog(struct FString* LogText);
	void DBDCrouch();
	void DBD_TogglePrintServerPositionUpdateEnabled();
	void DBD_ToggleForceAuthoritativeMovement();
	void DBD_ToggleDebugInteractionInZone();
	void DBD_SetMouseTurnSpeedMultiplier(float* value);
	void DBD_SetMouseLookUpSpeedMultiplier(float* value);
	void DBD_SetGamePadTurnRate(float* value);
	void DBD_SetGamePadLookUpRate(float* value);
	void DBD_DebugStartInteraction();
	void Client_TryInteractionType(EInputInteractionType* InteractionType, class ADBDPlayer** Requester);
	void Client_SendCancelInteraction();
	void Client_QueueInteraction(EInputInteractionType* InteractionType, class ADBDPlayer** Requester, float* queuedTimer);
	void Client_ClearInteractionQueue();
	bool CanInterrupt_BP();
	bool CanInteractWithItems();
	bool CanInteract();
	void CancelCarry(bool* alsoCancelForOtherPlayer);
	bool CanBeBlinded();
	void CameraUpdated();
	void Broadcast_Server_RequestAttackSubstateChange(EAttackSubstate* attackSubstate);
	void Broadcast_PlayMontage_Server(struct FAnimationMontageDescriptor* animMontageID, float* PlayRate);
	void Broadcast_PlayMontage_Multicast(struct FAnimationMontageDescriptor* animMontageID, float* PlayRate);
	void Broadcast_Multicast_RequestAttackSubstateChange(EAttackSubstate* attackSubstate);
	void Broadcast_Multicast_BlinkDestination(struct FVector* Position, struct FRotator* Rotation);
	void Broadcast_LockOnTarget_Server(class ADBDPlayer** Target);
	void Broadcast_LockOnTarget_Multicast(class ADBDPlayer** Target);
	void Broadcast_HitTarget_Server(class ADBDPlayer** Target, EAttackType* attackType);
	void Broadcast_HitTarget_Multicast(class ADBDPlayer** Target, EAttackType* attackType);
	void Broadcast_BlinkDestination(struct FVector* Position, struct FRotator* Rotation);
	bool Authority_TryForceEndOngoingScoreEvent(EDBDScoreTypes* scoreType);
	bool Authority_TryForceCancelOngoingScoreEvent(EDBDScoreTypes* scoreType);
	void Authority_SetDreamworldComponent(class UCharacterDreamworldComponent** Component);
	void Authority_RequestStun(EStunType* stunType, class ADBDPlayer** stunner);
	void Authority_RemoveStatusEffectByID(struct FName* statusEffectId, bool* bRemoveAllWithID);
	class UStatusEffect* Authority_ImposeStatusEffect(struct FName* statusEffectId, class ADBDPlayer** originatingPlayer, float* customParam, class UGameplayModifierContainer** originatingEffect, bool* shouldDisplay);
	class UStatusEffect* Authority_ImposeDynamicStatusEffect(struct FName* statusEffectId, class ADBDPlayer** originatingPlayer, float* customParam, class UGameplayModifierContainer** originatingEffect);
	void Authority_HandleScoreEvent(struct FGameplayTag* scoreTypeTag, struct FScoreEventData* ScoreEventData);
	void Authority_Flashlighted(TArray<class AActor*>* instigators);
	void Authority_EvaluateIfPlayerCanSee();
	void Authority_EndStatusEffectByID(struct FName* statusEffectId, bool* bRemoveAllWithID);
	void Authority_EndOngoingScoreEvent(struct FGameplayTag* scoreTypeTag);
	void Authority_CancelOngoingScoreEvent(struct FGameplayTag* scoreTypeTag);
	void Authority_AttemptEscapeCarry(class ACamperPlayer** Player);
	void Authority_ActivateAuthoritativeMovementOnDropped();
	void AttachInteractor(class UInteractor** Interactor);
	void AddDetectionZone(EDetectionZone* detectionZoneID, class UPrimitiveComponent** zone);
	void AbilityInputReleased();
	void AbilityInputPressed();
};


// Class DeadByDaylight.CamperPlayer
// 0x03B0 (0x16B0 - 0x1300)
class ACamperPlayer : public ADBDPlayer
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x1300(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPickedUpDelegate;                                       // 0x1308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPickedUpEndDelegate;                                    // 0x1318(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHPSlotChanged;                                          // 0x1328(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x1338(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnImmobilizeStateChanged;                                 // 0x1350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              InputMashCount;                                           // 0x1360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InputMashDecayTime;                                       // 0x1364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       ReverseBearTrapAttachSocket;                              // 0x1368(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x1368(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              StruggleMashDelay;                                        // 0x1374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsWiggleProgressionAllowed;                               // 0x1378(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x1379(0x0003) MISSED OFFSET
	float                                              WiggleMashDelay;                                          // 0x137C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UStalkedComponent*                           StalkedComponent;                                         // 0x1380(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                                      // 0x1388(0x0028) MISSED OFFSET
	float                                              CameraResetToleranceYaw;                                  // 0x13B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraResetTolerancePitch;                                // 0x13B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraRecenterOffsetYaw;                                  // 0x13B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraRecenterOffsetPitch;                                // 0x13BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EGender                                            Gender;                                                   // 0x13C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x13C1(0x0007) MISSED OFFSET
	class UCurveFloat*                                 DropStaggerDuration;                                      // 0x13C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 DropStaggerMaxSpeed;                                      // 0x13D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeforDeathWhileCrawling;                                // 0x13D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeforDeathWhileHooked;                                  // 0x13DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SecondsUntilFootprintTrigger;                             // 0x13E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TriggerAfflictionHUDIntro;                                // 0x13E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4B];                                      // 0x13E5(0x004B) MISSED OFFSET
	class UCamperStillnessTrackerComponent*            _stillnessTracker;                                        // 0x1430(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData)
	float                                              PartiallyHiddenStillnessThreshold;                        // 0x1438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x143C(0x0004) MISSED OFFSET
	class AActor*                                      _escape;                                                  // 0x1440(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      _overlappingEscape;                                       // 0x1448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USpherePlayerOverlapComponent*               ProximityZone;                                            // 0x1450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData08[0x18];                                      // 0x1458(0x0018) MISSED OFFSET
	struct FDBDTimer                                   _dropStaggerTimer;                                        // 0x1470(0x0028) (Transient)
	unsigned char                                      UnknownData09[0x8];                                       // 0x1498(0x0008) MISSED OFFSET
	class UCapsuleComponent*                           SlashableZone;                                            // 0x14A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           HookSlashableZone;                                        // 0x14A8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTerrorRadiusReceiverComponent*              _terrorRadiusReceiverComponent;                           // 0x14B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              CrouchCapsuleHalfHeight;                                  // 0x14B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IKOffsetRightFoot;                                        // 0x14BC(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              IKOffsetLeftFoot;                                         // 0x14C0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x14C4(0x0004) MISSED OFFSET
	class UDBDPawnSensingComponent*                    _camperSensor;                                            // 0x14C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class USurviveTimerScoreEventComponent*            _surviveTimerScoreComponent;                              // 0x14D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData11[0x18];                                      // 0x14D8(0x0018) MISSED OFFSET
	TArray<class ADBDPlayer*>                          _foundCampers;                                            // 0x14F0(0x0010) (ZeroConstructor, Transient)
	TArray<class ADBDPlayer*>                          _potentialSaviors;                                        // 0x1500(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData12[0x8];                                       // 0x1510(0x0008) MISSED OFFSET
	class UCamperHealthComponent*                      _healthComponent;                                         // 0x1518(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _hpSlot01;                                                // 0x1520(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _hpSlot02;                                                // 0x1528(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _mendChargeable;                                          // 0x1530(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBloodTrailSettings*                         _bloodTrailSettings;                                      // 0x1538(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCamperBloodTrailComponent*                  _bloodTrailComponent;                                     // 0x1540(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _carryEscapeProgress;                                     // 0x1548(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKillerInstinctComponent*                    _killerInstinctComponent;                                 // 0x1550(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraAttachmentComponent*                  _cameraAttachment;                                        // 0x1558(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCharmSpawnerComponent*                      _charmSpawnerComponent;                                   // 0x1560(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UHookableComponent*                          _hookableComponent;                                       // 0x1568(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UScreamComponent*                            _screamComponent;                                         // 0x1570(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData13[0x6C];                                      // 0x1578(0x006C) MISSED OFFSET
	bool                                               _runInputPressed;                                         // 0x15E4(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x24];                                      // 0x15E5(0x0024) MISSED OFFSET
	bool                                               _trapIndicatorActive;                                     // 0x1609(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0x2];                                       // 0x160A(0x0002) MISSED OFFSET
	TWeakObjectPtr<class ACamperPlayer>                _revealedSurvivor;                                        // 0x160C(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x1614(0x0004) MISSED OFFSET
	class UCamperEndGameComponent*                     _camperEndGameComponent;                                  // 0x1618(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAkComponent*                                _noOcclusionAkComponent;                                  // 0x1620(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              _injuredGruntDistance;                                    // 0x1628(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _crawlingGruntDistance;                                   // 0x162C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _trappedGruntDistance;                                    // 0x1630(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _runningGruntDistance;                                    // 0x1634(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _fallingGruntDistance;                                    // 0x1638(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _guidedGruntDistance;                                     // 0x163C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _hookedGruntDistance;                                     // 0x1640(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x6C];                                      // 0x1644(0x006C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperPlayer"));

		return ptr;
	}


	void UpdateKillerDistanceEvent(float* DeltaSeconds);
	void UpdateHealingTimer(float* DeltaTime);
	void TriggerWiggleSkillCheck();
	void TriggerPutDownAnimation();
	void TriggerPickUpAnimation();
	void TriggerAfflictionHUDFeedback();
	void StopHealingTimer();
	void StartHealingTimer(float* Time);
	void SetRevealedSurvivor(class ACamperPlayer** Survivor);
	void SetPlayerExposedVFX();
	void SetImmobilized(ECamperImmobilizeState* State);
	void SetGuidedActionLocal(ECamperGuidedAction* action);
	void SetGuidedAction(ECamperGuidedAction* action);
	void SetEnableHookSlashableZone(bool* enable);
	void SetBeingCarried(bool* IsBeingCarried, class ADBDPlayer** carrier);
	void SetAutoInteractionMashEnabled(bool* Enabled);
	void Server_SetOverlappingEscape(class AActor** Escape);
	void Server_SetOnHookDrainToNextStage(bool* Enabled);
	void Server_SetItemNormalizedEnergyLevel(float* normalizedLevel);
	void Server_SetItemEnergyLevel(float* Level);
	void Server_SetImmobilized(ECamperImmobilizeState* State);
	void Server_SetHookEscapeAutoSuccess(bool* Enabled);
	void Server_SetEnableHookSlashableZone(bool* Enabled);
	void Server_SendRunInput(bool* pressed);
	void Server_SendLeftRightMashedInput(bool* pressed);
	void Server_SendInteractMashedInput(bool* pressed);
	void Server_RemoveReverseBearTrap();
	void Server_RemoveHealth();
	void Server_MakeInvulnerable();
	void Server_Kill(bool* sacrificed);
	void Server_IncreaseHealth();
	void Server_DebugResetHookedCount();
	void Server_Debug_StartInjuredBleedout(float* Duration);
	void Server_CheatEscaped();
	void ResetPotentialSaviors();
	void RemoveReverseBearTrap();
	void OnUnhooked();
	void OnProximityEntered(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void OnPlayScream(class UAkAudioEvent** audioEvent, bool* FireSoundEvent);
	void OnPawnSensed(class APawn** Pawn);
	void OnObsessionChanged(class ACamperPlayer** newObsession, class ACamperPlayer** previousObsession);
	void OnHookedStateChangedCosmetic();
	void OnHooked();
	void OnFinishedPlaying();
	void OnDroppedStart();
	void OnDroppedEnd(bool* clearLeader);
	void OnDroppedByBearTrap();
	void OnDamageHit(struct FHitResult* Hit, bool* causedKO);
	void Multicast_SetOverlappingEscape(class AActor** Escape);
	void Multicast_SetOnHookDrainToNextStage(bool* Enabled);
	void Multicast_SetImmobilized(ECamperImmobilizeState* State);
	void Multicast_SetHookEscapeAutoSuccess(bool* Enabled);
	void Multicast_SetGuidedAction(ECamperGuidedAction* action);
	void Multicast_SetEnableHookSlashableZone(bool* Enabled);
	void Multicast_SetAuthoritativeMovementFlag(EAuthoritativeMovementFlag* flag, bool* value);
	void Multicast_RemoveReverseBearTrap();
	void Multicast_OnSlashed(class ADBDPlayer** attacker, bool* applySprintEffect);
	void Multicast_OnFailedStruggling(class UInteractionDefinition** Interaction);
	void Multicast_DebugSetHookedCount(int* Count);
	void MoveToOwnerCarryJoint();
	void MakeCamperDisappearBleedOut();
	void MakeCamperDisappear();
	void Kill(bool* sacrificed, bool* Left);
	bool IsVaulting();
	bool IsUnintentionallyImmobilized();
	bool IsUnhookingSelf();
	bool IsTrapped();
	bool IsTotallyInsane();
	bool IsSacrificed();
	bool IsRunLocked();
	bool IsOnHitSprintEffectActive();
	bool IsObsessionTarget();
	bool IsMovementGuided();
	bool IsInNeed();
	bool IsImmobilized();
	bool IsHooked();
	bool IsHealingTimerExpired();
	bool IsGuidedBySlasher();
	bool IsEscaped();
	bool IsDeadOrInParadise();
	bool IsCrawling();
	bool IsCameraDetached();
	bool IsCameraAttached();
	bool IsBeingUnhooked();
	bool IsBeingPutOnHook();
	bool IsBeingPutDown();
	bool IsBeingPulledFromCloset();
	bool IsBeingPickedUp();
	bool IsBeingMended();
	bool IsBeingKilled();
	bool IsBeingInteractedWith();
	bool IsBeingHealed();
	bool IsBeingCarried();
	void Input_Wiggle(float* Input);
	void Input_ToggleRun();
	void Input_Struggle(float* Input);
	void HatchEscapeZoneEntered(class AActor** Escape);
	bool HasReverseBearTrap();
	bool HasHitEvents();
	bool HasGuidedAction();
	float GetWiggleFreeChargePercent();
	struct FRotator GetToAimPointRotation();
	class UTerrorRadiusReceiverComponent* GetTerrorRadiusReceiverComponent();
	float GetStillness();
	class UScreamComponent* GetScreamComponent();
	class AReverseBearTrap* GetReverseBearTrap();
	class ACamperPlayer* GetRevealedSurvivor();
	float GetPercentHealingTimer();
	class AActor* GetOverlappingEscape();
	float GetObsessionTargetWeight();
	int GetNumberOfEntityRenderRegions();
	class UAnimationMontageSlave* GetMontageFollower();
	float GetMaxGruntDistance(bool* isLocalPlayerKiller);
	int GetMadnessTierBPNative();
	ECamperImmobilizeState GetImmobilizedState();
	class UHookableComponent* GetHookableComponent();
	class UCamperHealthComponent* GetHealthComponent();
	ECamperGuidedAction GetGuidedAction();
	class UDBDClipRegionComponent* GetEntityRenderRegionAtIndex(int* InIndex);
	float GetDropStaggerTimeLeft();
	float GetDropStaggerPercentTimeElapsed();
	class UChaseeCharacterComponent* GetChaseeCharacterComponent();
	class UCamperStillnessTrackerComponent* GetCamperStillnessComponent();
	class UDBDCamperData* GetCamperData();
	class UCamperAnimInstance* GetCamperAnimInstance();
	class UCamperBloodTrailComponent* GetBloodTrailComponent();
	TArray<class UDBDClipRegionComponent*> GetAllEntityRenderRegions();
	struct FVector GetAimPoint();
	void EventOnDeath();
	void EscapeTutorial();
	void Escape(class AActor** Escape, EEscapeType* escapeType);
	void DoSacrificialDissolve();
	void DetachFromGuidingPlayer();
	void DecalBlood_Puddles();
	void DBD_RunLocked(bool* Lock);
	void DBD_LeaveParadise();
	void DBD_ForceRun(bool* Forced);
	void DBD_CheatEscaped();
	void DBD_AutoLeftRightMash(bool* Enabled);
	void DBD_AutoInteractionMash(bool* Enabled);
	bool ComputeHookEscapeResult();
	bool ComputeBeartrapEscapeResult();
	void Client_OnSlashedOutOfTrap(class ADBDPlayer** Requester);
	bool CanStruggle();
	bool CanRushQuietly();
	bool CanGainInsanity();
	bool CanBeShocked();
	bool CanBePickedUp();
	bool CanBeKilled();
	void CallOnDroppedByBearTrap();
	void Authority_ResetWiggleFreeCharge();
	void Authority_OnSlashed(class ADBDPlayer** attacker);
	void Authority_OnFailedStruggling(class UInteractionDefinition** Interaction);
	void Authority_HandleProtectionScoringEvents();
	void Authority_DropItemAtLastSafePosition();
	void Authority_AddWiggleFreeChargePercentNoModifiers(float* ChargePercent);
	void Authority_AddWiggleFreeCharge(float* charge);
	void AttachToGuidingPlayer();
	void AddBloodDropsToRightHand();
	void AddBloodDropsToLeftHand();
	void AddBloodDrippingToGK_Mori();
	void AddBloodDecalToGK_Mori();
	void ActivatePlayerExposedVFX();
	void ActivateLocalPlayerExposedVFX();
	void ActionInputReleased();
	void ActionInputPressed();
};


// Class DeadByDaylight.StateMachine
// 0x0070 (0x0170 - 0x0100)
class UStateMachine : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0100(0x0058) MISSED OFFSET
	TArray<uint16_t>                                   _netStateIDStackInitial;                                  // 0x0158(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0168(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StateMachine"));

		return ptr;
	}


	void Server_SetStateStack(TArray<uint16_t>* netStateIDStack);
	void NetIDStackChanged();
	void Multicast_SetStateStack(TArray<uint16_t>* netStateIDStack);
};


// Class DeadByDaylight.PlayerStateMachine
// 0x0000 (0x0170 - 0x0170)
class UPlayerStateMachine : public UStateMachine
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerStateMachine"));

		return ptr;
	}


	void Server_SetStateStack(TArray<uint16_t>* netStateIDStack);
	void NetIDStackChanged();
	void Multicast_SetStateStack(TArray<uint16_t>* netStateIDStack);
};


// Class DeadByDaylight.CamperStateMachine
// 0x0000 (0x0170 - 0x0170)
class UCamperStateMachine : public UPlayerStateMachine
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperStateMachine"));

		return ptr;
	}


	void Server_SetStateStack(TArray<uint16_t>* netStateIDStack);
	void NetIDStackChanged();
	void Multicast_SetStateStack(TArray<uint16_t>* netStateIDStack);
};


// Class DeadByDaylight.StillnessTrackerComponent
// 0x0038 (0x0138 - 0x0100)
class UStillnessTrackerComponent : public UActorComponent
{
public:
	float                                              SpeedThreshold;                                           // 0x0100(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceThreshold;                                        // 0x0104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceDecay;                                            // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DecayWhileMoving;                                         // 0x010C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	float                                              StillnessThreshhold;                                      // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StillnessTimerLimit;                                      // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecaySpeedMultiplier;                                     // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x011C(0x0008) MISSED OFFSET
	TWeakObjectPtr<class ADBDPlayer>                   _trackedPlayer;                                           // 0x0124(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x012C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StillnessTrackerComponent"));

		return ptr;
	}


	void StartTracking();
};


// Class DeadByDaylight.CamperStillnessTrackerComponent
// 0x0060 (0x0198 - 0x0138)
class UCamperStillnessTrackerComponent : public UStillnessTrackerComponent
{
public:
	float                                              ChickenShitModifier;                                      // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LoudNoiseTime;                                            // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0140(0x0010) MISSED OFFSET
	TArray<float>                                      ExposerSpawnTimes;                                        // 0x0150(0x0010) (ZeroConstructor, Transient)
	TArray<float>                                      ExposerDespawnTimes;                                      // 0x0160(0x0010) (ZeroConstructor, Transient)
	class UClass*                                      _exposerInstanceToSpawn;                                  // 0x0170(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class ACamperExposerInstance*>              _exposerInstances;                                        // 0x0178(0x0010) (ZeroConstructor, Transient)
	class UExposerInteriorZoneComponent*               _interiorZone;                                            // 0x0188(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0190(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CamperStillnessTrackerComponent"));

		return ptr;
	}


	void OnOverlapExit(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void OnOverlapEnter(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void OnLevelReadyToPlay();
	void ExitInteriorZone(class UExposerInteriorZoneComponent** zone);
	void EnterInteriorZone(class UExposerInteriorZoneComponent** zone);
};


// Class DeadByDaylight.CartersSparkComponent
// 0x00B0 (0x01B0 - 0x0100)
class UCartersSparkComponent : public UActorComponent
{
public:
	bool                                               _staticBlastEnabled;                                      // 0x0100(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7F];                                      // 0x0101(0x007F) MISSED OFFSET
	TArray<class ADBDPlayer*>                          _totallyInsanePlayers;                                    // 0x0180(0x0010) (ZeroConstructor, Transient)
	class ADBDPlayer*                                  _owningPlayer;                                            // 0x0190(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0198(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CartersSparkComponent"));

		return ptr;
	}


	void TriggerStaticBlastCooldown();
	void TriggerShockTherapyCooldown();
	void Server_OnShockTherapyCooldownCheatEntered();
	void OnRequestAndBeginInteraction();
	void Multicast_OnShockTherapyCooldownCheatEntered();
	void Local_OnShockTherapyCooldownCheatEntered();
	bool IsStaticBlastOnCooldown();
	bool IsShockTherapyOnCooldown();
	float GetStaticBlastCooldownPercentElapsed();
	void Authority_RegisterToGameEvents();
	void Authority_AddTotallyInsaneSurvivor(class ADBDPlayer** insaneSurvivor);
};


// Class DeadByDaylight.CDNPatchManager
// 0x0210 (0x0240 - 0x0030)
class UCDNPatchManager : public UObject
{
public:
	struct FString                                     InstallDirectory;                                         // 0x0030(0x0010) (ZeroConstructor)
	int                                                PakOrder;                                                 // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FString                                     PakMountPoint;                                            // 0x0048(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0058(0x0048) MISSED OFFSET
	TWeakObjectPtr<class UDBDGameInstance>             _gameInstance;                                            // 0x00A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF0];                                      // 0x00A8(0x00F0) MISSED OFFSET
	class UAtlantaPendingContent*                      _currentContentToInstall;                                 // 0x0198(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FString>                             _remainingManifestsToInstall;                             // 0x01A0(0x0010) (ZeroConstructor, Transient)
	TMap<struct FString, class UAtlantaPendingContent*> _contentToInstall;                                        // 0x01B0(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x40];                                      // 0x0200(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CDNPatchManager"));

		return ptr;
	}


	void OnRequestSucceeded(class UAtlantaPendingContent** PendingContent);
	void OnRequestFailed(struct FText* ErrorText, int* ErrorCode);
	void OnInstallSucceeded();
	void OnInstallFailed(struct FText* ErrorText, int* ErrorCode);
};


// Class DeadByDaylight.CharacterChaseVisualComponent
// 0x0058 (0x0158 - 0x0100)
class UCharacterChaseVisualComponent : public UActorComponent
{
public:
	class UMaterialHelperUnaffectedStaticMeshComp*     _vignetteMeshComp;                                        // 0x0100(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FVector                                     _relativeLocation;                                        // 0x0108(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     _relativeScale;                                           // 0x0114(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    _relativeRotation;                                        // 0x0120(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _fovModifyFactor;                                         // 0x012C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0130(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterChaseVisualComponent"));

		return ptr;
	}


	void OnObservedCharacterChange(class ADBDPlayer** Player);
};


// Class DeadByDaylight.CharacterCollection
// 0x0138 (0x0238 - 0x0100)
class UCharacterCollection : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0100(0x0090) MISSED OFFSET
	unsigned char                                      UnknownData01[0x50];                                      // 0x0100(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.CharacterCollection._characters
	class ASlasherPlayer*                              _killer;                                                  // 0x01E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x01E8(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.CharacterCollection._survivors

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterCollection"));

		return ptr;
	}


	void GetSurvivors();
	class ASlasherPlayer* GetKiller();
	void GetCharacters();
};


// Class DeadByDaylight.CharacterCollectionUtilities
// 0x0000 (0x0030 - 0x0030)
class UCharacterCollectionUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterCollectionUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.CharacterHelper
// 0x0000 (0x0030 - 0x0030)
class UCharacterHelper : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterHelper"));

		return ptr;
	}

};


// Class DeadByDaylight.CharacterInfoScreen
// 0x0018 (0x0108 - 0x00F0)
class UCharacterInfoScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00F0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterInfoScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.CharacterInventoryComponent
// 0x0070 (0x0170 - 0x0100)
class UCharacterInventoryComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0100(0x0028) MISSED OFFSET
	TArray<class ACollectable*>                        _inventory;                                               // 0x0128(0x0010) (Net, ZeroConstructor, Transient)
	TArray<class UItemAddon*>                          _generalAddons;                                           // 0x0138(0x0010) (ExportObject, Net, ZeroConstructor, Transient)
	TArray<class ACollectable*>                        _backpackInventory;                                       // 0x0148(0x0010) (Net, ZeroConstructor, Transient)
	TArray<class UItemAddon*>                          _allAddons;                                               // 0x0158(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0168(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterInventoryComponent"));

		return ptr;
	}


	void StartDrop(class ACollectable** Item);
	class ACollectable* SpawnCollectedItem(struct FName* ItemId);
	void RemoveFromInventory(class ACollectable** Item);
	void OnRep_Inventory();
	void OnRep_GeneralAddons();
	void OnRep_BackpackInventory();
	void Multicast_RemoveFromInventory(class ACollectable** Item);
	void Multicast_ClearAndDestroyInventory();
	void Multicast_AddToInventory(class ACollectable** Item, EInventoryType* inventoryType);
	bool IsUsingFlashlight();
	bool IsUsingAimItem();
	bool HasMaximumItemCount(class ACollectable** Item);
	bool HasItem();
	bool HasInInventory(class UClass** Item, EInventoryType* inventoryType);
	bool HasEquippedItem();
	struct FName GetItemID();
	int GetItemCountByID(struct FName* ItemId);
	int GetItemCount();
	class ACollectable* GetItem();
	class ACollectable* GetFirstItemFromInventory(class UClass** Item, EInventoryType* inventoryType);
	TArray<class UItemAddon*> GetAddons();
	void Drop(class ACollectable** Item, struct FVector* Location, struct FRotator* Rotation, bool* onDeath, bool* adjustToGround);
	void Collect(class ACollectable** Item, EInventoryType* inventoryType);
	void ClearAndDestroyInventory();
	void Authority_UseInventoryItem();
	void AddToInventory(class ACollectable** Item, EInventoryType* inventoryType);
};


// Class DeadByDaylight.ItemsAssetLibrary
// 0x0070 (0x0120 - 0x00B0)
class UItemsAssetLibrary : public UAssetLibrary
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x00B0(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ItemsAssetLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.CharacterItemsAssetLibrary
// 0x0018 (0x0138 - 0x0120)
class UCharacterItemsAssetLibrary : public UItemsAssetLibrary
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0120(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterItemsAssetLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.CharacterProgressionManager
// 0x0008 (0x0038 - 0x0030)
class UCharacterProgressionManager : public UObject
{
public:
	TWeakObjectPtr<class UDBDGameInstance>             _gameInstance;                                            // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterProgressionManager"));

		return ptr;
	}

};


// Class DeadByDaylight.CharacterStatsHandlerComponent
// 0x0028 (0x0128 - 0x0100)
class UCharacterStatsHandlerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0100(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterStatsHandlerComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.CharacterStatsUtilities
// 0x0000 (0x0030 - 0x0030)
class UCharacterStatsUtilities : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterStatsUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.CharacterTool
// 0x00F0 (0x0430 - 0x0340)
class ACharacterTool : public AActor
{
public:
	TArray<class ATargetPoint*>                        SpawnLocations;                                           // 0x0340(0x0010) (Edit, ZeroConstructor)
	struct FCharacterToolData                          CustomizationData;                                        // 0x0350(0x0070) (Edit)
	bool                                               Animated;                                                 // 0x03C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseInGameSkeleton;                                        // 0x03C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03C2(0x0006) MISSED OFFSET
	unsigned char                                      UnknownData01[0x30];                                      // 0x03C2(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.CharacterTool.OverallLightingClass
	struct FNamedButton                                ShowHelp;                                                 // 0x03F8(0x0018) (Edit)
	TArray<class ADBDMenuPlayer*>                      _characters;                                              // 0x0410(0x0010) (ZeroConstructor)
	class AActor*                                      _lighting;                                                // 0x0420(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0428(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterTool"));

		return ptr;
	}

};


// Class DeadByDaylight.CharacterXPManager
// 0x00E0 (0x0110 - 0x0030)
class UCharacterXPManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET
	TWeakObjectPtr<class UDBDGameInstance>             _gameInstance;                                            // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC0];                                      // 0x0050(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharacterXPManager"));

		return ptr;
	}

};


// Class DeadByDaylight.ChargeableComponent
// 0x01E0 (0x02E0 - 0x0100)
class UChargeableComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnInteractionEmptiedEvent;                                // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0110(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    SkillCheckResponseAestheticDelegate;                      // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SkillCheckResponseAuthorityDelegate;                      // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChargeAppliedAuthorityDelegate;                           // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChargeableCompletionPercentChangeAuthorityDelegate;       // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChargeableCompletionPercentChangeCosmeticDelegate;        // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    DechargeBeginDelegate;                                    // 0x0170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    DechargeEndDelegate;                                      // 0x0180(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               AllowSkillChecksAtFullCharge;                             // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0191(0x0007) MISSED OFFSET
	struct FString                                     ChargeableComponentID;                                    // 0x0198(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              DechargeDelay;                                            // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	struct FSpeedBasedNetSyncedValue                   _currentCharge;                                           // 0x01B0(0x0040) (Net)
	unsigned char                                      UnknownData03[0x8];                                       // 0x01F0(0x0008) MISSED OFFSET
	struct FDBDTimer                                   _skillCheckFailurePenaltyTimer;                           // 0x01F8(0x0028) (Transient)
	struct FDBDTimer                                   _dechargeTimer;                                           // 0x0220(0x0028) (Transient)
	TArray<struct FChargeData>                         _chargesThisFrame;                                        // 0x0248(0x0010) (ZeroConstructor, Transient)
	TArray<class AActor*>                              _instigatorsSinceEmpty;                                   // 0x0258(0x0010) (ZeroConstructor, Transient)
	TMap<struct FName, float>                          _tunableValueMap;                                         // 0x0268(0x0050) (ZeroConstructor, Transient)
	bool                                               _isCharging;                                              // 0x02B8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x02B9(0x0007) MISSED OFFSET
	TArray<int>                                        _playersWhoDidSkillCheck;                                 // 0x02C0(0x0010) (ZeroConstructor, Transient)
	float                                              _startingChargePercent;                                   // 0x02D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              _dechargeRate;                                            // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               _isDecharging;                                            // 0x02D8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _stopDechargingWhenComplete;                              // 0x02D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x02DA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ChargeableComponent"));

		return ptr;
	}


	void SetSecondsToCharge(float* SecondsToCharge);
	void SetDechargeRate(float* DechargeRate);
	void Reset();
	void OnRep_CurrentCharge();
	void OnCurrentChargeChanged(float* value);
	void Multicast_OnEmptied();
	void Multicast_OnCompleteChanged(bool* COMPLETED);
	bool IsSkillCheckTimePenaltyActive();
	void IncreaseMaxChargeAdditive(float* secondsToAdd);
	void IncreaseMaxCharge(float* percent);
	bool HasPlayerDoneSkillCheck(int* playerID);
	float GetTunableValue(struct FName* TunableValueID);
	float GetPlayerCountPenaltyModifier(int* PlayerCount);
	float GetPercentComplete();
	float GetMaxCharge();
	float GetCurrentCharge();
	float GetChargeRemaining();
	void AddChargePercent(float* ChargePercent, class AActor** Instigator);
	void AddCharge(float* ChargeAmount, class AActor** Instigator, bool* BypassSkillCheckFail);
};


// Class DeadByDaylight.ChargedAttackStateComponent
// 0x0008 (0x0108 - 0x0100)
class UChargedAttackStateComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ChargedAttackStateComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.ChargerComponent
// 0x0060 (0x0160 - 0x0100)
class UChargerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET
	struct FString                                     ChargerComponentID;                                       // 0x0108(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnChargeStateChange;                                      // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChargePercentChange;                                    // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0138(0x0018) MISSED OFFSET
	EEnergyTypeEnum                                    EnergyType;                                               // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0151(0x0003) MISSED OFFSET
	float                                              EnergyUsePerSecond;                                       // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _currentEnergyLevel;                                      // 0x0158(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              _maxEnergyLevel;                                          // 0x015C(0x0004) (Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ChargerComponent"));

		return ptr;
	}


	void UseEnergy(float* Seconds, float* energyUseModifier);
	void SetNormalizedEnergyLevel(float* energyLevel);
	void SetMaxEnergyLevel(float* energyLevel);
	void SetEnergyLevel(float* energyLevel);
	void Reset();
	void OnRep_EnergyLevel(float* previousEnergyLevel);
	bool HasCharge();
	float GetNormalizedEnergyLevel();
	float GetMaxEnergyLevel();
	float GetEnergyLevel();
};


// Class DeadByDaylight.Charm
// 0x0010 (0x0350 - 0x0340)
class ACharm : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0340(0x0008) MISSED OFFSET
	class USkeletalMeshComponent*                      _skeletalMeshComponent;                                   // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Charm"));

		return ptr;
	}


	void BeginDestroySequence_Internal();
};


// Class DeadByDaylight.CharmAttachable
// 0x0000 (0x0030 - 0x0030)
class UCharmAttachable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharmAttachable"));

		return ptr;
	}

};


// Class DeadByDaylight.CharmAttacher
// 0x0030 (0x0370 - 0x0340)
class ACharmAttacher : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnAttachedOnActor;                                        // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharmAnimationTagsChanged;                              // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class USkeletalMeshComponent*                      _chain;                                                   // 0x0360(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class ACharm*                                      _attachedCharm;                                           // 0x0368(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharmAttacher"));

		return ptr;
	}


	class USkeletalMeshComponent* GetSkeletalMeshComponentAttachedOn();
	class ACharm* GetAttachedCharm();
	struct FCharmAttacherAnimationTweak GetAnimationTweak();
	class AActor* GetActorAttachedOn();
	void DispatchOnCharmAnimationTagsChanged();
	void BindOnCharmAnimationTagsChanged();
};


// Class DeadByDaylight.CharmSpawnerComponent
// 0x0030 (0x0130 - 0x0100)
class UCharmSpawnerComponent : public UActorComponent
{
public:
	struct FName                                       SocketRootName;                                           // 0x0100(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0100(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData01[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	TArray<struct FCharmSlot>                          CharmSlots;                                               // 0x0110(0x0010) (Edit, ZeroConstructor)
	struct FVector                                     ScaleCharm;                                               // 0x0120(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x012C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CharmSpawnerComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.ChaseComponent
// 0x0060 (0x0160 - 0x0100)
class UChaseComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnChaseStarted;                                           // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChaseEnded;                                             // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAllChaseEnded;                                          // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FTagStateBool                               _isInChase;                                               // 0x0130(0x0030) (Net)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ChaseComponent"));

		return ptr;
	}


	void OnRep_IsInChase();
	bool IsInChase();
};


// Class DeadByDaylight.ChaseeCharacterComponent
// 0x0058 (0x01B8 - 0x0160)
class UChaseeCharacterComponent : public UChaseComponent
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0160(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ChaseeCharacterComponent"));

		return ptr;
	}


	void OnRep_IsInChase();
	bool IsInChase();
};


// Class DeadByDaylight.ChaserCharacterComponent
// 0x0078 (0x01D8 - 0x0160)
class UChaserCharacterComponent : public UChaseComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0160(0x0010) MISSED OFFSET
	class UDBDPawnSensingComponent*                    _camperSensor;                                            // 0x0170(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TMap<class ADBDPlayer*, struct FTargetFocusTimer>  _chaseTimers;                                             // 0x0178(0x0050) (ZeroConstructor, Transient)
	TArray<class ADBDPlayer*>                          _chasedPlayers;                                           // 0x01C8(0x0010) (Net, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ChaserCharacterComponent"));

		return ptr;
	}


	void Multicast_OnChaseStart(class ACamperPlayer** Survivor);
	void Multicast_OnChaseEnd(class ACamperPlayer** Survivor, float* chaseTime);
	void Multicast_OnAllChaseEnd();
	void Authority_OnChaseTargetFound(class APawn** Pawn);
};


// Class DeadByDaylight.ChatManager
// 0x0020 (0x0360 - 0x0340)
class AChatManager : public AActor
{
public:
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0348(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ChatManager"));

		return ptr;
	}


	void Multicast_DisplayMessage(int* PlayerIndex, struct FString* PlayerName, struct FString* MirrorsId, struct FString* Msg);
};


// Class DeadByDaylight.ChunkingManager
// 0x0010 (0x0040 - 0x0030)
class UChunkingManager : public UObject
{
public:
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ChunkingManager"));

		return ptr;
	}

};


// Class DeadByDaylight.CinematicManager
// 0x0028 (0x0058 - 0x0030)
class UCinematicManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET
	TArray<struct FCinematic>                          _cinematicQueue;                                          // 0x0048(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CinematicManager"));

		return ptr;
	}


	void PlaySingle(struct FCinematic* Cinematic);
	void PlayMultiple(TArray<struct FCinematic>* Cinematics);
	bool HasCinematicToPlay();
	struct FCinematic GetNextCinematicToPlay();
	void CancelAllCinematicToPlay();
};


// Class DeadByDaylight.CinematicScreen
// 0x0000 (0x00F0 - 0x00F0)
class UCinematicScreen : public UScreenBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CinematicScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ClipManager
// 0x0118 (0x0458 - 0x0340)
class AClipManager : public AActor
{
public:
	TArray<class UDBDClipRegionComponent*>             _clippingZones;                                           // 0x0340(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0350(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.ClipManager._meshComponents
	TArray<struct FMaterialOriginalState>              _dissolvedMeshes;                                         // 0x03A0(0x0010) (ZeroConstructor, Transient)
	TMap<class UMaterialInterface*, class UMaterialInterface*> _normal2dissolve;                                         // 0x03B0(0x0050) (ZeroConstructor, Transient)
	TMap<class UMaterialInterface*, class UMaterialInterface*> _dissolve2normal;                                         // 0x0400(0x0050) (ZeroConstructor, Transient)
	class UDataTable*                                  _sphericalDissolveMaterials;                              // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ClipManager"));

		return ptr;
	}


	void SphericalDissolveAt(struct FVector* Location, float* Radius);
	void RemoveDissolveMaterials();
};


// Class DeadByDaylight.ClosetAnalytics
// 0x0000 (0x0030 - 0x0030)
class UClosetAnalytics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ClosetAnalytics"));

		return ptr;
	}

};


// Class DeadByDaylight.CombinedSpecialEventDataUtilities
// 0x0000 (0x0030 - 0x0030)
class UCombinedSpecialEventDataUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CombinedSpecialEventDataUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.ConsentManager
// 0x0060 (0x0090 - 0x0030)
class UConsentManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0030(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ConsentManager"));

		return ptr;
	}

};


// Class DeadByDaylight.ContentScheduleManager
// 0x0110 (0x0140 - 0x0030)
class UContentScheduleManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0030(0x00A0) MISSED OFFSET
	class UObjectLibrary*                              _availableMapLibrary;                                     // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x68];                                      // 0x00D8(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ContentScheduleManager"));

		return ptr;
	}

};


// Class DeadByDaylight.ControllerPairingManager
// 0x0010 (0x0040 - 0x0030)
class UControllerPairingManager : public UObject
{
public:
	TWeakObjectPtr<class UDBDGameInstance>             _gameInstance;                                            // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ControllerPairingManager"));

		return ptr;
	}

};


// Class DeadByDaylight.CooldownTimerPerkIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UCooldownTimerPerkIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CooldownTimerPerkIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.CreditsScreen
// 0x0000 (0x00F0 - 0x00F0)
class UCreditsScreen : public UScreenBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CreditsScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.CrossplayManager
// 0x0008 (0x0038 - 0x0030)
class UCrossplayManager : public UObject
{
public:
	bool                                               _crossPlayAllowedByPlatform;                              // 0x0030(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CrossplayManager"));

		return ptr;
	}

};


// Class DeadByDaylight.GeneratorDrivenActor
// 0x0010 (0x0350 - 0x0340)
class AGeneratorDrivenActor : public AActor
{
public:
	bool                                               _activated;                                               // 0x0340(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0341(0x0007) MISSED OFFSET
	class AGenerator*                                  _generator;                                               // 0x0348(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GeneratorDrivenActor"));

		return ptr;
	}


	void SetSpawnedObject(class AGenerator** Generator);
	void OnInitGeneratorDrivenActor(class AGenerator** Generator);
	void OnGeneratorRepairedEvent();
	void OnActivateGeneratorDrivenActor();
	void Multicast_ActivationChecked(bool* activated);
	bool IsActivated();
	struct FRandomStream GetSharedTileRandomizer();
};


// Class DeadByDaylight.CrowBomb
// 0x0098 (0x03E8 - 0x0350)
class ACrowBomb : public AGeneratorDrivenActor
{
public:
	float                                              _innerRadius;                                             // 0x0350(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              _outerRadius;                                             // 0x0354(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              _maxTakeoffDelay;                                         // 0x0358(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                _numCrows;                                                // 0x035C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                _crowCenterDistance;                                      // 0x0360(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                _crowOuterDistance;                                       // 0x0364(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                _eliminationSamples;                                      // 0x0368(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              _eliminationStddev;                                       // 0x036C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0370(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.CrowBomb._meshComponentClass
	TArray<class UWorldRunawayMeshComponent*>          _crows;                                                   // 0x03A0(0x0010) (ExportObject, Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x18];                                      // 0x03B0(0x0018) MISSED OFFSET
	class USceneComponent*                             _root;                                                    // 0x03C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USceneComponent*                             _traceStart;                                              // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             _traceEnd;                                                // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               _landed;                                                  // 0x03E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CrowBomb"));

		return ptr;
	}


	void TriggerTakeOff(struct FVector* triggerLocation);
	void TriggerLand();
};


// Class DeadByDaylight.CurrencyDisplayable
// 0x0060 (0x03A0 - 0x0340)
class ACurrencyDisplayable : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0340(0x0008) MISSED OFFSET
	class USkeletalMeshComponent*                      _skeletalMeshComponent;                                   // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<ECurrencyType, class USkeletalMesh*>          _currencyMeshes;                                          // 0x0350(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CurrencyDisplayable"));

		return ptr;
	}


	void BeginDestroySequence_Internal();
};


// Class DeadByDaylight.CustomDepthOutlineRenderStrategy
// 0x0018 (0x0058 - 0x0040)
class UCustomDepthOutlineRenderStrategy : public UBaseOutlineRenderStrategy
{
public:
	class UMaterialInterface*                          _replacementMaterial;                                     // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UBatchMeshCommands*>                  _translucentCopies;                                       // 0x0048(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CustomDepthOutlineRenderStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.CustomizationDescription
// 0x0010 (0x0048 - 0x0038)
class UCustomizationDescription : public UDataAsset
{
public:
	TArray<struct FCustomizedMeshPart>                 Parts;                                                    // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CustomizationDescription"));

		return ptr;
	}

};


// Class DeadByDaylight.CustomizationHelper
// 0x0000 (0x0030 - 0x0030)
class UCustomizationHelper : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CustomizationHelper"));

		return ptr;
	}

};


// Class DeadByDaylight.CustomizedAnimationComponent
// 0x0020 (0x0120 - 0x0100)
class UCustomizedAnimationComponent : public UActorComponent
{
public:
	class ADBDBasePlayer*                              _owner;                                                   // 0x0100(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCustomizedSkeletalMesh*                     _customizedSkeletalMesh;                                  // 0x0108(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UClass*                                      _defaultAnimClass;                                        // 0x0110(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0118(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CustomizedAnimationComponent"));

		return ptr;
	}


	void OnCustomizationChanged();
};


// Class DeadByDaylight.CustomizedAudioComponent
// 0x0120 (0x0220 - 0x0100)
class UCustomizedAudioComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnCustomizedAudioSwitchStateChanged;                      // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0110(0x00A0) MISSED OFFSET
	struct FString                                     AudioCharacterNameDefaultSwitchState;                     // 0x01B0(0x0010) (Edit, ZeroConstructor)
	struct FString                                     AudioCharacterHeadDefaultSwitchState;                     // 0x01C0(0x0010) (Edit, ZeroConstructor)
	struct FString                                     AudioCharacterClothesDefaultSwitchState;                  // 0x01D0(0x0010) (Edit, ZeroConstructor)
	struct FString                                     AudioCharacterShoesDefaultSwitchState;                    // 0x01E0(0x0010) (Edit, ZeroConstructor)
	struct FString                                     AudioCharacterWeaponDefaultSwitchState;                   // 0x01F0(0x0010) (Edit, ZeroConstructor)
	struct FString                                     AudioCharacterAmbianceDefaultSwitchState;                 // 0x0200(0x0010) (Edit, ZeroConstructor)
	struct FString                                     AudioCharacterStateDefaultSwitchState;                    // 0x0210(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CustomizedAudioComponent"));

		return ptr;
	}


	struct FString GetAudioSwitchState(EAudioCustomizationCategory* audioCustomizationCategory);
};


// Class DeadByDaylight.CustomizedSkeletalMesh
// 0x0130 (0x0230 - 0x0100)
class UCustomizedSkeletalMesh : public UActorComponent
{
public:
	class UClass*                                      SlaveAnimInstanceClass;                                   // 0x0100(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class USkeletalMeshComponent*>              Components;                                               // 0x0108(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class USkeletalMeshComponent*>              Slaves;                                                   // 0x0118(0x0010) (ExportObject, ZeroConstructor, Transient)
	TMap<ECustomizationCategory, class AItemVfx*>      _itemVfxs;                                                // 0x0128(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0178(0x00A8) MISSED OFFSET
	class USkinnedMeshComponent*                       _meshOwner;                                               // 0x0220(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	int                                                _characterIdOverride;                                     // 0x0228(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CustomizedSkeletalMesh"));

		return ptr;
	}


	void SetVfxsVisibility(ECustomizationCategory* Category, bool* visible);
	void SetMeshVisibility(bool* visible);
	void SetMeshOwner(class USkinnedMeshComponent** Mesh);
	void SetCastShadow(bool* CastShadow);
	void SetAllVfxsVisibility(bool* visible);
	class USkeletalMeshComponent* GetSkeletalMesh(ECustomizationCategory* Category);
	class USkinnedMeshComponent* GetMeshOwner();
	TArray<struct FName> GetCurrentCustomizationItems();
	TArray<class USkeletalMeshComponent*> GetComponents();
	void CopyCustomization(class UCustomizedSkeletalMesh** copyFrom);
	bool Contains(TArray<struct FName>* itemIds);
	void ClearAllVfxs();
};


// Class DeadByDaylight.DailyRitualsScreen
// 0x0060 (0x0150 - 0x00F0)
class UDailyRitualsScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x00F0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DailyRitualsScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.DBD_CrossDissolver
// 0x0030 (0x0130 - 0x0100)
class UDBD_CrossDissolver : public UActorComponent
{
public:
	TArray<class UMaterialInterface*>                  NewMaterials;                                             // 0x0100(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class USkeletalMeshComponent*>              BaseSkeletalMesh;                                         // 0x0110(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	TArray<class USkeletalMeshComponent*>              ClonedSkeletalMeshes;                                     // 0x0120(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBD_CrossDissolver"));

		return ptr;
	}


	void MakeClone();
	void KillClone();
};


// Class DeadByDaylight.DBD_SoundClipUtil
// 0x00C0 (0x01C0 - 0x0100)
class UDBD_SoundClipUtil : public UActorComponent
{
public:
	TArray<struct FMapMeshToAkAudioEvent>              AudioMap;                                                 // 0x0100(0x0010) (Edit, ZeroConstructor)
	TMap<struct FName, struct FMapMeshToAkAudioEvent>  _audioEventMap;                                           // 0x0110(0x0050) (ZeroConstructor, Transient)
	TArray<struct FMapSoundsToAvoid>                   _objectsWhoHavePlayedASound;                              // 0x0160(0x0010) (ZeroConstructor, Transient)
	TMap<class UAkAudioEvent*, float>                  _nextSoundPlayTime;                                       // 0x0170(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBD_SoundClipUtil"));

		return ptr;
	}


	void OnGotMeshToTriggerSound(class UStaticMeshComponent** usm);
	void OnCharacterEnterSoundRegion(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	class UAkAudioEvent* GetAudioEventForMesh(class UStaticMeshComponent** usm);
};


// Class DeadByDaylight.DBD_SoundEventSpawner
// 0x0038 (0x0378 - 0x0340)
class ADBD_SoundEventSpawner : public AActor
{
public:
	TArray<struct FDBD_SoundSpawnerData>               AtlantaSoundDescriptor;                                   // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FDBD_SoundSpawnerData>               SoundDescriptor;                                          // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0360(0x0008) MISSED OFFSET
	TArray<class UClass*>                              _loadedSoundAssets;                                       // 0x0368(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBD_SoundEventSpawner"));

		return ptr;
	}


	void OnLoudNoiseTriggered(class AActor** originator, class AActor** instigatingActor, struct FVector* Location, bool* shouldTrack, float* audibleRange, bool* isQuickAction);
	void AssetsLoaded();
};


// Class DeadByDaylight.DBD_SpiderThing
// 0x0088 (0x03D0 - 0x0348)
class ADBD_SpiderThing : public ABaseVFX
{
public:
	class UInstancedStaticMeshComponent*               _instancedMesh;                                           // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UDecalComponent*>                     _arrayDecalsSpawn;                                        // 0x0350(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UDecalComponent*>                     _arrayDecalsEnd;                                          // 0x0360(0x0010) (ExportObject, ZeroConstructor)
	class UMaterialInstanceDynamic*                    _dynamicDecalEndMaterial;                                 // 0x0370(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    _dynamicDecalSpawnMaterial;                               // 0x0378(0x0008) (ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 Mesh;                                                     // 0x0380(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaximumRadius;                                            // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ThicknessY;                                               // 0x038C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ThicknessZ;                                               // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxInstances;                                             // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                InitialSpawnAmount;                                       // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AngleRangeDegrees;                                        // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                InitializationTimings;                                    // 0x03A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                DestructionTimings;                                       // 0x03A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   DecalEndMaterial;                                         // 0x03B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   DecalSpawnMaterial;                                       // 0x03B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UParticleSystem*                             ParticleSpawn;                                            // 0x03C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DecalInstanceScale;                                       // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBD_SpiderThing"));

		return ptr;
	}


	void RebuildLines();
	void RandomTrace(struct FHitResult* out_result);
	void CreateLine();
};


// Class DeadByDaylight.DBD_SpiderThingComponent
// 0x00B0 (0x0320 - 0x0270)
class UDBD_SpiderThingComponent : public USceneComponent
{
public:
	TArray<class UDecalComponent*>                     _arrayDecalsSpawn;                                        // 0x0270(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UDecalComponent*>                     _arrayDecalsEnd;                                          // 0x0280(0x0010) (ExportObject, ZeroConstructor)
	class UMaterialInstanceDynamic*                    _dynamicDecalEndMaterial;                                 // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    _dynamicDecalSpawnMaterial;                               // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 MeshLow;                                                  // 0x02A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 MeshMedium;                                               // 0x02A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 MeshHigh;                                                 // 0x02B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaximumRadius;                                            // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaximumStickLength;                                       // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ThicknessY;                                               // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ThicknessZ;                                               // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ThicknessYRange;                                          // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ThicknessZRange;                                          // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxInstances;                                             // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                InitialSpawnAmount;                                       // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AngleRangeDegrees;                                        // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02DC(0x0004) MISSED OFFSET
	class UCurveVector*                                InitializationTimings;                                    // 0x02E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                DestructionTimings;                                       // 0x02E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   DecalEndMaterial;                                         // 0x02F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   DecalSpawnMaterial;                                       // 0x02F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDetailMode>                           DecalMinDetailMode;                                       // 0x0300(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0301(0x0007) MISSED OFFSET
	class UParticleSystem*                             ParticleSpawn;                                            // 0x0308(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DecalInstanceScale;                                       // 0x0310(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0314(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBD_SpiderThingComponent"));

		return ptr;
	}


	void RebuildLines();
	void RandomTrace(struct FHitResult* out_result);
	void CreateLine();
};


// Class DeadByDaylight.DBDAggregateParticleSystemComponent
// 0x0060 (0x0870 - 0x0810)
class UDBDAggregateParticleSystemComponent : public UParticleSystemComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0810(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.DBDAggregateParticleSystemComponent.LocatorComponentCache
	bool                                               PendingReset;                                             // 0x0860(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0861(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAggregateParticleSystemComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDAggregateParticleManager
// 0x0000 (0x0340 - 0x0340)
class ADBDAggregateParticleManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAggregateParticleManager"));

		return ptr;
	}


	bool WasRecentlyRendered(float* Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor** InParentActor, struct FName* InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetReplicates(bool* bInReplicates);
	void SetReplicateMovement(bool* bInReplicateMovement);
	void SetOwner(class AActor** NewOwner);
	void SetNetDormancy(TEnumAsByte<ENetDormancy>* NewDormancy);
	void SetLifeSpan(float* InLifespan);
	void SetActorTickInterval(float* TickInterval);
	void SetActorTickEnabled(bool* bEnabled);
	void SetActorScale3D(struct FVector* NewScale3D);
	void SetActorRelativeScale3D(struct FVector* NewRelativeScale);
	void SetActorHiddenInGame(bool* bNewHidden);
	void SetActorEnableCollision(bool* bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveRadialDamage(float* DamageReceived, class UDamageType** DamageType, struct FVector* Origin, struct FHitResult* HitInfo, class AController** InstigatedBy, class AActor** DamageCauser);
	void ReceivePointDamage(float* Damage, class UDamageType** DamageType, struct FVector* HitLocation, struct FVector* HitNormal, class UPrimitiveComponent** HitComponent, struct FName* BoneName, struct FVector* ShotFromDirection, class AController** InstigatedBy, class AActor** DamageCauser, struct FHitResult* HitInfo);
	void ReceiveHit(class UPrimitiveComponent** MyComp, class AActor** Other, class UPrimitiveComponent** OtherComp, bool* bSelfMoved, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* NormalImpulse, struct FHitResult* Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float* Damage, class UDamageType** DamageType, class AController** InstigatedBy, class AActor** DamageCauser);
	void ReceiveActorOnReleased(struct FKey* ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnClicked(struct FKey* ButtonPressed);
	void ReceiveActorEndOverlap(class AActor** OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor** OtherActor);
	void ReceiveActorBeginCursorOver();
	void PrestreamTextures(float* Seconds, bool* bEnableStreaming, int* CinematicTextureGroups);
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float* Loudness, class APawn** NoiseInstigator, struct FVector* NoiseLocation, float* MaxRange, struct FName* Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface** Parent);
	bool K2_TeleportTo(struct FVector* DestLocation, struct FRotator* DestRotation);
	bool K2_SetActorTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(struct FRotator* NewRotation, bool* bTeleportPhysics);
	void K2_SetActorRelativeTransform(struct FTransform* NewRelativeTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(struct FRotator* NewRelativeRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(struct FVector* NewRelativeLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController** PC);
	void K2_OnBecomeViewTarget(class APlayerController** PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor(EDetachmentRule* LocationRule, EDetachmentRule* RotationRule, EDetachmentRule* ScaleRule);
	void K2_DestroyComponent(class UActorComponent** Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent** Parent, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor** ParentActor, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor** InParentActor, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachLocationType, bool* bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent** InParent, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachLocationType, bool* bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor** Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor** OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor** OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass** ClassFilter, TArray<class AActor*>* OverlappingActors);
	TEnumAsByte<ENetRole> GetLocalRole();
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(struct FKey* InputAxisKey);
	float GetInputAxisValue(struct FName* InputAxisName);
	float GetInputAxisKeyValue(struct FKey* InputAxisKey);
	float GetHorizontalDotProductTo(class AActor** OtherActor);
	float GetHorizontalDistanceTo(class AActor** OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor** OtherActor);
	float GetDistanceTo(class AActor** OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass** ComponentClass, struct FName* Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass** ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass** ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool* bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool* bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController** PlayerController);
	void DisableInput(class APlayerController** PlayerController);
	void DetachRootComponentFromParent(bool* bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	class UActorComponent* AddComponent(struct FName* TemplateName, bool* bManualAttachment, struct FTransform* RelativeTransform, class UObject** ComponentTemplateContext);
	bool ActorHasTag(struct FName* Tag);
};


// Class DeadByDaylight.DBDLocatorComponent
// 0x0000 (0x0270 - 0x0270)
class UDBDLocatorComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDLocatorComponent"));

		return ptr;
	}


	void ToggleVisibility(bool* bPropagateToChildren);
	bool SnapTo(class USceneComponent** InParent, struct FName* InSocketName);
	void SetWorldScale3D(struct FVector* NewScale);
	void SetVisibility(bool* bNewVisibility, bool* bPropagateToChildren);
	void SetSkipComponentAndChildrenTransformUpdate(bool* value);
	void SetShouldUpdatePhysicsVolume(bool* bInShouldUpdatePhysicsVolume);
	void SetRelativeScale3D(struct FVector* NewScale3D);
	void SetMobility(TEnumAsByte<EComponentMobility>* NewMobility);
	void SetHiddenInGame(bool* NewHidden, bool* bPropagateToChildren);
	void SetAbsolute(bool* bNewAbsoluteLocation, bool* bNewAbsoluteRotation, bool* bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool* oldValue);
	void OnRep_Transform();
	void OnRep_RelativeRotation();
	void OnRep_RelativeLocation();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldRotation(struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeRotation(struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(EDetachmentRule* LocationRule, EDetachmentRule* RotationRule, EDetachmentRule* ScaleRule, bool* bCallModify);
	bool K2_AttachToComponent(class USceneComponent** Parent, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent** InParent, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachType, bool* bWeldSimulatedBodies);
	void K2_AddWorldTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeLocation(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(struct FName* BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(struct FName* InSocketName, TEnumAsByte<ERelativeTransformSpace>* TransformSpace);
	struct FRotator GetSocketRotation(struct FName* InSocketName);
	struct FQuat GetSocketQuaternion(struct FName* InSocketName);
	struct FVector GetSocketLocation(struct FName* InSocketName);
	bool GetSkipComponentAndChildrenTransformUpdate();
	bool GetShouldUpdatePhysicsVolume();
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool* bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int* ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(struct FName* InSocketName);
	void DetachFromParent(bool* bMaintainWorldPosition, bool* bCallModify);
};


// Class DeadByDaylight.DBDAggregateParticleLocatorComponent
// 0x0010 (0x0280 - 0x0270)
class UDBDAggregateParticleLocatorComponent : public UDBDLocatorComponent
{
public:
	class UParticleSystemComponent*                    _particleComponent;                                       // 0x0270(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0278(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAggregateParticleLocatorComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDAIPlayerController
// 0x0010 (0x0460 - 0x0450)
class ADBDAIPlayerController : public AAIController
{
public:
	TArray<class UAICharacterBehaviour*>               _currentBehaviours;                                       // 0x0450(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAIPlayerController"));

		return ptr;
	}


	void StartCharacterBehaviour(class UClass** behaviourClass, class UAICharacterBehaviourData** characterBehaviourData);
	void SetCharacterMovement(ECharacterMovementTypes* movementTypes);
	void PauseCharacterBehaviour(class UClass** behaviourClass);
	void MovePlayerToActor(class AActor** Goal, float* AcceptanceRadius);
	void InteractRequest();
	void FastInteractRequest();
	void AttackRequest();
};


// Class DeadByDaylight.DBDAnalytics
// 0x0000 (0x0030 - 0x0030)
class UDBDAnalytics : public UBHVRAnalytics
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAnalytics"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDAtlantaBloodwebDefinition
// 0x0110 (0x0140 - 0x0030)
class UDBDAtlantaBloodwebDefinition : public UObject
{
public:
	unsigned char                                      UnknownData00[0x110];                                     // 0x0030(0x0110) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAtlantaBloodwebDefinition"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDAtlantaDesignTunables
// 0x0668 (0x0698 - 0x0030)
class UDBDAtlantaDesignTunables : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0030(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.AtlantaStructuredDataClass
	class UDBDAtlantaStructuredData*                   AtlantaStructuredData;                                    // 0x0060(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0068(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.CloseNoiseIndicatorTemplate
	unsigned char                                      UnknownData02[0x30];                                      // 0x0098(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.ExitOpenedIndicatorTemplate
	unsigned char                                      UnknownData03[0x30];                                      // 0x00C8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.GeneratorIndicatorTemplate
	unsigned char                                      UnknownData04[0x30];                                      // 0x00F8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.HookedIndicatorTemplate
	unsigned char                                      UnknownData05[0x30];                                      // 0x0128(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.KillerCuesIndicatorTemplate
	unsigned char                                      UnknownData06[0x30];                                      // 0x0158(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.LoudNoiseIndicatorTemplate
	unsigned char                                      UnknownData07[0x30];                                      // 0x0188(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.SafeZoneManagerTemplate
	unsigned char                                      UnknownData08[0x30];                                      // 0x01B8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGRoleSelectionScreenClass
	unsigned char                                      UnknownData09[0x30];                                      // 0x01E8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGAtlantaTutorialScreenClass
	unsigned char                                      UnknownData10[0x30];                                      // 0x0218(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGNavigationScreenClass
	unsigned char                                      UnknownData11[0x30];                                      // 0x0248(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGInboxScreenClass
	unsigned char                                      UnknownData12[0x30];                                      // 0x0278(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.SharedAuthenticationComponent
	unsigned char                                      UnknownData13[0x30];                                      // 0x02A8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGPanelScreenClass
	unsigned char                                      UnknownData14[0x30];                                      // 0x02D8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGLobbyScreenClass
	unsigned char                                      UnknownData15[0x30];                                      // 0x0308(0x0030) UNKNOWN PROPERTY: SoftObjectProperty DeadByDaylight.DBDAtlantaDesignTunables.AtlantaChaseVignetteStaticMesh
	unsigned char                                      UnknownData16[0x30];                                      // 0x0338(0x0030) UNKNOWN PROPERTY: SoftObjectProperty DeadByDaylight.DBDAtlantaDesignTunables.AtlantaChaseVignetteMaterialInstance
	unsigned char                                      UnknownData17[0x30];                                      // 0x0368(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGGenericPopupClass
	unsigned char                                      UnknownData18[0x30];                                      // 0x0398(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGLevelUpPopupClass
	unsigned char                                      UnknownData19[0x30];                                      // 0x03C8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGTutorialPopupClass
	unsigned char                                      UnknownData20[0x30];                                      // 0x03F8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGTallyScreenClass
	unsigned char                                      UnknownData21[0x30];                                      // 0x0428(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGLoadingScreenWidgetClass
	unsigned char                                      UnknownData22[0x30];                                      // 0x0458(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGSplashScreenClass
	unsigned char                                      UnknownData23[0x30];                                      // 0x0488(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGCommandDebugButtonClass
	unsigned char                                      UnknownData24[0x30];                                      // 0x04B8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGAtlantaObjectiveClass
	unsigned char                                      UnknownData25[0x30];                                      // 0x04E8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGStoreScreenClass
	unsigned char                                      UnknownData26[0x30];                                      // 0x0518(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGCustomizationScreenClass
	unsigned char                                      UnknownData27[0x30];                                      // 0x0548(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGOverlayMenuScreenClass
	unsigned char                                      UnknownData28[0x30];                                      // 0x0578(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGPerkSelectionPopupClass
	unsigned char                                      UnknownData29[0x30];                                      // 0x05A8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGBloodStoreMysteryBoxPopupClass
	unsigned char                                      UnknownData30[0x30];                                      // 0x05D8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGRitualScreenClass
	unsigned char                                      UnknownData31[0x30];                                      // 0x0608(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGLoadingWidgetClass
	unsigned char                                      UnknownData32[0x30];                                      // 0x0638(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGAtlantaFriendListScreen
	unsigned char                                      UnknownData33[0x30];                                      // 0x0668(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaDesignTunables.UMGToastNotificationScreenClass

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAtlantaDesignTunables"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDBaseInputHandler
// 0x00A8 (0x00D8 - 0x0030)
class UDBDBaseInputHandler : public UObject
{
public:
	class APawn*                                       _pawn;                                                    // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USpringArmComponent*                         _cameraBoom;                                              // 0x0038(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x98];                                      // 0x0040(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDBaseInputHandler"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDAtlantaInputHandler
// 0x0050 (0x0128 - 0x00D8)
class UDBDAtlantaInputHandler : public UDBDBaseInputHandler
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x00D8(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAtlantaInputHandler"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDAtlantaStructuredData
// 0x0030 (0x0060 - 0x0030)
class UDBDAtlantaStructuredData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0030(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDAtlantaStructuredData.AtlantaHeartbeatActor

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAtlantaStructuredData"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDAudioUtils
// 0x0000 (0x0340 - 0x0340)
class ADBDAudioUtils : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAudioUtils"));

		return ptr;
	}


	bool WasRecentlyRendered(float* Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor** InParentActor, struct FName* InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetReplicates(bool* bInReplicates);
	void SetReplicateMovement(bool* bInReplicateMovement);
	void SetOwner(class AActor** NewOwner);
	void SetNetDormancy(TEnumAsByte<ENetDormancy>* NewDormancy);
	void SetLifeSpan(float* InLifespan);
	void SetActorTickInterval(float* TickInterval);
	void SetActorTickEnabled(bool* bEnabled);
	void SetActorScale3D(struct FVector* NewScale3D);
	void SetActorRelativeScale3D(struct FVector* NewRelativeScale);
	void SetActorHiddenInGame(bool* bNewHidden);
	void SetActorEnableCollision(bool* bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveRadialDamage(float* DamageReceived, class UDamageType** DamageType, struct FVector* Origin, struct FHitResult* HitInfo, class AController** InstigatedBy, class AActor** DamageCauser);
	void ReceivePointDamage(float* Damage, class UDamageType** DamageType, struct FVector* HitLocation, struct FVector* HitNormal, class UPrimitiveComponent** HitComponent, struct FName* BoneName, struct FVector* ShotFromDirection, class AController** InstigatedBy, class AActor** DamageCauser, struct FHitResult* HitInfo);
	void ReceiveHit(class UPrimitiveComponent** MyComp, class AActor** Other, class UPrimitiveComponent** OtherComp, bool* bSelfMoved, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* NormalImpulse, struct FHitResult* Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float* Damage, class UDamageType** DamageType, class AController** InstigatedBy, class AActor** DamageCauser);
	void ReceiveActorOnReleased(struct FKey* ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnClicked(struct FKey* ButtonPressed);
	void ReceiveActorEndOverlap(class AActor** OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor** OtherActor);
	void ReceiveActorBeginCursorOver();
	void PrestreamTextures(float* Seconds, bool* bEnableStreaming, int* CinematicTextureGroups);
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float* Loudness, class APawn** NoiseInstigator, struct FVector* NoiseLocation, float* MaxRange, struct FName* Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface** Parent);
	bool K2_TeleportTo(struct FVector* DestLocation, struct FRotator* DestRotation);
	bool K2_SetActorTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(struct FRotator* NewRotation, bool* bTeleportPhysics);
	void K2_SetActorRelativeTransform(struct FTransform* NewRelativeTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(struct FRotator* NewRelativeRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(struct FVector* NewRelativeLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController** PC);
	void K2_OnBecomeViewTarget(class APlayerController** PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor(EDetachmentRule* LocationRule, EDetachmentRule* RotationRule, EDetachmentRule* ScaleRule);
	void K2_DestroyComponent(class UActorComponent** Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent** Parent, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor** ParentActor, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor** InParentActor, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachLocationType, bool* bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent** InParent, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachLocationType, bool* bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor** Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor** OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor** OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass** ClassFilter, TArray<class AActor*>* OverlappingActors);
	TEnumAsByte<ENetRole> GetLocalRole();
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(struct FKey* InputAxisKey);
	float GetInputAxisValue(struct FName* InputAxisName);
	float GetInputAxisKeyValue(struct FKey* InputAxisKey);
	float GetHorizontalDotProductTo(class AActor** OtherActor);
	float GetHorizontalDistanceTo(class AActor** OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor** OtherActor);
	float GetDistanceTo(class AActor** OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass** ComponentClass, struct FName* Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass** ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass** ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool* bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool* bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController** PlayerController);
	void DisableInput(class APlayerController** PlayerController);
	void DetachRootComponentFromParent(bool* bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	class UActorComponent* AddComponent(struct FName* TemplateName, bool* bManualAttachment, struct FTransform* RelativeTransform, class UObject** ComponentTemplateContext);
	bool ActorHasTag(struct FName* Tag);
};


// Class DeadByDaylight.DBDAuthentication
// 0x0028 (0x0058 - 0x0030)
class UDBDAuthentication : public UObject
{
public:
	TArray<struct FAuthenticationInfo>                 _localInfos;                                              // 0x0030(0x0010) (ZeroConstructor, Transient)
	TArray<struct FAuthenticationInfo>                 _remoteInfos;                                             // 0x0040(0x0010) (ZeroConstructor, Transient)
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDAuthentication"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDBaseGameMode
// 0x0030 (0x0468 - 0x0438)
class ADBDBaseGameMode : public AgameMode
{
public:
	struct FDataTableDropdown                          DebugSpecialEvent;                                        // 0x0438(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDBaseGameMode"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDBaseHud
// 0x0010 (0x0440 - 0x0430)
class ADBDBaseHud : public AHUD
{
public:
	class UFont*                                       _debugFont;                                               // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0438(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDBaseHud"));

		return ptr;
	}


	void ShowAnimHudBP();
	void ShowAnimHud(bool* show);
	bool ShouldDrawAnimHud();
};


// Class DeadByDaylight.DBDBaseMatchGameMode
// 0x0018 (0x0480 - 0x0468)
class ADBDBaseMatchGameMode : public ADBDBaseGameMode
{
public:
	class UEndGameComponent*                           _endGameComponent;                                        // 0x0468(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UEscapeRequirementTracker*                   _escapeRequirementTracker;                                // 0x0470(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ANetworkFenceActor*                          _theFence;                                                // 0x0478(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDBaseMatchGameMode"));

		return ptr;
	}


	class UEndGameComponent* GetEndGameComponent();
};


// Class DeadByDaylight.DBDBloodWebDefinition
// 0x0110 (0x0140 - 0x0030)
class UDBDBloodWebDefinition : public UObject
{
public:
	unsigned char                                      UnknownData00[0x110];                                     // 0x0030(0x0110) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDBloodWebDefinition"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDBloodwebDefinitionBase
// 0x0000 (0x0030 - 0x0030)
class UDBDBloodwebDefinitionBase : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDBloodwebDefinitionBase"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDPlayerData
// 0x0028 (0x0128 - 0x0100)
class UDBDPlayerData : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET
	struct FYawAndPitchRotator_NetQuantize16           _controlRotation;                                         // 0x0110(0x000C) (Net)
	unsigned char                                      UnknownData01[0xC];                                       // 0x011C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerData"));

		return ptr;
	}


	void SetLoadoutSpawned();
	void SetLightSpawned();
	void SetIntroCompleted();
	void Server_SetIntroCompleted();
	void Server_SetControlRotation(struct FRotator* Rotation);
	void Server_LoadoutSpawned();
	void Server_LightSpawned();
	bool IsLoadoutSpawned();
	bool IsLightSpawned();
	bool IsIntroCompleted();
	bool GetUseInputPressed();
	bool GetLeftRightInputMashed();
	bool GetInteractionInputMashed();
	struct FRotator GetControlRotation();
};


// Class DeadByDaylight.DBDCamperData
// 0x0030 (0x0158 - 0x0128)
class UDBDCamperData : public UDBDPlayerData
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0128(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDCamperData"));

		return ptr;
	}


	void SetLoadoutSpawned();
	void SetLightSpawned();
	void SetIntroCompleted();
	void Server_SetIntroCompleted();
	void Server_SetControlRotation(struct FRotator* Rotation);
	void Server_LoadoutSpawned();
	void Server_LightSpawned();
	bool IsLoadoutSpawned();
	bool IsLightSpawned();
	bool IsIntroCompleted();
	bool GetUseInputPressed();
	bool GetLeftRightInputMashed();
	bool GetInteractionInputMashed();
	struct FRotator GetControlRotation();
};


// Class DeadByDaylight.DBDCharacterMovementUtilities
// 0x0000 (0x0030 - 0x0030)
class UDBDCharacterMovementUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDCharacterMovementUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDCharacterUtilities
// 0x0000 (0x0030 - 0x0030)
class UDBDCharacterUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDCharacterUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDCheatManager
// 0x0050 (0x00D0 - 0x0080)
class UDBDCheatManager : public UCheatManager
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0080(0x0040) MISSED OFFSET
	class UVirtualKeyboard*                            _virtualKeyboard;                                         // 0x00C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDCheatManager"));

		return ptr;
	}


	void DBD_WakeUpSurvivor();
	void DBD_VisualizeHookRenderRegions();
	void DBD_ValidateDatabases();
	void DBD_ValidateCustomizationItems(struct FName* ItemName);
	void DBD_UploadAchievements();
	void DBD_UpdateErrorSimulation(struct FString* moduleName, struct FString* errorId, bool* Enabled);
	void DBD_UnloadCharacterAssetLibrary(int* characterId);
	void DBD_UnloadAllCharacterAssetLibrary();
	void DBD_UnlinkMirrorsIdFromFacebook();
	void DBD_UnequipAllCharms();
	void DBD_TryRequestToS3(struct FString* bucket, struct FString* internalUrl);
	void DBD_TriggerStartMatch();
	void DBD_TriggerPerkSelectionPopup(int* characterLevelReached, struct FString* firstPerkName, int* firstPerkLevel, bool* IsFirstPerkTeachable, struct FString* optionalSecondPerkName, int* optionalSecondPerkLevel, bool* isSecondPerkTeachable);
	void DBD_TriggerPerkSelectionByLevelPopup(int* characterLevelReached, int* characterId);
	void DBD_TriggerMatchLockedOutPenalty();
	void DBD_TriggerEndGameScenario();
	void DBD_ToggleProceduralDebugMode();
	void DBD_TeleportWithClothHandling(float* X, float* Y, float* Z);
	void DBD_TeleportToTile(uint32_t* X, uint32_t* Y);
	void DBD_Teleport(float* X, float* Y, float* Z);
	void DBD_SyncLoadCharacter(int* characterId);
	void DBD_StopVideoPlayer();
	void DBD_StopLoadCharacterAssetLibrary(int* characterId);
	void DBD_StartQuickPlay();
	void DBD_StartInjuredBleedout(float* Duration);
	void DBD_SpectateSurvivor();
	void DBD_SpectateKiller();
	void DBD_SpawnStatusEffect(struct FName* statusEffectId);
	void DBD_SpawnPerk(struct FName* PerkId, int* PerkLevel);
	void DBD_SpawnItemInMainMenu(struct FName* ItemId);
	void DBD_SpawnItemAddon(struct FName* addonID);
	void DBD_SpawnItem(struct FName* ItemId);
	void DBD_SpawnDirectionMarker(float* Lifetime, float* minVisibleDistance, float* maxVisibleDistance);
	void DBD_SpawnCharacter(int* characterId, bool* menuCharacter, struct FName* OutfitId, float* X, float* Y, float* Z);
	void DBD_SpawnCamperByName(struct FString* Name, int* Count);
	void DBD_SpawnCamperByIndex(int* Index, int* Count);
	void DBD_SimulateSynchronousFreeze(int* miliseconds);
	void DBD_ShutdownRTM();
	void DBD_ShowWebUrl(struct FString* targetUrl);
	void DBD_ShowVirtualKeyboard(bool* show, bool* password);
	void DBD_ShowVirtualJoysticks();
	void DBD_ShowStoreUI(struct FString* productId);
	void DBD_ShowLoadout();
	void DBD_ShowKillerPowerDebugInfo(bool* Enabled);
	void DBD_ShowGameInstalledPrompt();
	void DBD_ShowErrorPopupAndGoBackToSplashScreen();
	void DBD_ShowErrorPopup();
	void DBD_ShowCharacterSightDebug(bool* show);
	void DBD_ShowArchiveQuestsRepetition();
	void DBD_ShopCameraQuit();
	void DBD_ShopCameraMain();
	void DBD_ShopCameraBox();
	void DBD_SetWindowDebugMode(bool* debugMode);
	void DBD_SetUserBonusBloodpoints(int* Points);
	void DBD_SetUserBloodpoints(int* Points);
	void DBD_SetTotalXp(int* totalXp);
	void DBD_SetSurvivorLeftCount(int* Count);
	void DBD_SetSurvivorEmblemPoints(struct FString* EmblemId, int* Points);
	void DBD_SetStoreHitBoxesVisible(bool* value);
	void DBD_SetSlasherAutoAttackOnCamperInteractFrameDelay(int* Frames);
	void DBD_SetSlasherAutoAttackFrameDelayAndCamperAutoInteractEnabled(int* slasherAutoAttackFrameDelay, bool* camperAutoInteractEnabled, float* camperAutoInteractDuration, float* camperAutoInteractDelay);
	void DBD_SetSlasherAutoAttackFrameDelay(int* slasherAutoAttackFrameDelay);
	void DBD_SetSingleDetectionZoneActive(bool* Active);
	void DBD_SetRunVaultEnabled(bool* Enabled);
	void DBD_SetReverseTraverseEnabled(bool* Enabled);
	void DBD_SetRandomInputAmplitude(float* Amplitude);
	void DBD_SetQATest();
	void DBD_SetPlayerLevel(int* currentXp, int* PlayerLevel, int* Prestige);
	void DBD_SetPerchRadiusThreshold(float* Threshold);
	void DBD_SetOnHookDrainToNextStage(bool* onHookDrainToNextStage);
	void DBD_SetOfferingTriggersVisibility(bool* IsVisible);
	void DBD_SetObjectiveProgressionForNextGame(struct FString* objectiveIdStr, int* progression);
	void DBD_SetObjectiveProgression(struct FString* objectiveIdStr, int* progression);
	void DBD_SetNewsContentUpdateTimer(float* updateInSeconds, bool* repeatTimer);
	void DBD_SetMouseLock(bool* locked);
	void DBD_SetMaxWalkSpeed(float* MaxWalkSpeed);
	void DBD_SetKillerHeadVisibility(bool* visible);
	void DBD_SetKillerEmblemPoints(struct FString* EmblemId, int* Points);
	void DBD_SetItemNormalizedEnergyLevel(float* normalizedLevel);
	void DBD_SetItemEnergyLevel(float* Level);
	void DBD_SetHighestWeightSeenNews(int* value);
	void DBD_SetHatchetVar(struct FName* VarName, float* value);
	void DBD_SetFriendFavoriteStatus(struct FString* platformFriendId, bool* favoriteStatus);
	void DBD_SetFearMarketUpdateTimer(float* updateInSeconds, bool* repeatTimer);
	void DBD_SetEthereal(bool* Enabled);
	void DBD_SetEnableHookSlashableZone(bool* Enabled);
	void DBD_SetDockedState(bool* docked);
	void DBD_SetDebugSnapPoint(bool* Enabled);
	void DBD_SetDebugPrintAvailableInteractions(bool* Enabled);
	void DBD_SetDebugFailAllInteractions(bool* Enabled);
	void DBD_SetDebugCarry(bool* Enabled);
	void DBD_SetDate(struct FString* dateString, bool* isTicking);
	void DBD_SetCustomizationMesh(struct FName* ItemName);
	void DBD_SetCustomizationCharm(struct FName* CharmId, int8_t* SlotIndex);
	void DBD_SetCrouch(bool* Enabled);
	void DBD_SetContinuousPrintState(bool* Enabled);
	void DBD_SetContinuousPrintDebug(bool* Enabled);
	void DBD_SetChunkProgress(int* chunkProgress);
	void DBD_SetChunkingState(unsigned char* chunkState);
	void DBD_SetCheatGameVersion(int* major, int* minor, int* patch);
	void DBD_SetCharacterStat(struct FName* StatName, float* amount);
	void DBD_SetAutoItemInteractEnabled(bool* Enabled, float* Duration, float* Delay);
	void DBD_SetAutoInteractEnabled(bool* Enabled, float* Duration, float* Delay);
	void DBD_SetAutoFastInteractEnabled(bool* Enabled, float* Duration, float* Delay);
	void DBD_SetAuthoritativeMovement(bool* Enabled);
	void DBD_SetArchiveStoryEditorMode(bool* editorMode, struct FString* csvSavedPath);
	void DBD_SetActiveGeneratorCount(int* Count);
	void DBD_SendPlatformInviteForParty();
	void DBD_SendPartyChatMessage(struct FString* Message);
	void DBD_SendInputToast(int* ButtonType);
	void DBD_SelectSpawner(int* Type);
	void DBD_SelectSlasher(uint32_t* slasherIndex);
	void DBD_SelectRandomObsession();
	void DBD_SelectCamper(uint32_t* camperIndex);
	void DBD_SearchPlayerName(struct FString* PlayerName);
	void DBD_RevokeConsent(struct FString* consentId);
	void DBD_RevokeAllConsents();
	void DBD_ReverseBearTrap_ForceTimer(bool* force);
	void DBD_ReverseBearTrap_FastForward(float* DeltaTime);
	void DBD_ReverseBearTrap_Execute();
	void DBD_RetrieveFriendsListFor(struct FString* MirrorsId, struct FString* platform);
	void DBD_ResizeVideoToThumbnail(int* SizeX, int* SizeY, int* positionX, int* positionY);
	void DBD_ResizeVideoToFullscreen();
	void DBD_ResistentCamper();
	void DBD_ResetTutorialTips();
	void DBD_ResetSpecialEventSeenCinematics();
	void DBD_ResetSeason();
	void DBD_ResetPlayerLevelAndXp();
	void DBD_ResetPallets();
	void DBD_ResetObjectiveProgression(struct FString* objectiveIdStr);
	void DBD_ResetMeshRelativeOffSet();
	void DBD_ResetIdentityAuthenticationProvider();
	void DBD_ResetHookStage();
	void DBD_ResetGhostStealth();
	void DBD_ResetGameVersion();
	void DBD_ResetFirstTimePlaying();
	void DBD_ResetCloth();
	void DBD_ResetCharacterStat(struct FName* StatName);
	void DBD_ResetCamera();
	void DBD_ResetBloodpoints();
	void DBD_ResetAllCharacterStats();
	void DBD_RequestJoinParty(struct FString* playedId);
	void DBD_RemoveSomeStatusEffects();
	void DBD_RemoveReverseBearTrap();
	void DBD_RemoveHP();
	void DBD_RemoveFriend(struct FString* platformId);
	void DBD_RemoveExhaustion();
	void DBD_RemoveCells(int* Count);
	void DBD_RemoveAllStatusEffects();
	void DBD_RemoveAllPerks();
	void DBD_RejectRequestJoinParty(struct FString* playedId);
	void DBD_RejectPartyInvite(struct FString* partyId);
	void DBD_RegisterPlayerName(struct FString* Name);
	void DBD_RefreshStaticBlast();
	void DBD_RefillActivePhaseWalkCharges();
	void DBD_Ragdoll(struct FName* RootBone, float* Blend);
	void DBD_PutSurvivorToSleep();
	void DBD_PulldownPallets();
	void DBD_ProcessOffering();
	void DBD_PrintSteamBuildIds();
	void DBD_PrintCurrentStateOnce();
	void DBD_PlayMontage(struct FName* MontageID);
	void DBD_PlayEntityTurn();
	void DBD_PcInputOnAtlanta(bool* shouldOverride);
	void DBD_OverrideVersionNumber(struct FString* VersionNumber);
	void DBD_OptionToggleUseHeadphones();
	void DBD_OptionToggleMuteOnFocusLost();
	void DBD_OptionToggleInvertY();
	void DBD_OptionToggleFullScreen();
	void DBD_OptionToggleAutoAdjust();
	void DBD_OptionSetResolution(int* resolution);
	void DBD_OptionSetQualityLevel(uint32_t* qualityLevel);
	void DBD_OptionSetMainVolume(int* Volume);
	void DBD_OptionSetLanguage(struct FString* lang);
	void DBD_OpenVideo(struct FString* VideoID, struct FString* Mode);
	void DBD_OpenNetworkErrorPopup();
	void DBD_OpenLogFolder();
	void DBD_NoCrows();
	void DBD_NewAuthToken();
	void DBD_MuteMusicInGame(bool* muted);
	void DBD_Mute(bool* mute);
	void DBD_MoveBackAndForth(bool* move, float* moveDuration, bool* run);
	void DBD_MirrorsSteamValidateTransaction(struct FString* orderId, struct FName* ItemId);
	void DBD_MirrorsSteamInitTransaction(struct FName* ItemId, struct FString* Description);
	void DBD_MirrorsSteamFinalizeTransaction(struct FString* orderId);
	void DBD_MirrorsReportPlayer(struct FString* reportedPlayerMirrorsId);
	void DBD_MirrorsRefreshWallet();
	void DBD_MirrorsPurchaseOutfit(struct FName* OutfitId, struct FString* currencyId);
	void DBD_MirrorsPurchaseNonPremiumItem(struct FName* objectId, double* toPurchaseQuantity, struct FString* currencyId);
	void DBD_MirrorsPurchaseCharacter(struct FName* characterCatalogId, struct FString* currencyId);
	void DBD_MirrorsPurchaseBundle(struct FName* objectId, double* toPurchaseQuantity, struct FString* currencyId, bool* isPremium);
	void DBD_MirrorsPurchaseAllOutfits();
	void DBD_MirrorsPurchaseAllItems();
	void DBD_MirrorsPurchaseAllAtlantaItems();
	void DBD_MirrorsLoadPlayerData();
	void DBD_MirrorsGetCharacterCustomizationItemData();
	void DBD_MirrorsGetAvailableBundles();
	void DBD_MirrorsDropInventoryItem(struct FString* objectId, int* DropCount);
	void DBD_MirrorsDropAllInventoryItems();
	void DBD_MirrorsConsumeItem(struct FName* objectId);
	void DBD_MirrorsClaimMessageRewards();
	void DBD_MirrorsBuyFearMarketItem(struct FName* PerkId, struct FString* currencyId);
	void DBD_MayThereBeOutlines(struct FString* value);
	void DBD_MarketingSetupGameplayCheats();
	void DBD_MarketingSetupCinematicCheats();
	void DBD_LogGlobalUObjectArray();
	void DBD_LogActivatables();
	void DBD_LoadCharacterAssetLibrary(int* characterId);
	void DBD_LoadCatalogDataFromS3();
	void DBD_ListStatusEffects();
	void DBD_ListPerks();
	void DBD_ListItemAddons();
	void DBD_ListInventory();
	void DBD_ListInteractionInZone();
	void DBD_ListDBStatusEffects();
	void DBD_ListDBPerks();
	void DBD_ListDBOfferings();
	void DBD_ListDBItems();
	void DBD_ListDBItemAddons();
	void DBD_ListDBCustomizations();
	void DBD_ListAvailableInteractions();
	void DBD_ListAllStatusEffects();
	void DBD_ListAllPerks();
	void DBD_ListAllItemAddons();
	void DBD_LevelUp();
	void DBD_LeaveParty();
	void DBD_LeaveMatch();
	void DBD_Kill(bool* sacrificed);
	void DBD_ItsAlive(bool* Enabled);
	void DBD_IsServerPositionUpdatesEnabled();
	void DBD_InvitePlayerToParty(struct FString* playerID);
	void DBD_InvalidateIdentityAuthenticationProviderToken();
	void DBD_InitializeRTM();
	void DBD_ImportLocalSaveGame();
	void DBD_HookEscapeAutoSuccess(bool* Enabled);
	void DBD_GrantInventoryItemOnLevelUp(struct FString* playerType, struct FString* ItemId);
	void DBD_GetSyncedUTCTime();
	void DBD_GetSuggestedFriendsPerPlatform();
	void DBD_GetRecentlyPlayedWithPlayers();
	void DBD_GetPlayerPips();
	void DBD_GetPlayerName();
	void DBD_GetPlayerLevel();
	void DBD_GetNextProgressionPerks(int* Level, int* characterId);
	void DBD_GetKrakenID();
	void DBD_GetHighestWeightSeenNews();
	void DBD_GetChunkingState();
	void DBD_GenerateAuthToken();
	void DBD_GameOnSubmitScore(int* bronzeCount, int* silverCount, int* goldCount, int* iridescentCount);
	void DBD_GameOnIsUIEnabled();
	void DBD_GameOnIsAccountLinked();
	void DBD_GameOnGetPlayerTournaments(struct FString* Period, struct FString* filterBy, struct FString* queryBy);
	void DBD_GameOnGetMatchDetails(struct FString* MatchID, struct FString* playerAttributes);
	void DBD_GameOnEnterPlayerTournament(struct FString* tournamentId, struct FString* accesskey);
	void DBD_GameOnEnterMatch();
	void DBD_FrenzyForever();
	void DBD_ForceSurvivorGreyedOut(bool* isGreyedOut);
	void DBD_ForceStartKillerLobby();
	void DBD_ForceSkillChecks(bool* Enabled);
	void DBD_ForceRebalanceRTM();
	void DBD_ForceFlee(bool* toward);
	void DBD_ForceDisableSkillChecks(bool* Enabled);
	void DBD_ForceDisableFootIK(bool* Enabled);
	void DBD_ForceBackendUnreachable(int* force);
	void DBD_FlushAnalytics();
	void DBD_FindActorWithTag(struct FString* TagName);
	void DBD_FetchMatchmakingUseQueueAPIConfig();
	void DBD_ExportLocalSaveGame();
	void DBD_EquipCharmsIn3Slots(struct FName* charmIdInSlot0, struct FName* charmIdInSlot1, struct FName* charmIdInSlot2);
	void DBD_EntitlementsInfo();
	void DBD_EnsureFail();
	void DBD_EndGameWithReason(EEndGameReason* Reason);
	void DBD_EndGame();
	void DBD_EndEndGameScenario();
	void DBD_EnableTerrorRadius();
	void DBD_EnableServerPositionUpdates(bool* Enabled);
	void DBD_EnableDebugUnavailableInteractions(bool* Enabled);
	void DBD_EnableCapsuleDynamicResize(bool* Enabled);
	void DBD_EmulateKrakenSpecificError(struct FString* Endpoint, int* ErrorCode);
	void DBD_EarnXpAmount(int* matchXp);
	void DBD_EarnPlayerXp(int* matchTime, bool* isFirstMatch, int* consecutiveMatch, struct FString* playerType, struct FString* highestEmblemQuality, bool* queueForTally);
	void DBD_DumpCharacterObjectStates();
	void DBD_DropSurvivorItems();
	void DBD_DisplayTournamentsScreen();
	void DBD_DisplayPopupToast(int* toastId);
	void DBD_DisplayPlayerStat(struct FName* StatName);
	void DBD_DisplayPlayerGameState();
	void DBD_DisplayObjectiveProgression(struct FString* objectiveIdStr);
	void DBD_DisplayFriendsListData();
	void DBD_DisplayFriendsList();
	void DBD_DisplayFriendInfo(struct FString* friendId);
	void DBD_DisplayEventProgression(struct FString* EventId);
	void DBD_DisplayChunkingDefines();
	void DBD_DisplayCharacterStat(struct FName* StatName);
	void DBD_DispatchOnPostItemAddonsCreation();
	void DBD_DisconnectionPenaltyShow();
	void DBD_DisconnectionPenaltySetEndOfBan(struct FString* endOfBan);
	void DBD_DisconnectionPenaltyAddPoints(int* amount);
	void DBD_DisableTerrorRadius();
	void DBD_DisableStartUpdateMontageDuringEnter(bool* disable);
	void DBD_DestroyAllNotControlledCharacter();
	void DBD_DeleteAllCharacterAssetLibrary();
	void DBD_DebugPrintInteractionsInZone();
	void DBD_DebugPlague(bool* enable);
	void DBD_DebugIsInterruptable(bool* interruptable);
	void DBD_DebugGhost(bool* debug);
	void DBD_DebugCompetence(int* On);
	void DBD_CreateParty();
	void DBD_CrashGameWithNullPtr();
	void DBD_CrashGameWithCheck();
	void DBD_CopyPlayerMirrorsIdToClipboard();
	void DBD_CopyPartyIdToClipboard();
	void DBD_ContextSystemRequestTransition(uint32_t* ContextGroupUid, uint32_t* contextUId, int* transitionId);
	void DBD_ContextSystemRequestEnd(uint32_t* ContextGroupUid);
	void DBD_ConsumeLevelPerk(int* characterLevelReached);
	void DBD_ConsumeBloodwebs(int* initialLevel, int* Count);
	void DBD_CompleteEscapeRequirements();
	void DBD_ComeToMeMyChildren();
	void DBD_CloseVideo();
	void DBD_CloseSystemPromptAndResetStack();
	void DBD_CloseRTM();
	void DBD_ClearPotentialReferencesToChunksNotYetDownloaded();
	void DBD_ChangeVideoVolume(float* Volume);
	void DBD_ChangeVideoPlaybackMode(struct FString* Mode);
	void DBD_ChangeVideoMedia(struct FString* VideoID);
	void DBD_ChangeBaseUrlForSpecificEndpointAndRequestType(struct FString* Endpoint, struct FString* RequestType, struct FString* baseUrl);
	void DBD_CancelPartyInvite(struct FString* partyId, struct FString* cancelledPlayerId);
	void DBD_BuyBloodwebsLevel(int* initialLevel, int* Count);
	void DBD_BackToIIS();
	void DBD_AutoWiggle();
	void DBD_AsyncLoadItem(struct FName* ItemId);
	void DBD_ArchivesToggleNodeDebug();
	void DBD_ArchivesResetXpProgression();
	void DBD_ArchivesResetVignette(struct FString* storyId, struct FString* VignetteId);
	void DBD_ArchivesResetStory(struct FString* storyId, int* Level);
	void DBD_ArchivesResetStarProgression();
	void DBD_ArchivesResetPremiumPass();
	void DBD_ArchivesResetPopupSeenStatus(struct FString* archiveId);
	void DBD_ArchivesResetNode(struct FString* storyId, int* Level, struct FString* nodeID, bool* forceClose);
	void DBD_ArchivesResetJournal(struct FString* storyId);
	void DBD_ArchivesResetAll();
	void DBD_ArchivesMasterLevel(struct FString* storyId, int* Level, struct FString* nodeIdToExclude);
	void DBD_ArchivesJournalUnlockEntries(struct FString* storyId, struct FString* VignetteId, int* entriesToAdd);
	void DBD_ArchivesGetStoryIds();
	void DBD_ArchivesGetActiveNodesFromCache();
	void DBD_ArchivesForceFetchStoryIds();
	void DBD_ArchivesForceActivateNode(struct FString* storyId, int* Level, struct FString* nodeID);
	void DBD_ArchivesFetchActiveNodes();
	void DBD_ArchivesDisplayNodeStatus(struct FString* storyId, int* Level, struct FString* nodeID);
	void DBD_ArchivesCompleteJounal(struct FString* archiveId);
	void DBD_ArchivesAddXp(int* amountXp);
	void DBD_ArchivesAddTiers(int* amountTiers);
	void DBD_ArchivesAddStars(int* amountStars);
	void DBD_ArchivesAddProgressionToAllActiveNodes(int* progression);
	void DBD_ArchivesAddObjectiveProgression(struct FString* storyId, int* Level, struct FString* nodeID, struct FString* ObjectiveId, int* Progress);
	void DBD_ArchivesActivateNode(struct FString* storyId, int* Level, struct FString* nodeID);
	void DBD_ApplySameSurvivorSicknessStatusToKiller(bool* sameVisual);
	void DBD_AnalyticsProvidersForgetMe();
	void DBD_AnalyticsProvidersClearPersistentData();
	void DBD_AllowPalletPullUp(bool* allowPullUp);
	void DBD_AddToPlayerStat(struct FName* StatName, float* amount);
	void DBD_AddToCharacterStat(struct FName* StatName, float* amount);
	void DBD_AddSlasherPips(int* Count);
	void DBD_AddRecentlyPlayedWithPlayer(struct FString* playerKrakenId);
	void DBD_AddPips(int* camperPipCount, int* slasherPipCount, bool* forceReset);
	void DBD_AddPerkToInventory(struct FName* PerkId, int* Level);
	void DBD_AddPartyInviteToast(struct FString* partyId);
	void DBD_AddOfferingToInventory(struct FName* ItemId, int* amount);
	void DBD_AddOffering(struct FName* Name);
	void DBD_AddNotificationToast();
	void DBD_AddMadness(float* madnessToAdd);
	void DBD_AddLunarNewYearCoins(int* Count);
	void DBD_AddItemToInventory(struct FName* ItemId, int* amount);
	void DBD_AddItemAddonToInventory(struct FName* ItemAddonID, int* amount);
	void DBD_AddInvitationToast();
	void DBD_AddHP();
	void DBD_AddHalloweenCoins(int* Count);
	void DBD_AddHalloween2019Coins(int* Count);
	void DBD_AddFriend(struct FString* userKrakenID);
	void DBD_AddFearTokens(int* Count);
	void DBD_AddEverythingToInventory(int* amount);
	void DBD_AddCharacterExperience(int* amount);
	void DBD_AddCells(int* Count);
	void DBD_AddCamperPips(int* Count);
	void DBD_AddBloodPoints(int* Count);
	void DBD_AddAllPerksToInventory(int* Level);
	void DBD_AddAllItemsAddonsOfferingsToInventory(int* amount);
	void DBD_ActivateWeakenedMechanic(bool* On);
	void DBD_ActivateEscapeDoor();
	void DBD_AcceptRequestJoinParty(struct FString* playedId);
	void DBD_AcceptPartyInvite(struct FString* partyId);
};


// Class DeadByDaylight.DBDClientSyncer
// 0x01F8 (0x0538 - 0x0340)
class ADBDClientSyncer : public AActor
{
public:
	TArray<struct FSpawnInfo>                          _actorsToSpawnLocally;                                    // 0x0340(0x0010) (ZeroConstructor, Transient)
	TArray<struct FSpawnInfo>                          _currentQueue;                                            // 0x0350(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0360(0x0008) MISSED OFFSET
	class UPaperTileMap*                               _tileMap;                                                 // 0x0368(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C8];                                     // 0x0370(0x01C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDClientSyncer"));

		return ptr;
	}


	void Multicast_SyncSeed(int* Seed, class UPaperTileMap** TileMap, int* GenerationPlayerCount, struct FString* PremadeMap);
	void Multicast_SyncFinalLocallySpawnCount(int16_t* numLocal);
	void Multicast_SyncActorToSpawnLocally(TArray<struct FSpawnInfo>* spawnInfos, int16_t* startIndex);
};


// Class DeadByDaylight.DBDClipRegionComponent
// 0x0010 (0x0280 - 0x0270)
class UDBDClipRegionComponent : public UDBDLocatorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0270(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDClipRegionComponent"));

		return ptr;
	}


	void NotifyShouldClipComponent(class UMeshComponent** InMeshComponent);
	float ClipDistance(class UMeshComponent** InMeshComponent);
	void ApplyClipToDynamicMaterial(class UMaterialInstanceDynamic** dynamicInstanceToClip, int* InRegionID);
	void ApplyClip(class UMaterialInstanceDynamic** InMaterial2clip, int* InRegionID);
	void STATIC_ApplyArrayOfClipsToDynamicMaterial(TArray<class UDBDClipRegionComponent*>* InRegions, class UMaterialInstanceDynamic** dynamicInstanceToClip);
};


// Class DeadByDaylight.DBDCustomizationTool
// 0x0B00 (0x0E40 - 0x0340)
class ADBDCustomizationTool : public AActor
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0340(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDCustomizationTool.OverallLightingClass
	struct FDBDCustomizationToolData                   CustomizationData;                                        // 0x0370(0x0AB8) (Edit)
	TArray<class AActor*>                              _spawnedActors;                                           // 0x0E28(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0E38(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDCustomizationTool"));

		return ptr;
	}

};


// Class DeadByDaylight.RitualEvaluatorBase
// 0x0000 (0x0030 - 0x0030)
class URitualEvaluatorBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RitualEvaluatorBase"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDGameMode
// 0x0098 (0x0518 - 0x0480)
class ADBDGameMode : public ADBDBaseMatchGameMode
{
public:
	struct FScriptMulticastDelegate                    OnBlockCamperEscape;                                      // 0x0480(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayersLoadoutsCreated;                                 // 0x0490(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class APlayerStart*>                        _initialPlayerStarts;                                     // 0x04A0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x04B0(0x0050) MISSED OFFSET
	int                                                KillerCreationPositionOrder;                              // 0x0500(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               AllowSpecialEvent;                                        // 0x0504(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x0505(0x000B) MISSED OFFSET
	class UGameEventAnalyticsComponent*                _gameEventAnalyticsComponent;                             // 0x0510(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGameMode"));

		return ptr;
	}


	void SetEscapeOpened(bool* Val);
	void LevelLoaded(struct FString* LevelName);
	bool IsEscapeOpen();
	void HostGame();
	struct FTimespan GetElapsedMatchTime();
	void DBD_BlockCamperEscape(float* Duration);
	bool AreLoadoutsCreated();
};


// Class DeadByDaylight.DBDDebugGameMode
// 0x00C8 (0x05E0 - 0x0518)
class ADBDDebugGameMode : public ADBDGameMode
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0518(0x0008) MISSED OFFSET
	TMap<class ADBDPlayerController*, int>             LoadoutIndex;                                             // 0x0520(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0570(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.DBDDebugGameMode.PlayersWithItems
	TArray<struct FCamperLoadout>                      CamperPawnOverrides;                                      // 0x05C0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FSlasherLoadout>                     SlasherPawnOverrides;                                     // 0x05D0(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDDebugGameMode"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDDebugInputComponent
// 0x0028 (0x0128 - 0x0100)
class UDBDDebugInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0100(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDDebugInputComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.DBDDesignTunables
// 0x0208 (0x0238 - 0x0030)
class UDBDDesignTunables : public UObject
{
public:
	int                                                WinStreakThresholdLarge;                                  // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	int                                                WinStreakThresholdSmall;                                  // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxBloodpoints;                                           // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxFearTokens;                                            // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FPerkLevelDefinition>                PerkLevelDefinitions;                                     // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Config)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0050(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.DBDDesignTunables.MetaModifiers
	unsigned char                                      UnknownData01[0x50];                                      // 0x00A0(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.DBDDesignTunables.RangedSurvivorAuraPerceptionModifiers
	unsigned char                                      UnknownData02[0x50];                                      // 0x00F0(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.DBDDesignTunables.SurvivorRevelatoryAuraPerceptionModifiers
	unsigned char                                      UnknownData03[0x50];                                      // 0x0140(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.DBDDesignTunables.DisruptableAuraReadingFlags
	unsigned char                                      UnknownData04[0x30];                                      // 0x0190(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDDesignTunables.TextDesignTunableClass
	class UDBDTextDesignTunables*                      TextTunables;                                             // 0x01C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x30];                                      // 0x01C8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDDesignTunables.RankDesignTunableClass
	class UDBDRankDesignTunables*                      RankTunables;                                             // 0x01F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x30];                                      // 0x0200(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDDesignTunables.AtlantaDesignTunableClass
	class UDBDAtlantaDesignTunables*                   AtlantaDesignTunables;                                    // 0x0230(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDDesignTunables"));

		return ptr;
	}


	float GetTunableValue(struct FName* ID, bool* warnIfRowMissing);
};


// Class DeadByDaylight.DBDTextDesignTunables
// 0x00E8 (0x0118 - 0x0030)
class UDBDTextDesignTunables : public UObject
{
public:
	struct FString                                     creditsHtml;                                              // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Config)
	struct FText                                       LegalTextTitle;                                           // 0x0040(0x0018) (Edit, BlueprintVisible, Config)
	struct FText                                       LegalText;                                                // 0x0058(0x0018) (Edit, BlueprintVisible, Config)
	struct FText                                       ConsentTextTitle;                                         // 0x0070(0x0018) (Edit, BlueprintVisible, Config)
	struct FText                                       ConsentText;                                              // 0x0088(0x0018) (Edit, BlueprintVisible, Config)
	struct FText                                       LegalTextSIEA;                                            // 0x00A0(0x0018) (Edit, BlueprintVisible, Config)
	struct FText                                       LegalTextSIEE;                                            // 0x00B8(0x0018) (Edit, BlueprintVisible, Config)
	struct FText                                       SystemMessage_ChatDisconnected;                           // 0x00D0(0x0018) (Edit, BlueprintVisible, Config)
	struct FText                                       SystemMessage_ChatReturnedToLobby;                        // 0x00E8(0x0018) (Edit, BlueprintVisible, Config)
	struct FText                                       SystemMessage_ChatMatchServerClosed;                      // 0x0100(0x0018) (Edit, BlueprintVisible, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDTextDesignTunables"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDDiceRoller
// 0x0000 (0x0030 - 0x0030)
class UDBDDiceRoller : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDDiceRoller"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDEasyAntiCheat
// 0x0028 (0x0058 - 0x0030)
class UDBDEasyAntiCheat : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _connectedToServer;                                       // 0x0050(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEasyAntiCheat"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDEasyAntiCheatEnable
// 0x0098 (0x00F0 - 0x0058)
class UDBDEasyAntiCheatEnable : public UDBDEasyAntiCheat
{
public:
	unsigned char                                      UnknownData00[0x98];                                      // 0x0058(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEasyAntiCheatEnable"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDEasyAntiCheatLinux
// 0x0000 (0x00F0 - 0x00F0)
class UDBDEasyAntiCheatLinux : public UDBDEasyAntiCheatEnable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEasyAntiCheatLinux"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDEasyAntiCheatWindows
// 0x0000 (0x00F0 - 0x00F0)
class UDBDEasyAntiCheatWindows : public UDBDEasyAntiCheatEnable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEasyAntiCheatWindows"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDEmblem
// 0x0070 (0x00A0 - 0x0030)
class UDBDEmblem : public UObject
{
public:
	struct FName                                       EmblemId;                                                 // 0x0030(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0030(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	bool                                               CanTick;                                                  // 0x003C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x63];                                      // 0x003D(0x0063) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblem"));

		return ptr;
	}


	void OnPlayerGameplayEvent(EDBDScoreTypes* gameplayEventType, float* amount, class AActor** Instigator, class AActor** Target);
	void OnGameplayEvent(EDBDScoreTypes* gameplayEventType, float* amount, class AActor** Instigator, class AActor** Target);
	bool IsOwnerPlayer(class AActor** Actor);
	class UWorld* GetWorld();
	float GetProgress();
	EEmblemQuality GetEmblemQuality();
	int EvaluateEmblemQuality();
};


// Class DeadByDaylight.DBDEmblem_KillerGatekeeper
// 0x0030 (0x00D0 - 0x00A0)
class UDBDEmblem_KillerGatekeeper : public UDBDEmblem
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00A0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblem_KillerGatekeeper"));

		return ptr;
	}


	void OnPlayerGameplayEvent(EDBDScoreTypes* gameplayEventType, float* amount, class AActor** Instigator, class AActor** Target);
	void OnGameplayEvent(EDBDScoreTypes* gameplayEventType, float* amount, class AActor** Instigator, class AActor** Target);
	bool IsOwnerPlayer(class AActor** Actor);
	class UWorld* GetWorld();
	float GetProgress();
	EEmblemQuality GetEmblemQuality();
	int EvaluateEmblemQuality();
};


// Class DeadByDaylight.DBDEmblem_KillerGatekeeperTest
// 0x0008 (0x00D8 - 0x00D0)
class UDBDEmblem_KillerGatekeeperTest : public UDBDEmblem_KillerGatekeeper
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblem_KillerGatekeeperTest"));

		return ptr;
	}


	void OnPlayerGameplayEvent(EDBDScoreTypes* gameplayEventType, float* amount, class AActor** Instigator, class AActor** Target);
	void OnGameplayEvent(EDBDScoreTypes* gameplayEventType, float* amount, class AActor** Instigator, class AActor** Target);
	bool IsOwnerPlayer(class AActor** Actor);
	class UWorld* GetWorld();
	float GetProgress();
	EEmblemQuality GetEmblemQuality();
	int EvaluateEmblemQuality();
};


// Class DeadByDaylight.DBDEmblemEvaluatorComponent
// 0x0040 (0x0140 - 0x0100)
class UDBDEmblemEvaluatorComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET
	TArray<class UDBDEmblem*>                          _emblems;                                                 // 0x0130(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblemEvaluatorComponent"));

		return ptr;
	}


	void OnPlayerGameplayEvent(EDBDScoreTypes* scoreType, float* amount, class AActor** Instigator, class AActor** Target);
	void OnGameplayEvent(EDBDScoreTypes* scoreType, float* amount, class AActor** Instigator, class AActor** Target);
	void OnGameEvent(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
};


// Class DeadByDaylight.DBDEmblem_KillerChaser
// 0x00C0 (0x0160 - 0x00A0)
class UDBDEmblem_KillerChaser : public UDBDEmblem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A0(0x0008) MISSED OFFSET
	class UDBDGameInstance*                            _gameInstance;                                            // 0x00A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x40];                                      // 0x00B0(0x0040) MISSED OFFSET
	class UCurveFloat*                                 _chasePointsByDurationCurve;                              // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x00F8(0x0018) MISSED OFFSET
	TMap<class ACamperPlayer*, float>                  _hookedPlayersPenaltyDelay;                               // 0x0110(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblem_KillerChaser"));

		return ptr;
	}


	void OnChaseStart(class ADBDPlayer** chasedPlayer);
};


// Class DeadByDaylight.DBDEmblem_KillerDevout
// 0x0038 (0x00D8 - 0x00A0)
class UDBDEmblem_KillerDevout : public UDBDEmblem
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00A0(0x0020) MISSED OFFSET
	TArray<class ACamperPlayer*>                       _playersToHook;                                           // 0x00C0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblem_KillerDevout"));

		return ptr;
	}


	void OnPlayerDisconnect(class ADBDPlayer** Player);
};


// Class DeadByDaylight.DBDEmblem_KillerMalicious
// 0x0068 (0x0108 - 0x00A0)
class UDBDEmblem_KillerMalicious : public UDBDEmblem
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00A0(0x0010) MISSED OFFSET
	TMap<class ACamperPlayer*, int>                    _remainingSurvivorHookStates;                             // 0x00B0(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblem_KillerMalicious"));

		return ptr;
	}


	void OnPlayerDisconnect(class ADBDPlayer** Player);
};


// Class DeadByDaylight.DBDEmblem_SurvivorBenevolent
// 0x0068 (0x0108 - 0x00A0)
class UDBDEmblem_SurvivorBenevolent : public UDBDEmblem
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x00A0(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblem_SurvivorBenevolent"));

		return ptr;
	}


	void OnPlayerGameplayEvent(EDBDScoreTypes* gameplayEventType, float* amount, class AActor** Instigator, class AActor** Target);
	void OnGameplayEvent(EDBDScoreTypes* gameplayEventType, float* amount, class AActor** Instigator, class AActor** Target);
	bool IsOwnerPlayer(class AActor** Actor);
	class UWorld* GetWorld();
	float GetProgress();
	EEmblemQuality GetEmblemQuality();
	int EvaluateEmblemQuality();
};


// Class DeadByDaylight.DBDEmblem_SurvivorEvader
// 0x0070 (0x0110 - 0x00A0)
class UDBDEmblem_SurvivorEvader : public UDBDEmblem
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x00A0(0x0050) MISSED OFFSET
	class UCurveFloat*                                 _killerDistanceStealthPointCurve;                         // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 _killerDistanceStealthPointCurveChasing;                  // 0x00F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 _chaseDurationPointCurve;                                 // 0x0100(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 _ZAxisDistanceScalingCurve;                               // 0x0108(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblem_SurvivorEvader"));

		return ptr;
	}


	void OnChaseStartEvent(class ADBDPlayer** chasedPlayer);
};


// Class DeadByDaylight.DBDEmblem_SurvivorLightbringer
// 0x0080 (0x0120 - 0x00A0)
class UDBDEmblem_SurvivorLightbringer : public UDBDEmblem
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x00A0(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblem_SurvivorLightbringer"));

		return ptr;
	}


	void OnPlayerGameplayEvent(EDBDScoreTypes* gameplayEventType, float* amount, class AActor** Instigator, class AActor** Target);
	void OnGameplayEvent(EDBDScoreTypes* gameplayEventType, float* amount, class AActor** Instigator, class AActor** Target);
	bool IsOwnerPlayer(class AActor** Actor);
	class UWorld* GetWorld();
	float GetProgress();
	EEmblemQuality GetEmblemQuality();
	int EvaluateEmblemQuality();
};


// Class DeadByDaylight.DBDEmblem_SurvivorUnbroken
// 0x0028 (0x00C8 - 0x00A0)
class UDBDEmblem_SurvivorUnbroken : public UDBDEmblem
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00A0(0x0010) MISSED OFFSET
	class UCurveFloat*                                 _pointsForTimeAlive;                                      // 0x00B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00B8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEmblem_SurvivorUnbroken"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDEngineUtils
// 0x0000 (0x0030 - 0x0030)
class UDBDEngineUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDEngineUtils"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDGame_Lobby
// 0x0028 (0x0490 - 0x0468)
class ADBDGame_Lobby : public ADBDBaseGameMode
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0468(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGame_Lobby"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDGame_Menu
// 0x0030 (0x0498 - 0x0468)
class ADBDGame_Menu : public ADBDBaseGameMode
{
public:
	bool                                               StartWithSlasher;                                         // 0x0468(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0469(0x0007) MISSED OFFSET
	class UAtlantaPartyFlowHandler*                    _partyFlowHandler;                                        // 0x0470(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0478(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGame_Menu"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDGame_Start
// 0x0140 (0x05A8 - 0x0468)
class ADBDGame_Start : public ADBDBaseGameMode
{
public:
	unsigned char                                      UnknownData00[0x140];                                     // 0x0468(0x0140) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGame_Start"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDGameEngine
// 0x0008 (0x0F10 - 0x0F08)
class UDBDGameEngine : public UGameEngine
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0F08(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGameEngine"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDGameEventUtilities
// 0x0000 (0x0030 - 0x0030)
class UDBDGameEventUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGameEventUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDGameFlowUtilities
// 0x0000 (0x0030 - 0x0030)
class UDBDGameFlowUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGameFlowUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDGameInstance
// 0x1C48 (0x1E08 - 0x01C0)
class UDBDGameInstance : public UGameInstance
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01C0(0x0008) MISSED OFFSET
	class UClass*                                      DesignTunableClass;                                       // 0x01C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData)
	class UDBDDesignTunables*                          DesignTunables;                                           // 0x01D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      RegionClass;                                              // 0x01D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      ShopManagerClass;                                         // 0x01E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      FriendManagerClass;                                       // 0x01E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UGameEventTracker*                           GameEventTracker;                                         // 0x01F0(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UDBDKeyDisplayInfo*                          KeyDisplayInfo;                                           // 0x01F8(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               LeaveGameRequested;                                       // 0x0200(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0201(0x0007) MISSED OFFSET
	class UPlayerProfileDAL*                           PlayerProfileDAL;                                         // 0x0208(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class AProceduralLevelBuilder>      Builder;                                                  // 0x0210(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                GenerationSeed;                                           // 0x0218(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	struct FString                                     PaperTileAssetName;                                       // 0x0220(0x0010) (ZeroConstructor, Transient)
	int                                                GenerationPlayerCount;                                    // 0x0230(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0234(0x0004) MISSED OFFSET
	struct FString                                     PremadeMap;                                               // 0x0238(0x0010) (ZeroConstructor, Transient)
	TArray<struct FForceSpawnTileData>                 ForceSpawnTileData;                                       // 0x0248(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0258(0x0018) MISSED OFFSET
	class AOfferingSequenceManager*                    OfferingSequence;                                         // 0x0270(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FParadiseData>                       ParadiseData;                                             // 0x0278(0x0010) (ZeroConstructor)
	bool                                               PlayerProfileLoadFailed;                                  // 0x0288(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               SeasonEnded;                                              // 0x0289(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x028A(0x0006) MISSED OFFSET
	TArray<struct FString>                             ReportedPlayers;                                          // 0x0290(0x0010) (ZeroConstructor)
	int                                                MatchRateValue;                                           // 0x02A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	class UNewsContentManager*                         NewsContentManager;                                       // 0x02A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UContentScheduleManager*                     ContentScheduleManager;                                   // 0x02B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCDNPatchManager*                            CDNPatchManager;                                          // 0x02B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCharacterProgressionManager*                CharacterProgressionManager;                              // 0x02C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCharacterXPManager*                         CharacterXPManager;                                       // 0x02C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     AuthOrEACErrorAdditionalInfo;                             // 0x02D0(0x0010) (ZeroConstructor, Transient)
	bool                                               HasServerLeftMatch;                                       // 0x02E0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               HasWrittenGameEndStats;                                   // 0x02E1(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x6];                                       // 0x02E2(0x0006) MISSED OFFSET
	class UFearMarketManager*                          FearMarketManager;                                        // 0x02E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UShopManager*                                ShopManager;                                              // 0x02F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UFriendManager*                              FriendManager;                                            // 0x02F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UWalletHandler*                              WalletHandler;                                            // 0x0300(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       TutorialRequesterName;                                    // 0x0308(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0308(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData09[0x4];                                       // 0x0314(0x0004) MISSED OFFSET
	class UControllerPairingManager*                   ControllerPairingManager;                                 // 0x0318(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0xD8];                                      // 0x0320(0x00D8) MISSED OFFSET
	class UChunkingManager*                            ChunkingManager;                                          // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPlayerDisconnect;                                       // 0x0400(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0x28];                                      // 0x0410(0x0028) MISSED OFFSET
	class UAssetLibraryManager*                        _assetLibraryManager;                                     // 0x0438(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x30];                                      // 0x0440(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DBDGameInstance._bloodwebManagerClass
	unsigned char                                      UnknownData13[0xD0];                                      // 0x0470(0x00D0) MISSED OFFSET
	class UGameFlowHandler*                            _gameFlowHandler;                                         // 0x0540(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0548(0x0008) MISSED OFFSET
	class UGameFlowContextSystem*                      _contextSystem;                                           // 0x0550(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDPersistentData*                          _persistentData;                                          // 0x0558(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPlayerDataStorageFacade*                    _playerDataFacade;                                        // 0x0560(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UGameOn*                                     _gameOn;                                                  // 0x0568(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class URankManager*                                _rankManager;                                             // 0x0570(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDPlayerLevelManager*                      _playerLevelManager;                                      // 0x0578(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USpecialEventManager*                        _specialEventManager;                                     // 0x0580(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBonusPointEventsManager*                    _bonusPointEventsManager;                                 // 0x0588(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDTimeTravelManager*                       _timeTravelManager;                                       // 0x0590(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UToastManager*                               _toastManager;                                            // 0x0598(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDSocialNotificationFactory*               _socialNotificationFactory;                               // 0x05A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDPartyFacade*                             _partyFacade;                                             // 0x05A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0x8];                                       // 0x05B0(0x0008) MISSED OFFSET
	class UPenaltyTracker*                             _penaltyTracker;                                          // 0x05B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x28];                                      // 0x05C0(0x0028) MISSED OFFSET
	class ULightingHelper*                             _ligthingHelper;                                          // 0x05E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UOfferingHandler*                            _offeringHandler;                                         // 0x05F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0x8];                                       // 0x05F8(0x0008) MISSED OFFSET
	TArray<class UActorKnowledgeCollection*>           _actorKnowledgeCollections;                               // 0x0600(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UMapActorDB*                                 _mapActorDB;                                              // 0x0610(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UInteractionProficiency*>             _interactionProficiencies;                                // 0x0618(0x0010) (ZeroConstructor, Transient)
	class UDBDHud*                                     _theHud;                                                  // 0x0628(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData18[0x28];                                      // 0x0630(0x0028) MISSED OFFSET
	class UBloodwebManager*                            BloodwebManager;                                          // 0x0658(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPopupSequencer*                             _popupSequencer;                                          // 0x0660(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPopupFactory*                               _popupFactory;                                            // 0x0668(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDAuthentication*                          _auth;                                                    // 0x0670(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDEasyAntiCheat*                           _eac;                                                     // 0x0678(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDTimeUtilities*                           _timeUtilities;                                           // 0x0680(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData19[0xD0];                                      // 0x0688(0x00D0) MISSED OFFSET
	TArray<TWeakObjectPtr<class UObject>>              _execObjects;                                             // 0x0758(0x0010) (ZeroConstructor, Transient)
	bool                                               _networkFailureDetected;                                  // 0x0768(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _networkConnectionMonitoringOnly;                         // 0x0769(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _achievementStatsUploadEnabled;                           // 0x076A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isDisconnected;                                          // 0x076B(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isMirrorsSessionKilled;                                  // 0x076C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isGamepadReconnected;                                    // 0x076D(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isProfileOffline;                                        // 0x076E(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isAppSuspended;                                          // 0x076F(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isAppResumed;                                            // 0x0770(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isInvitationRejected;                                    // 0x0771(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isAdditionalContentInstalled;                            // 0x0772(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isCloudInventoryInitialized;                             // 0x0773(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData20[0x1614];                                    // 0x0774(0x1614) MISSED OFFSET
	class UPerformanceDataAccumulator*                 _performanceDataAccumulator;                              // 0x1D88(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UOfferingEffectCollection*                   _resultEffects;                                           // 0x1D90(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UInventoryHandler*                           _inventoryHandler;                                        // 0x1D98(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UGameEventDispatcher*                        _gameEventDispatcher;                                     // 0x1DA0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULocalEventManager*                          _localEventManager;                                       // 0x1DA8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPlayerReportManager*                        _playerReportManager;                                     // 0x1DB0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCinematicManager*                           _cinematicManager;                                        // 0x1DB8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USoftBanManager*                             _softBanManager;                                          // 0x1DC0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UConsentManager*                             _consentManager;                                          // 0x1DC8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UOnlineSystemHandler*                        _onlineSystemHandler;                                     // 0x1DD0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDedicatedServerManager*                     _dedicatedServerManager;                                  // 0x1DD8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USoundBankLoader*                            _soundBankLoader;                                         // 0x1DE0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class URegionFinder*                               _regionFinder;                                            // 0x1DE8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDecalSpawnerCollection*                     _decalSpawnerCollection;                                  // 0x1DF0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPrimitiveCollection*                        _characterClippingPrimitiveCollection;                    // 0x1DF8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	uint32_t                                           LastProviderErrorCode;                                    // 0x1E00(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	EDisconnectErrors                                  _disconnectError;                                         // 0x1E04(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x1E05(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGameInstance"));

		return ptr;
	}


	void StartOfferingSequence();
	void SimulatePerk(TArray<struct FName>* Perks, int* Level);
	void SimulateOfferingSequence(TArray<struct FName>* offerings, bool* playSequence);
	void RemoveActorKnowledgeCollection(class UActorKnowledgeCollection** Collection);
	void OnTimeTravelComplete(bool* success, struct FString* date);
	bool IsActorKnown(class ADBDPlayer** knowledgePossessor, class AActor** possiblyKnownActor);
	bool HasOfferingOfType(EOfferingEffectType* Type, int* playerID, struct FName* Tag);
	void GotoSplashScreen(bool* showDefaultDialogueOnSplashScreen);
	class USpecialEventManager* GetSpecialEventManager();
	class USoftBanManager* GetSoftBanManager();
	class URankManager* GetRankManager();
	class UDBDPlayerLevelManager* GetPlayerLevelManager();
	int GetMaxSurvivorCount();
	class UMapActorDB* GetMapActorDB();
	class APlayerController* GetLocalPlayerController();
	class ULocalPlayer* GetLocalPlayer();
	class ADBDPlayer* GetLocallyControlledCharacter();
	class ULocalEventManager* GetLocalEventManager();
	class ULightingInterpolator* GetLightInterpolator();
	class ULightingHelper* GetLightingHelper();
	class ABaseSky* GetLevelLighting();
	class UInventoryHandler* GetInventoryHandler();
	TArray<class ACamperPlayer*> GetInGameSurvivors();
	TArray<class ADBDPlayer*> GetInGamePlayers();
	TArray<class ASlasherPlayer*> GetInGameKillers();
	class ASlasherPlayer* GetInGameKiller();
	void GetInGameAliveSurvivors(TArray<class ACamperPlayer*>* outPlayingSurvivors);
	class UGameOn* GetGameOn();
	class UGameEventDispatcher* GetGameEventDispatcher();
	class UDecalSpawnerCollection* GetDecalSpawnerCollection();
	int GetDeadOrDisconnectedCampersCount(class ADBDPlayerState** exception);
	class UConsentManager* GetConsentManager();
	class UCinematicManager* GetCinematicManager();
	struct FName GetCharacterDefaultItem(int* inCharacterIndex);
	class UPrimitiveCollection* GetCharacterClippingPrimitiveCollection();
	class UBonusPointEventsManager* GetBonusPointEventsManager();
	void GenerateBloodWebForCurrentCharacter();
	void STATIC_ForceCloseGame();
	void FireSoundEvent(class AActor** Instigator, struct FVector* Location, bool* shouldTrack, float* audibleRange, class ADBDPlayer** instigatingPlayer, bool* isQuickAction);
	void EndLoadingScreen(class UWorld** loadedWorld);
	void DBDToggleLightingLoaded();
	void DBDResetSaveData();
	void DBDLogFindSessions(int* searchType, int* Rank, bool* ignoreVersion);
	void DBDForceSave();
	void DBDForceLoad();
	void DBDDeleteLocalSaveFile();
	void DBDApplyOfferingModification(float* fogModifier);
	void DBD_UpdateSteamInventory();
	void DBD_ToggleOnlineRole();
	void DBD_TestTickedDiceRoll(float* BaseProbability, float* ticks, float* MultiplicativeModifier, float* AdditiveModifier);
	void DBD_TestSaveFile(struct FString* Name);
	void DBD_TestRegion();
	void DBD_TestDiceRoll(float* BaseProbability, float* MultiplicativeModifier, float* AdditiveModifier);
	void DBD_SetStatsUploadEnabled(bool* Enabled);
	void DBD_SetFearMarketDate(struct FString* dateString);
	void DBD_SetCursorStickySpeed(float* value);
	void DBD_SetCursorStickIgnore(float* value);
	void DBD_SetCursorDefaultSpeed(float* value);
	void DBD_SendFriendInvite();
	void DBD_ResetSaveGameInventory();
	void DBD_ResetCurrentAchievementStats(bool* andUpload, bool* andUpdateData);
	void DBD_ResetCurrentAchievementStat(struct FName* StatName, bool* andUpload);
	void DBD_ResetAllRituals();
	void DBD_RemoveRitual(struct FName* toRemove);
	void DBD_PrintAudioConfig();
	void DBD_PIXEndCapture();
	void DBD_PIXBeginCapture();
	void DBD_LogBloodWebDefinition();
	void DBD_GetRegion();
	void DBD_GenerateNewRitual(struct FName* Name);
	void DBD_GenerateNewRandomRitual();
	void DBD_GenerateBloodWeb(int* Level);
	void DBD_DumpSessions();
	void DBD_DisplayCurrentAchievementStat(struct FName* StatName);
	void DBD_DestroySteamInventory();
	void DBD_ClaimRitualRewardAtIndex(int* Index);
	void DBD_ClaimRitualReward(struct FName* Name);
	void DBD_CheckForNewContent(struct FString* debugGameVersion, bool* forceDisplay);
	void DBD_ChangeSteamOverlayPosition(int* Position, int* VerticalOffset, int* horizontalOffset);
	void DBD_AssignNewRitual();
	void DBD_AnalyticsTest();
	void DBD_AnalyticsReset();
	void DBD_AddToRitual(int* Index, float* value);
	void DBD_AddToAchievementStat(struct FName* StatName, float* amount);
	void BeginLoadingScreen(struct FString* MapName);
	void AddActorKnowledgeCollection(class UActorKnowledgeCollection** Collection);
};


// Class DeadByDaylight.DBDGameSession
// 0x0068 (0x03C8 - 0x0360)
class ADBDGameSession : public AGameSession
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0360(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGameSession"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDGameUserSettings
// 0x00B8 (0x01D8 - 0x0120)
class UDBDGameUserSettings : public UGameUserSettings
{
public:
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                           // 0x0120(0x0010) (ZeroConstructor, Config)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                             // 0x0130(0x0010) (ZeroConstructor, Config)
	struct FString                                     DeviceLoginTokenID;                                       // 0x0140(0x0010) (ZeroConstructor, Config)
	int                                                ScreenScaleForWindowedMode;                               // 0x0150(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                ScalabilityLevel;                                         // 0x0154(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               AutoAdjust;                                               // 0x0158(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	int                                                ScreenResolution;                                         // 0x015C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               FullScreen;                                               // 0x0160(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	int                                                MainVolume;                                               // 0x0164(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MenuMusicVolume;                                          // 0x0168(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               UseHeadphones;                                            // 0x016C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               HideTutorial;                                             // 0x016D(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               MuteOnFocusLost;                                          // 0x016E(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x016F(0x0001) MISSED OFFSET
	int                                                KillerCameraSensitivity;                                  // 0x0170(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                SurvivorCameraSensitivity;                                // 0x0174(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                KillerMuseSensitivity;                                    // 0x0178(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                SurvivorMuseSensitivity;                                  // 0x017C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                KillerControllerSensitivity;                              // 0x0180(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                SurvivorControllerSensitivity;                            // 0x0184(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               AimAssist;                                                // 0x0188(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0189(0x0003) MISSED OFFSET
	int                                                HandSide;                                                 // 0x018C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                InteractionButton;                                        // 0x0190(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               InvertY;                                                  // 0x0194(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0195(0x0003) MISSED OFFSET
	struct FString                                     Language;                                                 // 0x0198(0x0010) (ZeroConstructor, Config)
	int                                                HighestWeightSeenNews;                                    // 0x01A8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	struct FSharedAuthenticationTokenInformation       SharedLoginInformation;                                   // 0x01B0(0x0020) (Config)
	uint32_t                                           LastPanelContextId;                                       // 0x01D0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               ArchivesAutoPlayVoiceOver;                                // 0x01D4(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               HasAcceptedCrossplayPopup;                                // 0x01D5(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x01D6(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGameUserSettings"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDGameViewportClient
// 0x0038 (0x0330 - 0x02F8)
class UDBDGameViewportClient : public UGameViewportClient
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x02F8(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDGameViewportClient"));

		return ptr;
	}


	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int* PlayerIndex);
};


// Class DeadByDaylight.DBDHud
// 0x0050 (0x0080 - 0x0030)
class UDBDHud : public UObject
{
public:
	TMap<struct FName, class AStatusView*>             _statusViews;                                             // 0x0030(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDHud"));

		return ptr;
	}


	void RemoveStatusViewOnDestroy(class AActor** Actor);
};


// Class DeadByDaylight.DBDInGameHud
// 0x0020 (0x0460 - 0x0440)
class ADBDInGameHud : public ADBDBaseHud
{
public:
	class UFont*                                       _proceduralDebugFontObj;                                  // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0448(0x0010) MISSED OFFSET
	class UCompetenceDebugger*                         _competenceDebugger;                                      // 0x0458(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDInGameHud"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDKeyDisplayInfo
// 0x0158 (0x0188 - 0x0030)
class UDBDKeyDisplayInfo : public UObject
{
public:
	struct FString                                     PendingResetKeyBindingsData;                              // 0x0030(0x0010) (ZeroConstructor)
	bool                                               PendingResetMustBeGamepadKey;                             // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	TMap<struct FName, struct FKeyDisplayInfo>         _keyDisplayInfoMap;                                       // 0x0048(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0098(0x0050) MISSED OFFSET
	TMap<EInputInteractionType, struct FName>          _interactionTypeToActionMap_Camper;                       // 0x00E8(0x0050) (ZeroConstructor)
	TMap<EInputInteractionType, struct FName>          _interactionTypeToActionMap_Slasher;                      // 0x0138(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDKeyDisplayInfo"));

		return ptr;
	}


	bool IsExcludedKey(struct FKey* Key);
	struct FKeyDisplayInfo GetKeyDisplayInfoForInteractionType(class UPlayerInput** PlayerInput, EPlayerRole* PlayerRole, EInputInteractionType* InteractionType, bool* useGamePad);
	struct FKeyDisplayInfo GetKeyDisplayInfo(struct FKey* Key);
	struct FKey GetFirstKeyForAction(class UPlayerInput** PlayerInput, struct FName* ActionName, bool* useGamePad);
	struct FName GetActionForInteractionType(EPlayerRole* PlayerRole, EInputInteractionType* inputInteractionType, bool* useGamePad, bool* ignoreInteractMash);
};


// Class DeadByDaylight.DBDLobbyHud
// 0x0000 (0x0440 - 0x0440)
class ADBDLobbyHud : public ADBDBaseHud
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDLobbyHud"));

		return ptr;
	}


	void ShowAnimHudBP();
	void ShowAnimHud(bool* show);
	bool ShouldDrawAnimHud();
};


// Class DeadByDaylight.DBDLocalPlayer
// 0x0000 (0x0290 - 0x0290)
class UDBDLocalPlayer : public ULocalPlayer
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDLocalPlayer"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDMaterialBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UDBDMaterialBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDMaterialBlueprintLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDMathBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UDBDMathBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDMathBlueprintLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDHookUtilities
// 0x0000 (0x0030 - 0x0030)
class UDBDHookUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDHookUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDMenuPlayer
// 0x00C0 (0x0850 - 0x0790)
class ADBDMenuPlayer : public ADBDBasePlayer
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0790(0x0028) MISSED OFFSET
	bool                                               RoleSelected;                                             // 0x07B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               IsOnline;                                                 // 0x07B9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x07BA(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnItemEquipped;                                           // 0x07C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x30];                                      // 0x07D0(0x0030) UNKNOWN PROPERTY: SoftObjectProperty DeadByDaylight.DBDMenuPlayer.DarkMaterial
	EItemHandPosition                                  _handPosition;                                            // 0x0800(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0801(0x0007) MISSED OFFSET
	class USkeletalMeshComponent*                      ItemMesh;                                                 // 0x0808(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UMaterialHelper*                             MaterialHelper;                                           // 0x0810(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       _equippedItemName;                                        // 0x0818(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0818(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData05[0x2C];                                      // 0x0824(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDMenuPlayer"));

		return ptr;
	}


	void WrappedOnDestroyed(class AActor** DestroyedActor);
	bool ShouldShowSpawnAnimation();
	bool ShouldApplyPositionOffset();
	void RestartInSequence_Internal();
	void OnCustomizationTransactionCompleted(ECustomizationCategory* Category);
	EItemHandPosition GetHandPosition();
	class UCharmSpawnerComponent* GetCharmSpawnerComponent();
	void BeginDestroySequence_Internal();
	void BeginCreateSequence();
};


// Class DeadByDaylight.DBDMenuSilhouette
// 0x0000 (0x0340 - 0x0340)
class ADBDMenuSilhouette : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDMenuSilhouette"));

		return ptr;
	}


	bool WasRecentlyRendered(float* Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor** InParentActor, struct FName* InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetReplicates(bool* bInReplicates);
	void SetReplicateMovement(bool* bInReplicateMovement);
	void SetOwner(class AActor** NewOwner);
	void SetNetDormancy(TEnumAsByte<ENetDormancy>* NewDormancy);
	void SetLifeSpan(float* InLifespan);
	void SetActorTickInterval(float* TickInterval);
	void SetActorTickEnabled(bool* bEnabled);
	void SetActorScale3D(struct FVector* NewScale3D);
	void SetActorRelativeScale3D(struct FVector* NewRelativeScale);
	void SetActorHiddenInGame(bool* bNewHidden);
	void SetActorEnableCollision(bool* bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveRadialDamage(float* DamageReceived, class UDamageType** DamageType, struct FVector* Origin, struct FHitResult* HitInfo, class AController** InstigatedBy, class AActor** DamageCauser);
	void ReceivePointDamage(float* Damage, class UDamageType** DamageType, struct FVector* HitLocation, struct FVector* HitNormal, class UPrimitiveComponent** HitComponent, struct FName* BoneName, struct FVector* ShotFromDirection, class AController** InstigatedBy, class AActor** DamageCauser, struct FHitResult* HitInfo);
	void ReceiveHit(class UPrimitiveComponent** MyComp, class AActor** Other, class UPrimitiveComponent** OtherComp, bool* bSelfMoved, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* NormalImpulse, struct FHitResult* Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float* Damage, class UDamageType** DamageType, class AController** InstigatedBy, class AActor** DamageCauser);
	void ReceiveActorOnReleased(struct FKey* ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnClicked(struct FKey* ButtonPressed);
	void ReceiveActorEndOverlap(class AActor** OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor** OtherActor);
	void ReceiveActorBeginCursorOver();
	void PrestreamTextures(float* Seconds, bool* bEnableStreaming, int* CinematicTextureGroups);
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float* Loudness, class APawn** NoiseInstigator, struct FVector* NoiseLocation, float* MaxRange, struct FName* Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface** Parent);
	bool K2_TeleportTo(struct FVector* DestLocation, struct FRotator* DestRotation);
	bool K2_SetActorTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(struct FRotator* NewRotation, bool* bTeleportPhysics);
	void K2_SetActorRelativeTransform(struct FTransform* NewRelativeTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(struct FRotator* NewRelativeRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(struct FVector* NewRelativeLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController** PC);
	void K2_OnBecomeViewTarget(class APlayerController** PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor(EDetachmentRule* LocationRule, EDetachmentRule* RotationRule, EDetachmentRule* ScaleRule);
	void K2_DestroyComponent(class UActorComponent** Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent** Parent, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor** ParentActor, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor** InParentActor, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachLocationType, bool* bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent** InParent, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachLocationType, bool* bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor** Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor** OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor** OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass** ClassFilter, TArray<class AActor*>* OverlappingActors);
	TEnumAsByte<ENetRole> GetLocalRole();
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(struct FKey* InputAxisKey);
	float GetInputAxisValue(struct FName* InputAxisName);
	float GetInputAxisKeyValue(struct FKey* InputAxisKey);
	float GetHorizontalDotProductTo(class AActor** OtherActor);
	float GetHorizontalDistanceTo(class AActor** OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor** OtherActor);
	float GetDistanceTo(class AActor** OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass** ComponentClass, struct FName* Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass** ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass** ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool* bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool* bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController** PlayerController);
	void DisableInput(class APlayerController** PlayerController);
	void DetachRootComponentFromParent(bool* bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	class UActorComponent* AddComponent(struct FName* TemplateName, bool* bManualAttachment, struct FTransform* RelativeTransform, class UObject** ComponentTemplateContext);
	bool ActorHasTag(struct FName* Tag);
};


// Class DeadByDaylight.DBDMistLocatorComponent
// 0x0000 (0x0270 - 0x0270)
class UDBDMistLocatorComponent : public UDBDLocatorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDMistLocatorComponent"));

		return ptr;
	}


	void ToggleVisibility(bool* bPropagateToChildren);
	bool SnapTo(class USceneComponent** InParent, struct FName* InSocketName);
	void SetWorldScale3D(struct FVector* NewScale);
	void SetVisibility(bool* bNewVisibility, bool* bPropagateToChildren);
	void SetSkipComponentAndChildrenTransformUpdate(bool* value);
	void SetShouldUpdatePhysicsVolume(bool* bInShouldUpdatePhysicsVolume);
	void SetRelativeScale3D(struct FVector* NewScale3D);
	void SetMobility(TEnumAsByte<EComponentMobility>* NewMobility);
	void SetHiddenInGame(bool* NewHidden, bool* bPropagateToChildren);
	void SetAbsolute(bool* bNewAbsoluteLocation, bool* bNewAbsoluteRotation, bool* bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool* oldValue);
	void OnRep_Transform();
	void OnRep_RelativeRotation();
	void OnRep_RelativeLocation();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldRotation(struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeRotation(struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(EDetachmentRule* LocationRule, EDetachmentRule* RotationRule, EDetachmentRule* ScaleRule, bool* bCallModify);
	bool K2_AttachToComponent(class USceneComponent** Parent, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent** InParent, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachType, bool* bWeldSimulatedBodies);
	void K2_AddWorldTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeLocation(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(struct FName* BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(struct FName* InSocketName, TEnumAsByte<ERelativeTransformSpace>* TransformSpace);
	struct FRotator GetSocketRotation(struct FName* InSocketName);
	struct FQuat GetSocketQuaternion(struct FName* InSocketName);
	struct FVector GetSocketLocation(struct FName* InSocketName);
	bool GetSkipComponentAndChildrenTransformUpdate();
	bool GetShouldUpdatePhysicsVolume();
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool* bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int* ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(struct FName* InSocketName);
	void DetachFromParent(bool* bMaintainWorldPosition, bool* bCallModify);
};


// Class DeadByDaylight.DBDMistManager
// 0x0008 (0x0348 - 0x0340)
class ADBDMistManager : public AActor
{
public:
	class UDBDAggregateParticleSystemComponent*        _particleSystemComp;                                      // 0x0340(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDMistManager"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDNetworkUtilities
// 0x0000 (0x0030 - 0x0030)
class UDBDNetworkUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDNetworkUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDObserverPlayer
// 0x0030 (0x0790 - 0x0760)
class ADBDObserverPlayer : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0760(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDObserverPlayer"));

		return ptr;
	}


	void Server_PlayerReady();
};


// Class DeadByDaylight.DBDOnlineSessionClient
// 0x0180 (0x0318 - 0x0198)
class UDBDOnlineSessionClient : public UOnlineSessionClient
{
public:
	unsigned char                                      UnknownData00[0x180];                                     // 0x0198(0x0180) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDOnlineSessionClient"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDOutlineComponent
// 0x00A0 (0x0380 - 0x02E0)
class UDBDOutlineComponent : public UBatchMeshCommands
{
public:
	float                                              InterpolationSpeed;                                       // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldBeAboveOutlines;                                    // 0x02E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               LimitToCustomDepthObjects;                                // 0x02E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02E6(0x0002) MISSED OFFSET
	struct FString                                     OutlineName;                                              // 0x02E8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x02F8(0x0050) MISSED OFFSET
	struct FDBDOutlineRenderStrategySelector           _renderStrategySelector;                                  // 0x0348(0x0010) (Transient)
	class UBatchMeshCommands*                          _batchMeshCommands;                                       // 0x0358(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0360(0x0010) MISSED OFFSET
	class UBaseOutlineRenderStrategy*                  _renderingStrategy;                                       // 0x0370(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0378(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDOutlineComponent"));

		return ptr;
	}


	void SetTargetColor(struct FLinearColor* Color);
	void SetOutlineIntensity(float* outlineIntensity);
	void SetMinimumOutlineDistance(float* Distance);
	void SetFadeTexture(class UTexture** inFadeTexture);
	void SetFadeIntensity(float* fadeIntensity);
	void RefreshOutlineComponent();
};


// Class DeadByDaylight.DBDOutlineComponentConfiguration
// 0x00A8 (0x00E0 - 0x0038)
class UDBDOutlineComponentConfiguration : public UDataAsset
{
public:
	TMap<class UClass*, struct FOutlineConfiguration>  OutlineConfigurations;                                    // 0x0038(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FName, struct FOutlineColourConfiguration> OutlineColours;                                           // 0x0088(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInterface*                          OutlineMaterial;                                          // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDOutlineComponentConfiguration"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDOutlineComponentCustomDepthConfiguration
// 0x0000 (0x00E0 - 0x00E0)
class UDBDOutlineComponentCustomDepthConfiguration : public UDBDOutlineComponentConfiguration
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDOutlineComponentCustomDepthConfiguration"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDOutlineComponentTranslucentConfiguration
// 0x0010 (0x00F0 - 0x00E0)
class UDBDOutlineComponentTranslucentConfiguration : public UDBDOutlineComponentConfiguration
{
public:
	TArray<class UMaterialInterface*>                  DefaultTranslucencyMaterials;                             // 0x00E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDOutlineComponentTranslucentConfiguration"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDParadiseGameMode
// 0x0000 (0x0468 - 0x0468)
class ADBDParadiseGameMode : public ADBDBaseGameMode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDParadiseGameMode"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDPartyFacade
// 0x0010 (0x0388 - 0x0378)
class UDBDPartyFacade : public UPartyFacade
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0378(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPartyFacade"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDPawnSensingComponent
// 0x0008 (0x0150 - 0x0148)
class UDBDPawnSensingComponent : public UPawnSensingComponent
{
public:
	bool                                               bSenseEverywhere;                                         // 0x0148(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0149(0x0003) MISSED OFFSET
	float                                              PartiallyHiddenSensingDistance;                           // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPawnSensingComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDPersistentData
// 0x0D00 (0x0D30 - 0x0030)
class UDBDPersistentData : public UObject
{
public:
	struct FGamePersistentData                         _gamePersistentData;                                      // 0x0030(0x00E0) (Transient)
	TArray<struct FString>                             _keepDataIDs;                                             // 0x0110(0x0010) (ZeroConstructor, Transient)
	TMap<struct FString, struct FPlayerPersistentData> _playerIdToPersistentDataMap;                             // 0x0120(0x0050) (ZeroConstructor, Transient)
	struct FPlayerPersistentData                       _localPlayerPersistentData;                               // 0x0170(0x06D8) (Transient)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0848(0x0050) MISSED OFFSET
	TArray<struct FCloudInventoryItem>                 _cloudInventory;                                          // 0x0898(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x488];                                     // 0x08A8(0x0488) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPersistentData"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDPlayerCameraManager
// 0x0000 (0x2670 - 0x2670)
class ADBDPlayerCameraManager : public APlayerCameraManager
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerCameraManager"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDPlayerControllerBase
// 0x00A0 (0x0730 - 0x0690)
class ADBDPlayerControllerBase : public APlayerController
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0690(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerControllerBase"));

		return ptr;
	}


	bool WasInputKeyJustReleased(struct FKey* Key);
	bool WasInputKeyJustPressed(struct FKey* Key);
	void ToggleSpeaking(bool* bInSpeaking);
	void SwitchLevel(struct FString* URL);
	void StopHapticEffect(EControllerHand* Hand);
	void StartFire(unsigned char* FireModeNum);
	void SetVirtualJoystickVisibility(bool* bVisible);
	void SetViewTargetWithBlend(class AActor** NewViewTarget, float* BlendTime, TEnumAsByte<EViewTargetBlendFunction>* BlendFunc, float* BlendExp, bool* bLockOutgoing);
	void SetName(struct FString* S);
	void SetMouseLocation(int* X, int* Y);
	void SetMouseCursorWidget(TEnumAsByte<EMouseCursor>* Cursor, class UUserWidget** CursorWidget);
	void SetHapticsByValue(float* Frequency, float* Amplitude, EControllerHand* Hand);
	void SetDisableHaptics(bool* bNewDisabled);
	void SetControllerLightColor(struct FColor* Color);
	void SetCinematicMode(bool* bInCinematicMode, bool* bHidePlayer, bool* bAffectsHUD, bool* bAffectsMovement, bool* bAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent** AttachToComponent, struct FVector* Location, struct FRotator* Rotation);
	void SetAudioListenerAttenuationOverride(class USceneComponent** AttachToComponent, struct FVector* AttenuationLocationOVerride);
	void ServerViewSelf(struct FViewTargetTransitionParams* TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo>* LevelVisibilities);
	void ServerUpdateLevelVisibility(struct FName* PackageName, bool* bIsVisible);
	void ServerUpdateCamera(struct FVector_NetQuantize* CamLoc, int* CamPitchAndYaw);
	void ServerUnmutePlayer(struct FUniqueNetIdRepl* playerID);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool* bWaiting);
	void ServerSetSpectatorLocation(struct FVector* NewLoc, struct FRotator* NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(struct FName* WorldPackageName);
	void ServerMutePlayer(struct FUniqueNetIdRepl* playerID);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(struct FString* S);
	void ServerCamera(struct FName* NewMode);
	void ServerAcknowledgePossession(class APawn** P);
	void SendToConsole(struct FString* Command);
	void RestartLevel();
	void ResetControllerLightColor();
	bool ProjectWorldLocationToScreen(struct FVector* WorldLocation, bool* bPlayerViewportRelative, struct FVector2D* ScreenLocation);
	void PlayHapticEffect(class UHapticFeedbackEffect_Base** HapticEffect, EControllerHand* Hand, float* Scale, bool* bLoop);
	void PlayDynamicForceFeedback(float* Intensity, float* Duration, bool* bAffectsLeftLarge, bool* bAffectsLeftSmall, bool* bAffectsRightLarge, bool* bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction>* action, struct FLatentActionInfo* LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool* bIsLogging);
	void LocalTravel(struct FString* URL);
	void K2_ClientPlayForceFeedback(class UForceFeedbackEffect** ForceFeedbackEffect, struct FName* Tag, bool* bLooping, bool* bIgnoreTimeDilation, bool* bPlayWhilePaused);
	bool IsInputKeyDown(struct FKey* Key);
	void GetViewportSize(int* SizeX, int* SizeY);
	class ASpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	struct FVector GetInputVectorKeyState(struct FKey* Key);
	void GetInputTouchState(TEnumAsByte<ETouchIndex>* FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float GetInputKeyTimeDown(struct FKey* Key);
	void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick>* WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(struct FKey* Key);
	class AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex>* FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>>* ObjectTypes, bool* bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex>* FingerIndex, TEnumAsByte<ETraceTypeQuery>* TraceChannel, bool* bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex>* FingerIndex, TEnumAsByte<ECollisionChannel>* TraceChannel, bool* bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>>* ObjectTypes, bool* bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery>* TraceChannel, bool* bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel>* TraceChannel, bool* bTraceComplex, struct FHitResult* HitResult);
	struct FVector GetFocalLocation();
	void FOV(float* NewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float* ScreenX, float* ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void ConsoleKey(struct FKey* Key);
	void ClientWasKicked(uint32_t* KickReason, uint32_t* ErrorCode, struct FString* AdditionalInfo);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus>* LevelStatuses);
	void ClientUpdateLevelStreamingStatus(struct FName* PackageName, bool* bNewShouldBeLoaded, bool* bNewShouldBeVisible, bool* bNewShouldBlockOnLoad, int* LODIndex);
	void ClientUnmutePlayer(struct FUniqueNetIdRepl* playerID);
	void ClientTravelInternal(struct FString* URL, TEnumAsByte<ETravelType>* TravelType, bool* bSeamless, struct FGuid* MapPackageGuid);
	void ClientTravel(struct FString* URL, TEnumAsByte<ETravelType>* TravelType, bool* bSeamless, struct FGuid* MapPackageGuid);
	void ClientTeamMessage(class APlayerState** SenderPlayerState, struct FString* S, struct FName* Type, float* MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect** ForceFeedbackEffect, struct FName* Tag);
	void ClientStopCameraShake(class UClass** Shake, bool* bImmediately);
	void ClientStopCameraAnim(class UCameraAnim** AnimToStop);
	void ClientStartOnlineSession();
	void ClientSpawnCameraLensEffect(class UClass** LensEffectEmitterClass);
	void ClientSetViewTarget(class AActor** A, struct FViewTargetTransitionParams* TransitionParams);
	void ClientSetSpectatorWaiting(bool* bWaiting);
	void ClientSetHUD(class UClass** NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface** Material, float* ForceDuration, int* CinematicTextureGroups);
	void ClientSetCinematicMode(bool* bInCinematicMode, bool* bAffectsMovement, bool* bAffectsTurning, bool* bAffectsHUD);
	void ClientSetCameraMode(struct FName* NewCamMode);
	void ClientSetCameraFade(bool* bEnableFading, struct FColor* FadeColor, struct FVector2D* FadeAlpha, float* FadeTime, bool* bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientReturnToMainMenuWithTextReason(struct FText* ReturnReason);
	void ClientReturnToMainMenu(struct FString* ReturnReason);
	void ClientRetryClientRestart(class APawn** NewPawn);
	void ClientRestart(class APawn** NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject** Object);
	void ClientReceiveLocalizedMessage(class UClass** Message, int* switch, class APlayerState** RelatedPlayerState, class APlayerState** RelatedPlayerState02, class UObject** OptionalObject);
	void ClientPrestreamTextures(class AActor** ForcedActor, float* ForceDuration, bool* bEnableStreaming, int* CinematicTextureGroups);
	void ClientPrepareMapChange(struct FName* LevelName, bool* bFirst, bool* bLast);
	void ClientPlaySoundAtLocation(class USoundBase** Sound, struct FVector* Location, float* VolumeMultiplier, float* PitchMultiplier);
	void ClientPlaySound(class USoundBase** Sound, float* VolumeMultiplier, float* PitchMultiplier);
	void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect** ForceFeedbackEffect, struct FForceFeedbackParameters* Params);
	void ClientPlayCameraShake(class UClass** Shake, float* Scale, TEnumAsByte<ECameraAnimPlaySpace>* PlaySpace, struct FRotator* UserPlaySpaceRot);
	void ClientPlayCameraAnim(class UCameraAnim** AnimToPlay, float* Scale, float* Rate, float* BlendInTime, float* BlendOutTime, bool* bLoop, bool* bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace>* space, struct FRotator* CustomPlaySpace);
	void ClientMutePlayer(struct FUniqueNetIdRepl* playerID);
	void ClientMessage(struct FString* S, struct FName* Type, float* MsgLifeTime);
	void ClientIgnoreMoveInput(bool* bIgnore);
	void ClientIgnoreLookInput(bool* bIgnore);
	void ClientGotoState(struct FName* newState);
	void ClientGameEnded(class AActor** EndGameFocus, bool* bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool* bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int* Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(struct FVector* InLoc, float* Duration, bool* bOverrideLocation);
	void ClearAudioListenerOverride();
	void ClearAudioListenerAttenuationOverride();
	bool CanRestartPlayer();
	void Camera(struct FName* NewMode);
	void AddYawInput(float* Val);
	void AddRollInput(float* Val);
	void AddPitchInput(float* Val);
	void ActivateTouchInterface(class UTouchInterface** NewTouchInterface);
};


// Class DeadByDaylight.DBDPlayerController
// 0x0110 (0x0840 - 0x0730)
class ADBDPlayerController : public ADBDPlayerControllerBase
{
public:
	struct FScriptMulticastDelegate                    OnPawnLeavingGame;                                        // 0x0730(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLocallyObservedChanged;                                 // 0x0740(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0750(0x0020) MISSED OFFSET
	class ANetworkFenceActor*                          _theFence;                                                // 0x0770(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0778(0x0008) MISSED OFFSET
	struct FDBDTimer                                   _yawInputScalingTimer;                                    // 0x0780(0x0028) (Transient)
	struct FDBDTimer                                   _pitchInputScalingTimer;                                  // 0x07A8(0x0028) (Transient)
	class UDBDBaseInputHandler*                        _inputHandler;                                            // 0x07D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x68];                                      // 0x07D8(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerController"));

		return ptr;
	}


	void SetShouldMoveInputReplicateToServer(bool* ShouldReplicate);
	void Server_StartEndGame();
	void Server_SetSpectatorModeInEditor(bool* On, class ADBDPlayerState** spectatingPlayerState);
	void Server_SetSpectatorMode(bool* On);
	void Server_SetReadyToTravel();
	void Server_SetHasMoveInputThisFrame(bool* hasMoveInputThisFrame);
	void Server_LeaveGame(bool* joiningLobby);
	void Server_EndGame(EEndGameReason* Reason);
	void Server_EndEndGame();
	void Server_DebugSend(struct FString* Data);
	void Server_CompleteEscapeRequirements();
	void OnRep_Fence();
	bool MobileJoystickInput_Pressed(int* joystickIndex);
	bool IsSpectating();
	void ImplementRunLockMechanic();
	class ADBDPlayerState* GetSpectatedPlayerState();
	class ADBDPlayer* GetSpectatedPlayer();
	class ADBDPlayer* GetControlledPlayer();
	void Client_SetSpectatorModeInEditor(bool* On, class ADBDPlayerState** spectatingPlayerState);
	void Client_SetSpectatorMode(bool* On);
};


// Class DeadByDaylight.DBDPlayerController_Menu
// 0x0000 (0x0730 - 0x0730)
class ADBDPlayerController_Menu : public ADBDPlayerControllerBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerController_Menu"));

		return ptr;
	}


	bool WasInputKeyJustReleased(struct FKey* Key);
	bool WasInputKeyJustPressed(struct FKey* Key);
	void ToggleSpeaking(bool* bInSpeaking);
	void SwitchLevel(struct FString* URL);
	void StopHapticEffect(EControllerHand* Hand);
	void StartFire(unsigned char* FireModeNum);
	void SetVirtualJoystickVisibility(bool* bVisible);
	void SetViewTargetWithBlend(class AActor** NewViewTarget, float* BlendTime, TEnumAsByte<EViewTargetBlendFunction>* BlendFunc, float* BlendExp, bool* bLockOutgoing);
	void SetName(struct FString* S);
	void SetMouseLocation(int* X, int* Y);
	void SetMouseCursorWidget(TEnumAsByte<EMouseCursor>* Cursor, class UUserWidget** CursorWidget);
	void SetHapticsByValue(float* Frequency, float* Amplitude, EControllerHand* Hand);
	void SetDisableHaptics(bool* bNewDisabled);
	void SetControllerLightColor(struct FColor* Color);
	void SetCinematicMode(bool* bInCinematicMode, bool* bHidePlayer, bool* bAffectsHUD, bool* bAffectsMovement, bool* bAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent** AttachToComponent, struct FVector* Location, struct FRotator* Rotation);
	void SetAudioListenerAttenuationOverride(class USceneComponent** AttachToComponent, struct FVector* AttenuationLocationOVerride);
	void ServerViewSelf(struct FViewTargetTransitionParams* TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo>* LevelVisibilities);
	void ServerUpdateLevelVisibility(struct FName* PackageName, bool* bIsVisible);
	void ServerUpdateCamera(struct FVector_NetQuantize* CamLoc, int* CamPitchAndYaw);
	void ServerUnmutePlayer(struct FUniqueNetIdRepl* playerID);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool* bWaiting);
	void ServerSetSpectatorLocation(struct FVector* NewLoc, struct FRotator* NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(struct FName* WorldPackageName);
	void ServerMutePlayer(struct FUniqueNetIdRepl* playerID);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(struct FString* S);
	void ServerCamera(struct FName* NewMode);
	void ServerAcknowledgePossession(class APawn** P);
	void SendToConsole(struct FString* Command);
	void RestartLevel();
	void ResetControllerLightColor();
	bool ProjectWorldLocationToScreen(struct FVector* WorldLocation, bool* bPlayerViewportRelative, struct FVector2D* ScreenLocation);
	void PlayHapticEffect(class UHapticFeedbackEffect_Base** HapticEffect, EControllerHand* Hand, float* Scale, bool* bLoop);
	void PlayDynamicForceFeedback(float* Intensity, float* Duration, bool* bAffectsLeftLarge, bool* bAffectsLeftSmall, bool* bAffectsRightLarge, bool* bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction>* action, struct FLatentActionInfo* LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool* bIsLogging);
	void LocalTravel(struct FString* URL);
	void K2_ClientPlayForceFeedback(class UForceFeedbackEffect** ForceFeedbackEffect, struct FName* Tag, bool* bLooping, bool* bIgnoreTimeDilation, bool* bPlayWhilePaused);
	bool IsInputKeyDown(struct FKey* Key);
	void GetViewportSize(int* SizeX, int* SizeY);
	class ASpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	struct FVector GetInputVectorKeyState(struct FKey* Key);
	void GetInputTouchState(TEnumAsByte<ETouchIndex>* FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float GetInputKeyTimeDown(struct FKey* Key);
	void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick>* WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(struct FKey* Key);
	class AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex>* FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>>* ObjectTypes, bool* bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex>* FingerIndex, TEnumAsByte<ETraceTypeQuery>* TraceChannel, bool* bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex>* FingerIndex, TEnumAsByte<ECollisionChannel>* TraceChannel, bool* bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>>* ObjectTypes, bool* bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery>* TraceChannel, bool* bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel>* TraceChannel, bool* bTraceComplex, struct FHitResult* HitResult);
	struct FVector GetFocalLocation();
	void FOV(float* NewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float* ScreenX, float* ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void ConsoleKey(struct FKey* Key);
	void ClientWasKicked(uint32_t* KickReason, uint32_t* ErrorCode, struct FString* AdditionalInfo);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus>* LevelStatuses);
	void ClientUpdateLevelStreamingStatus(struct FName* PackageName, bool* bNewShouldBeLoaded, bool* bNewShouldBeVisible, bool* bNewShouldBlockOnLoad, int* LODIndex);
	void ClientUnmutePlayer(struct FUniqueNetIdRepl* playerID);
	void ClientTravelInternal(struct FString* URL, TEnumAsByte<ETravelType>* TravelType, bool* bSeamless, struct FGuid* MapPackageGuid);
	void ClientTravel(struct FString* URL, TEnumAsByte<ETravelType>* TravelType, bool* bSeamless, struct FGuid* MapPackageGuid);
	void ClientTeamMessage(class APlayerState** SenderPlayerState, struct FString* S, struct FName* Type, float* MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect** ForceFeedbackEffect, struct FName* Tag);
	void ClientStopCameraShake(class UClass** Shake, bool* bImmediately);
	void ClientStopCameraAnim(class UCameraAnim** AnimToStop);
	void ClientStartOnlineSession();
	void ClientSpawnCameraLensEffect(class UClass** LensEffectEmitterClass);
	void ClientSetViewTarget(class AActor** A, struct FViewTargetTransitionParams* TransitionParams);
	void ClientSetSpectatorWaiting(bool* bWaiting);
	void ClientSetHUD(class UClass** NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface** Material, float* ForceDuration, int* CinematicTextureGroups);
	void ClientSetCinematicMode(bool* bInCinematicMode, bool* bAffectsMovement, bool* bAffectsTurning, bool* bAffectsHUD);
	void ClientSetCameraMode(struct FName* NewCamMode);
	void ClientSetCameraFade(bool* bEnableFading, struct FColor* FadeColor, struct FVector2D* FadeAlpha, float* FadeTime, bool* bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientReturnToMainMenuWithTextReason(struct FText* ReturnReason);
	void ClientReturnToMainMenu(struct FString* ReturnReason);
	void ClientRetryClientRestart(class APawn** NewPawn);
	void ClientRestart(class APawn** NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject** Object);
	void ClientReceiveLocalizedMessage(class UClass** Message, int* switch, class APlayerState** RelatedPlayerState, class APlayerState** RelatedPlayerState02, class UObject** OptionalObject);
	void ClientPrestreamTextures(class AActor** ForcedActor, float* ForceDuration, bool* bEnableStreaming, int* CinematicTextureGroups);
	void ClientPrepareMapChange(struct FName* LevelName, bool* bFirst, bool* bLast);
	void ClientPlaySoundAtLocation(class USoundBase** Sound, struct FVector* Location, float* VolumeMultiplier, float* PitchMultiplier);
	void ClientPlaySound(class USoundBase** Sound, float* VolumeMultiplier, float* PitchMultiplier);
	void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect** ForceFeedbackEffect, struct FForceFeedbackParameters* Params);
	void ClientPlayCameraShake(class UClass** Shake, float* Scale, TEnumAsByte<ECameraAnimPlaySpace>* PlaySpace, struct FRotator* UserPlaySpaceRot);
	void ClientPlayCameraAnim(class UCameraAnim** AnimToPlay, float* Scale, float* Rate, float* BlendInTime, float* BlendOutTime, bool* bLoop, bool* bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace>* space, struct FRotator* CustomPlaySpace);
	void ClientMutePlayer(struct FUniqueNetIdRepl* playerID);
	void ClientMessage(struct FString* S, struct FName* Type, float* MsgLifeTime);
	void ClientIgnoreMoveInput(bool* bIgnore);
	void ClientIgnoreLookInput(bool* bIgnore);
	void ClientGotoState(struct FName* newState);
	void ClientGameEnded(class AActor** EndGameFocus, bool* bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool* bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int* Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(struct FVector* InLoc, float* Duration, bool* bOverrideLocation);
	void ClearAudioListenerOverride();
	void ClearAudioListenerAttenuationOverride();
	bool CanRestartPlayer();
	void Camera(struct FName* NewMode);
	void AddYawInput(float* Val);
	void AddRollInput(float* Val);
	void AddPitchInput(float* Val);
	void ActivateTouchInterface(class UTouchInterface** NewTouchInterface);
};


// Class DeadByDaylight.DBDPlayerLevelManager
// 0x0098 (0x00C8 - 0x0030)
class UDBDPlayerLevelManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x98];                                      // 0x0030(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerLevelManager"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDPlayerPositionOffsetComponent
// 0x0008 (0x0108 - 0x0100)
class UDBDPlayerPositionOffsetComponent : public UActorComponent
{
public:
	struct FPerPlatformFloat                           _menuZHeadOffset;                                         // 0x0100(0x0004) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerPositionOffsetComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDPlayerStart
// 0x0008 (0x0380 - 0x0378)
class ADBDPlayerStart : public APlayerStart
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0378(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerStart"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDPlayerState
// 0x0430 (0x08A0 - 0x0470)
class ADBDPlayerState : public APlayerState
{
public:
	struct FString                                     MirrorsId;                                                // 0x0470(0x0010) (Net, ZeroConstructor, Transient)
	struct FString                                     ContentVersion;                                           // 0x0480(0x0010) (Net, ZeroConstructor, Transient)
	bool                                               IsPlayerReady;                                            // 0x0490(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EPlayerRole                                        GameRole;                                                 // 0x0491(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0492(0x0006) MISSED OFFSET
	class URitualHandlerComponent*                     RitualHandler;                                            // 0x0498(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UActivityTrackerComponent*                   ActivityTracker;                                          // 0x04A0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UDBDEmblemEvaluatorComponent*                EmblemEvaluator;                                          // 0x04A8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FCharacterStateData                         CamperData;                                               // 0x04B0(0x0020) (Net, Transient)
	struct FCharacterStateData                         SlasherData;                                              // 0x04D0(0x0020) (Net)
	struct FPlayerStateData                            PlayerData;                                               // 0x04F0(0x0038) (Net)
	struct FPlayerCustomization                        PlayerCustomization;                                      // 0x0528(0x0020) (Net)
	struct FSkillCheckInteractionData                  SkillCheckInteractionData;                                // 0x0548(0x0020) (Net)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0568(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerGameplayEvent;                                    // 0x0570(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGameStateChanged;                                       // 0x0580(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayergameStateChanged;                                 // 0x0590(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TMap<struct FName, struct FAwardedScores>          _awardedScoresByType;                                     // 0x05A0(0x0050) (ZeroConstructor)
	struct FUserGameStats                              _cachedUserGameStats;                                     // 0x05F0(0x00B0)
	TArray<struct FOngoingScoreData>                   _ongoingScoreEvents;                                      // 0x06A0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x06B0(0x0008) MISSED OFFSET
	struct FDBDRecentGameplayEvents                    _recentGameplayEvents;                                    // 0x06B8(0x0050)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0708(0x0001) MISSED OFFSET
	bool                                               _inParadise;                                              // 0x0709(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x56];                                      // 0x070A(0x0056) MISSED OFFSET
	class UGameplayNotificationManager*                _gameplayNotificationManager;                             // 0x0760(0x0008) (ZeroConstructor, IsPlainOldData)
	class UAchievementHandlerComponent*                _achievementHandler;                                      // 0x0768(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UCharacterStatsHandlerComponent*             _characterStatsHandler;                                   // 0x0770(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x20];                                      // 0x0778(0x0020) MISSED OFFSET
	struct FString                                     _platformAccountId;                                       // 0x0798(0x0010) (Net, ZeroConstructor, Transient)
	int                                                _selectedCamperIndex;                                     // 0x07A8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                _selectedSlasherIndex;                                    // 0x07AC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0xE4];                                      // 0x07B0(0x00E4) MISSED OFFSET
	EPlatformFlag                                      _platform;                                                // 0x0894(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x07B0(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	bool                                               _crossplayAllowed;                                        // 0x0898(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _gameLevelLoaded;                                         // 0x0899(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x089A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerState"));

		return ptr;
	}


	void UpdateSkillCheckInteractionData(float* Progress);
	void UpdateOngoingScores();
	void SetSkillCheckInteractionData(struct FSkillCheckInteractionData* skillCheckData);
	void SetKillerJoiningState(EKillerJoiningState* State);
	void Server_SetSelectedCharacterId(EPlayerRole* forRole, int* ID, bool* updateDisplayData);
	void Server_SetPlayerGameState(EGameState* newGameState);
	void Server_SetGameRole(EPlayerRole* newPlayerRole);
	void Server_SelectSurvivor(int* camperIndex);
	void Server_SelectKiller(int* slasherIndex);
	void Server_KillerServerJoined(bool* succeeded);
	void Server_HandleScoreEvent(struct FGameplayTag* scoreTypeTag, struct FScoreEventData* ScoreEventData);
	void OnRep_DisplayData();
	void OnRep_CustomizationData();
	void Multicast_UpdateSkillCheckInteractionData(float* Progress);
	void Multicast_SetSkillCheckInteractionData(struct FSkillCheckInteractionData* skillCheckInteraction);
	void Multicast_SetSelectedCharacterId(EPlayerRole* forRole, int* ID, bool* updateDisplayData);
	void Multicast_SetPlayerGameState(EGameState* newGameState);
	void Multicast_SetInParadise();
	void Multicast_SetAsLeftMatch();
	void Multicast_SetAsDisconnected();
	void Multicast_FireGameplayEvent(EDBDScoreTypes* playerGameplayEventType, float* amount, class AActor** effector, class AActor** Target);
	void Multicast_AwardScore(struct FAwardedScore* AwardedScore);
	EKillerJoiningState KillerJoiningState();
	void InitializeAvailablePerkEvent(struct FName* PerkId);
	bool HasHappened(EDBDScoreTypes* gameplayEventType, float* maxSecondsAgo);
	bool HasEscaped();
	EGameState GetPlayerGameState();
	class UGameplayNotificationManager* GetGameplayNotificationManager();
	void FireScoreEvent(EDBDScoreTypes* scoreType, float* PercentToAward);
	void FireActiveStatusViewEvent(struct FName* StatusViewID, struct FName* uniqueSourceID, struct FStatusViewSource* StatusViewSource);
	void FireActiveStatusEffectEvent(struct FName* statusEffectId, float* percentage, int* iconFilePathIndex, int* LevelToDisplay);
	void Client_SetInParadise();
	void Client_SetGameRole(EPlayerRole* newRole);
	void Client_RemoveItemFromInventory(struct FName* toRemove, bool* UpdateLoadout);
	void Client_RemotelyDispatchGameEvent(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void Client_HandleEscapeScoreEvent();
	void Authority_HandleScoreEvent(struct FGameplayTag* scoreTypeTag, struct FScoreEventData* ScoreEventData);
	void Authority_ForceEndOngoingScoreEvent(EDBDScoreTypes* scoreType);
	void Authority_ForceCancelOngoingScoreEvent(EDBDScoreTypes* scoreType);
	void Authority_EndOngoingScoreEvent(struct FGameplayTag* scoreTypeTag);
	void Authority_CancelOngoingScoreEvent(struct FGameplayTag* scoreTypeTag);
};


// Class DeadByDaylight.DBDPlayerState_Menu
// 0x0090 (0x0930 - 0x08A0)
class ADBDPlayerState_Menu : public ADBDPlayerState
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x08A0(0x0020) MISSED OFFSET
	TWeakObjectPtr<class ADBDMenuPlayer>               _pawn;                                                    // 0x08C0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x08C8(0x0010) MISSED OFFSET
	TWeakObjectPtr<class AMenuMeatHook>                _meatHook;                                                // 0x08D8(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ACharm>                       _charm;                                                   // 0x08E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x48];                                      // 0x08E8(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerState_Menu"));

		return ptr;
	}


	void Server_SetSelectedCharacterCustomizationMesh(EPlayerRole* forRole, int* ID, TArray<struct FName>* customizationItemIds);
	void Server_SetSelectedCharacterCustomizationCharms(EPlayerRole* forRole, int* ID, TArray<struct FCharmIdSlot>* customizationCharms);
	void Server_SetEquipment(ELoadoutSlot* Slot, struct FName* ItemId, bool* callOnRep);
	void Multicast_SetSelectedCharacterCustomizationMesh(EPlayerRole* forRole, int* ID, TArray<struct FName>* customizationItemIds);
	void Multicast_SetSelectedCharacterCustomizationCharms(EPlayerRole* forRole, int* ID, TArray<struct FCharmIdSlot>* customizationCharms);
	void CheckSpawnOnActorDestroyComplete(class AActor** DestroyedActor);
};


// Class DeadByDaylight.DBDPlayerState_Lobby
// 0x0000 (0x0930 - 0x0930)
class ADBDPlayerState_Lobby : public ADBDPlayerState_Menu
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDPlayerState_Lobby"));

		return ptr;
	}


	void Server_SetSelectedCharacterCustomizationMesh(EPlayerRole* forRole, int* ID, TArray<struct FName>* customizationItemIds);
	void Server_SetSelectedCharacterCustomizationCharms(EPlayerRole* forRole, int* ID, TArray<struct FCharmIdSlot>* customizationCharms);
	void Server_SetEquipment(ELoadoutSlot* Slot, struct FName* ItemId, bool* callOnRep);
	void Multicast_SetSelectedCharacterCustomizationMesh(EPlayerRole* forRole, int* ID, TArray<struct FName>* customizationItemIds);
	void Multicast_SetSelectedCharacterCustomizationCharms(EPlayerRole* forRole, int* ID, TArray<struct FCharmIdSlot>* customizationCharms);
	void CheckSpawnOnActorDestroyComplete(class AActor** DestroyedActor);
};


// Class DeadByDaylight.DBDRankDesignTunables
// 0x0030 (0x0060 - 0x0030)
class UDBDRankDesignTunables : public UObject
{
public:
	class UCurveFloat*                                 UnbrokenTimeAlivePointsCurve;                             // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 EvaderStealthPointsByDistanceWhileKillerNotChasingCurve;  // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 EvaderStealthPointsByDistanceWhileKillerIsChasingCurve;   // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 EvaderChasePointsByDurationCurve;                         // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 EvaderZAxisDistanceScalingCurve;                          // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 ChaserChasePointsByDurationCurve;                         // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDRankDesignTunables"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDRichPresenceSubsystem
// 0x0018 (0x0050 - 0x0038)
class UDBDRichPresenceSubsystem : public UGameInstanceSubsystem
{
public:
	ERichPresenceUserType                              _userType;                                                // 0x0038(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	ERichPresenceStatus                                _richPresenceStatus;                                      // 0x0039(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	float                                              _timerRate;                                               // 0x003C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              _timerDelay;                                              // 0x0040(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isValidSetup;                                            // 0x0044(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x0045(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDRichPresenceSubsystem"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDHostSettingsParamsBase
// 0x0010 (0x0040 - 0x0030)
class UDBDHostSettingsParamsBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDHostSettingsParamsBase"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDHostSettingsParamsSessionInvalid
// 0x0000 (0x0040 - 0x0040)
class UDBDHostSettingsParamsSessionInvalid : public UDBDHostSettingsParamsBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDHostSettingsParamsSessionInvalid"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDHostSettingsParamsJoinabilityPreset
// 0x0008 (0x0048 - 0x0040)
class UDBDHostSettingsParamsJoinabilityPreset : public UDBDHostSettingsParamsBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDHostSettingsParamsJoinabilityPreset"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDHostSettingsParamsRanking
// 0x0008 (0x0048 - 0x0040)
class UDBDHostSettingsParamsRanking : public UDBDHostSettingsParamsBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDHostSettingsParamsRanking"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDServerInstance
// 0x0070 (0x00A0 - 0x0030)
class UDBDServerInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0030(0x0058) MISSED OFFSET
	TArray<class UDBDHostSettingsParamsBase*>          _pendingSessionUpdates;                                   // 0x0088(0x0010) (ZeroConstructor, Transient)
	TWeakObjectPtr<class UDBDGameInstance>             _gameInstance;                                            // 0x0098(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDServerInstance"));

		return ptr;
	}

};


// Class DeadByDaylight.SlasherCheats
// 0x0000 (0x0100 - 0x0100)
class USlasherCheats : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SlasherCheats"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.DBDSlasherData
// 0x0008 (0x0130 - 0x0128)
class UDBDSlasherData : public UDBDPlayerData
{
public:
	bool                                               VisionEnabled;                                            // 0x0128(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               CloakingEnabled;                                          // 0x0129(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	ESlasherGuidedAction                               CurrentGuidedAction;                                      // 0x012A(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x012B(0x0001) MISSED OFFSET
	float                                              SoundDisplayLifetime;                                     // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDSlasherData"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDSocialNotificationFactory
// 0x0030 (0x0060 - 0x0030)
class UDBDSocialNotificationFactory : public UObject
{
public:
	class UToastManager*                               _toastMgr;                                                // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDPartyFacade*                             _partyFacade;                                             // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  _toastTable;                                              // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0048(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDSocialNotificationFactory"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDSpecialEventUtilities
// 0x0000 (0x0030 - 0x0030)
class UDBDSpecialEventUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDSpecialEventUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDSpectator
// 0x0000 (0x03C8 - 0x03C8)
class ADBDSpectator : public ASpectatorPawn
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDSpectator"));

		return ptr;
	}


	void TurnAtRate(float* Rate);
	void MoveUp_World(float* Val);
	void MoveRight(float* Val);
	void MoveForward(float* Val);
	void LookUpAtRate(float* Rate);
};


// Class DeadByDaylight.DBDSpringArmComponent
// 0x0050 (0x0340 - 0x02F0)
class UDBDSpringArmComponent : public USpringArmComponent
{
public:
	unsigned char                                      bEnableComponentwiseCameraLag : 1;                        // 0x02F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02F1(0x0003) MISSED OFFSET
	struct FVector                                     ComponenwiseCameraLagSpeed;                               // 0x02F4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TargetArmMinLength;                                       // 0x0300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableDistanceCameraLag : 1;                             // 0x0304(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0305(0x0003) MISSED OFFSET
	float                                              CameraDistanceLagSpeed;                                   // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x030C(0x0004) MISSED OFFSET
	unsigned char                                      bDrawDebugTraceMarkers : 1;                               // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0311(0x0007) MISSED OFFSET
	TArray<TWeakObjectPtr<class AActor>>               ignoreActors;                                             // 0x0318(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0328(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDSpringArmComponent"));

		return ptr;
	}


	void IgnoreActor(class AActor** Actor, bool* bShouldIgnore);
	void ClearIgnoreActors();
};


// Class DeadByDaylight.DBDSurfaceTypeName
// 0x0000 (0x0030 - 0x0030)
class UDBDSurfaceTypeName : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDSurfaceTypeName"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDTags
// 0x0000 (0x0030 - 0x0030)
class UDBDTags : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDTags"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDTimerComponent
// 0x0030 (0x0130 - 0x0100)
class UDBDTimerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDTimerComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.DBDTimeUtilities
// 0x0028 (0x0058 - 0x0030)
class UDBDTimeUtilities : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDTimeUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDTunableUtilities
// 0x0000 (0x0030 - 0x0030)
class UDBDTunableUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDTunableUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDUtilities
// 0x0000 (0x0030 - 0x0030)
class UDBDUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.DBDUtilTimer
// 0x0000 (0x0030 - 0x0030)
class UDBDUtilTimer : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDUtilTimer"));

		return ptr;
	}

};


// Class DeadByDaylight.DeadByDaylightGameMode
// 0x0000 (0x0438 - 0x0438)
class ADeadByDaylightGameMode : public AgameMode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DeadByDaylightGameMode"));

		return ptr;
	}


	void StartMatch();
	void SetBandwidthLimit(float* AsyncIOBandwidthLimit);
	void Say(struct FString* Msg);
	void RestartGame();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	void K2_OnSetMatchState(struct FName* newState);
	bool IsMatchInProgress();
	bool HasMatchEnded();
	struct FName GetMatchState();
	void EndMatch();
	void AbortMatch();
};


// Class DeadByDaylight.DecoySlasherComponent
// 0x0038 (0x0138 - 0x0100)
class UDecoySlasherComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnPalletStunned_Authority;                                // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TriggerDecoyVisibilityVFX;                                // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               HasTerrorRadius;                                          // 0x0120(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               HasRedGlow;                                               // 0x0121(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               _isActive;                                                // 0x0122(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _initialized;                                             // 0x0123(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	class UTerrorRadiusEmitterComponent*               _terrorRadiusEmitter;                                     // 0x0128(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class URedStainComponent*                          _redStainComponent;                                       // 0x0130(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DecoySlasherComponent"));

		return ptr;
	}


	void SetDecoyIsActive(bool* IsActive, struct FVector* Location, struct FRotator* Rotation, bool* visibleRedGlow);
	bool IsDecoyActive();
	class UTerrorRadiusEmitterComponent* GetTerrorRadiusEmitter();
	class ASlasherPlayer* GetRealSlasher();
	void DoPostVFXUpdates(struct FVector* Location, struct FRotator* Rotation);
	void CopyCustomizationFromSlasher();
	void Authority_PalletStun(class AActor** Instigator);
};


// Class DeadByDaylight.DedicatedServerManager
// 0x0050 (0x0080 - 0x0030)
class UDedicatedServerManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET
	class UOnlineSystemHandler*                        _onlineSystemHandler;                                     // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDTimeUtilities*                           _dbdTimeUtilities;                                        // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UContentScheduleManager*                     _contentScheduleManager;                                  // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0060(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DedicatedServerManager"));

		return ptr;
	}

};


// Class DeadByDaylight.DefaultOutlineUpdateStrategy
// 0x0020 (0x0128 - 0x0108)
class UDefaultOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _revealedColorToSurvivor;                                 // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                _revealedColorToKiller;                                   // 0x0118(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DefaultOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.DemogorgonPortal
// 0x00A0 (0x0468 - 0x03C8)
class ADemogorgonPortal : public AInteractable
{
public:
	class UPrimitiveComponent*                         _portalAreaCollider;                                      // 0x03C8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _destroyChargeable;                                       // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _teleportChargeable;                                      // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	EDemogorgonPortalState                             _portalState;                                             // 0x03E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET
	class UAkAudioEvent*                               _portalIdleSound;                                         // 0x03E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               _portalDestroyingStart;                                   // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               _portalTeleportingSound;                                  // 0x03F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             _destroyParticleSystem;                                   // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _destroyDuration;                                         // 0x0408(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5C];                                      // 0x040C(0x005C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DemogorgonPortal"));

		return ptr;
	}


	void TriggerDirtExplosion();
	void ShowPortalTeleportInteractionStartVFX();
	void ShowPortalActiveVFX();
	void RemovePortalTeleportInteractionStartVFX();
	void RemovePortalActiveVFX();
	void PlaySoundFromPortal(class UAkAudioEvent** SoundEvent);
	void OnTeleportAbilityCooldownChangedVFX(bool* isOnCooldown);
	void OnTargetedChanged();
	void OnPortalStateChanged(EDemogorgonPortalState* State);
	void OnEndOverlapPortalArea(class UPrimitiveComponent** OverlappedComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void OnBeginOverlapPortalArea(class UPrimitiveComponent** OverlappedComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void Multicast_SurvivorsInterruptedOnDestroy(TArray<class ADBDPlayer*>* Targets);
	void MakePortalDisappearVFX();
	bool IsTargeted();
	void Authority_StopDestroyingPlayers();
	void Authority_OnTeleportChargePercentChanged(class UChargeableComponent** ChargeableComponent, float* PercentCompletionChange, float* TotalPercentComplete);
	void Authority_OnDestroyChargePercentChanged(class UChargeableComponent** ChargeableComponent, float* PercentCompletionChange, float* TotalPercentComplete);
};


// Class DeadByDaylight.DemogorgonPortalEffectComponent
// 0x0050 (0x0150 - 0x0100)
class UDemogorgonPortalEffectComponent : public UActorComponent
{
public:
	struct FName                                       _statusEffectName;                                        // 0x0100(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0100(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              _effectLingerDuration;                                    // 0x010C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UStatusEffect>                _effect;                                                  // 0x0110(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class ADBDPlayer>                   _originatingPlayer;                                       // 0x0118(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class UGameplayModifierContainer>   _originatingEffect;                                       // 0x0120(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0128(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DemogorgonPortalEffectComponent"));

		return ptr;
	}


	void Authority_Initialize(struct FName* StatusEffect, float* lingerDuration, class ADBDPlayer** originatingPlayer, class UGameplayModifierContainer** originatingEffect);
};


// Class DeadByDaylight.TrapPlacementValidationStrategy
// 0x0000 (0x0030 - 0x0030)
class UTrapPlacementValidationStrategy : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TrapPlacementValidationStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.DefaultTrapPlacementValidationStrategy
// 0x0028 (0x0058 - 0x0030)
class UDefaultTrapPlacementValidationStrategy : public UTrapPlacementValidationStrategy
{
public:
	struct FVector                                     _trapPlacementRaycastStart;                               // 0x0030(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     _trapPlacementRaycastEnd;                                 // 0x003C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FFloatRange                                 _trapHeightRangeAroundBaseLocation;                       // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DefaultTrapPlacementValidationStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.DemogorgonPortalPlacementValidationStrategy
// 0x0020 (0x0078 - 0x0058)
class UDemogorgonPortalPlacementValidationStrategy : public UDefaultTrapPlacementValidationStrategy
{
public:
	class UPortalPlacerStateComponent*                 _portalPlacerState;                                       // 0x0058(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UChargedAttackStateComponent*                _chargedAttackState;                                      // 0x0060(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              _distanceForWorldCollisionDetection;                      // 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _numberOfGroundTest;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _portalEdgeTestRadius;                                    // 0x0070(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _maxElevationDifferentialOnPortalEdge;                    // 0x0074(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DemogorgonPortalPlacementValidationStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.DemogorgonStealthComponent
// 0x0028 (0x0128 - 0x0100)
class UDemogorgonStealthComponent : public UActorComponent
{
public:
	TWeakObjectPtr<class UStatusEffect>                _stealthEffect;                                           // 0x0100(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0108(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DemogorgonStealthComponent"));

		return ptr;
	}


	void Authority_OnLevelReadyToPlay();
};


// Class DeadByDaylight.DestroyBreakableDefinition
// 0x0000 (0x05E0 - 0x05E0)
class UDestroyBreakableDefinition : public UChargeableInteractionDefinition
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DestroyBreakableDefinition"));

		return ptr;
	}


	bool ShouldShowSpeedProficiencyForMultipleInteractors();
	void SetSpeedBase(float* speedBase);
	void SetChargeableComponent(class UChargeableComponent** ChargeableComponent);
	void OnSkillCheckResponseAuthorityBP(class ADBDPlayer** Player, bool* success, bool* Bonus, bool* hadInput, ESkillCheckCustomType* Type);
	void OnSkillCheckResponseAuthority(bool* success, bool* Bonus, class ADBDPlayer** Player, bool* TriggerLoudNoise, bool* hadInput, ESkillCheckCustomType* Type);
	void OnSkillCheckResponseAestheticBP(class ADBDPlayer** Player, bool* success, bool* Bonus, bool* hadInput, ESkillCheckCustomType* Type);
	void OnSkillCheckResponseAesthetic(bool* success, bool* Bonus, class ADBDPlayer** Player, bool* TriggerLoudNoise, bool* hadInput, ESkillCheckCustomType* Type);
	void OnInteractionCompletionStateChanged(class ADBDPlayer** Player, bool* complete);
	void OnChargeableChangedBP(class UChargeableComponent** oldChargeable, class UChargeableComponent** newChargeable);
	bool HasSkillCheckHappened(class ADBDPlayer** Character);
	float GetTunableValue(struct FName* TunableValueID, float* defaultValue);
	float GetSuccessProbability();
	float GetSkillCheckProbability();
	float GetSkillCheckFailureTimePenalty();
	float GetSkillCheckFailurePercentPenalty(class ADBDPlayer** Player);
	float GetSkillCheckDifficulityModifier(class ADBDPlayer** Character);
	float GetSkillCheckCharge(class ADBDPlayer** Player, bool* success, bool* Bonus, ESkillCheckCustomType* Type);
	int GetPipsPassed();
	float GetPerkMultiplier(class ADBDPlayer** Character);
	float GetMultiplicativeLuckBonus(class ADBDPlayer** Character);
	float GetMaxCharge();
	float GetItemEfficiencyModifier(class ADBDPlayer** Character);
	float GetGoodSkillCheckSuccessPercentReward(class ADBDPlayer** Player);
	float GetChargeSpeedModifier(class ADBDPlayer** Character);
	float GetChargeAmountForTime(float* DeltaSeconds, class ADBDPlayer** Character);
	class UChargeableComponent* GetChargeableComponent();
	float GetBonusSkillCheckZoneSizeModifier(class ADBDPlayer** Character);
	float GetBonusSkillCheckSuccessPercentReward(class ADBDPlayer** Player);
	float GetBlueprintChargeSpeedMultiplier(class ADBDPlayer** Character);
	float GetAdditiveLuckBonus(class ADBDPlayer** Character);
	float GetAdditiveChargeTimeReductionAsMultiplier(class ADBDPlayer** Character);
	void Authority_ChargeWithItem(float* DeltaSeconds, class ACollectable** Item, class ADBDPlayer** Character);
	void AddCharge(float* DeltaSeconds, class ADBDPlayer** Character);
};


// Class DeadByDaylight.DisciplineEffect
// 0x0008 (0x02C8 - 0x02C0)
class UDisciplineEffect : public UStatusEffect
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DisciplineEffect"));

		return ptr;
	}


	bool ShouldDisplayStatusEffectIcon();
	void SetStatusEffectIconPercentage(float* value);
	void SetShouldDisplay(bool* On);
	void OnShouldDisplayChanged(bool* currentValue);
	void OnRep_ShouldDisplay();
	void Multicast_SetRemainingLifetime(float* Lifetime);
	void Multicast_InitializeStatusEffect(struct FName* statusEffectId, class ADBDPlayer** originatingPlayer, float* customParam, class UGameplayModifierContainer** originatingEffect, bool* shouldDisplay);
	bool IsOriginatorHooked();
	bool IsOriginatorAlive();
	bool IsKillerInOriginatorRange(float* AdditiveRangeModifier);
	bool IsInOriginatorRange();
	void InitializeLifetime(float* Lifetime);
	float GetStatusEffectCooldownRate();
	bool GetShouldDisplay();
	class ADBDPlayer* GetOriginatingPlayer();
	float GetLifetimeDuration();
	void FireActiveStatusEffectEvent(float* percentage, int* LevelToDisplay);
	void BroadcastOriginatorGameEventNotification();
	void BroadcastGameEventNotification(struct FGameplayNotificationData* notificationData, bool* addToHistory);
	void Authority_SetRemainingLifetime(float* Lifetime);
	void Authority_RemoveSelf();
	void Authority_EndSelf();
};


// Class DeadByDaylight.DisplayStand
// 0x0160 (0x04A0 - 0x0340)
class ADisplayStand : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0340(0x0020) MISSED OFFSET
	class AActor*                                      _currentActorDisplayed;                                   // 0x0360(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0368(0x0030) MISSED OFFSET
	TMap<class UClass*, struct FTransform>             _offsetByClass;                                           // 0x0398(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TMap<class UClass*, bool>                          _enableRotationByClass;                                   // 0x03E8(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0438(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.DisplayStand._defaultCharmClassDisplayable
	unsigned char                                      UnknownData03[0x38];                                      // 0x0468(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DisplayStand"));

		return ptr;
	}


	void OnCurrentActorDestroyed(class AActor** DestroyedActor);
};


// Class DeadByDaylight.DisplayStandCharmRequesterComponent
// 0x0018 (0x0118 - 0x0100)
class UDisplayStandCharmRequesterComponent : public UActorComponent
{
public:
	class UClass*                                      _menuCharmClass;                                          // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0108(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DisplayStandCharmRequesterComponent"));

		return ptr;
	}


	void OnCharmDisplayed(class AActor** Actor);
};


// Class DeadByDaylight.DisplayStandCurrencyRequesterComponent
// 0x0010 (0x0110 - 0x0100)
class UDisplayStandCurrencyRequesterComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET
	class UClass*                                      _menuCurrencyDisplayableClass;                            // 0x0108(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DisplayStandCurrencyRequesterComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.DisplayStandItemRequesterComponent
// 0x0040 (0x0140 - 0x0100)
class UDisplayStandItemRequesterComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0100(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DisplayStandItemRequesterComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.DlcHelper
// 0x0000 (0x0030 - 0x0030)
class UDlcHelper : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DlcHelper"));

		return ptr;
	}

};


// Class DeadByDaylight.DoctorPowerAnimStateComponent
// 0x0008 (0x0108 - 0x0100)
class UDoctorPowerAnimStateComponent : public UActorComponent
{
public:
	EDoctorAbilityType                                 _abilityType;                                             // 0x0100(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EDoctorAbilityPhase                                _abilityPhase;                                            // 0x0101(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0102(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DoctorPowerAnimStateComponent"));

		return ptr;
	}


	void SetCurrentAbilityType(EDoctorAbilityType* abilityType);
	void SetCurrentAbilityPhase(EDoctorAbilityPhase* abilityPhase);
};


// Class DeadByDaylight.SourceBasedOutlineUpdateStrategy
// 0x0070 (0x0178 - 0x0108)
class USourceBasedOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _defaultColorForSurvivor;                                 // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                _defaultColorForSlasher;                                  // 0x0118(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0128(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SourceBasedOutlineUpdateStrategy"));

		return ptr;
	}


	void ResetReveal();
	void RemoveRevealSource(class UObject** Source);
	void ChangeDefaultColorForSurvivor(struct FLinearColor* NewColor);
	void ChangeDefaultColorForSlasher(struct FLinearColor* NewColor);
	void AddTimedReveal(class UObject** Source, struct FLinearColor* HighlightColor, int* Priority, TArray<class ADBDPlayer*>* affectedCharacters, float* Duration);
	void AddReveal(class UObject** Source, struct FLinearColor* HighlightColor, int* Priority, TArray<class ADBDPlayer*>* affectedCharacters);
};


// Class DeadByDaylight.VaultableOutlineUpdateStrategy
// 0x0008 (0x0180 - 0x0178)
class UVaultableOutlineUpdateStrategy : public USourceBasedOutlineUpdateStrategy
{
public:
	bool                                               _canBeRevealedToLocalPlayer;                              // 0x0178(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0179(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.VaultableOutlineUpdateStrategy"));

		return ptr;
	}


	void SetCanBeRevealedToLocalPlayer(bool* canBeRevealedToLocalPlayer);
};


// Class DeadByDaylight.PalletOutlineUpdateStrategy
// 0x0010 (0x0190 - 0x0180)
class UPalletOutlineUpdateStrategy : public UVaultableOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _revealedByPowerColor;                                    // 0x0180(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PalletOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.DreamPalletOutlineUpdateStrategy
// 0x0028 (0x01B8 - 0x0190)
class UDreamPalletOutlineUpdateStrategy : public UPalletOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _revealedByMapColor;                                      // 0x0190(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x01A0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DreamPalletOutlineUpdateStrategy"));

		return ptr;
	}


	void InitializeTunableValues(class ASlasherPlayer** Killer);
};


// Class DeadByDaylight.DreamSnareOutlineUpdateStrategy
// 0x0010 (0x0138 - 0x0128)
class UDreamSnareOutlineUpdateStrategy : public UDefaultOutlineUpdateStrategy
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0128(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DreamSnareOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.DreamSnareTrapPlacementValidationStrategy
// 0x0010 (0x0068 - 0x0058)
class UDreamSnareTrapPlacementValidationStrategy : public UDefaultTrapPlacementValidationStrategy
{
public:
	float                                              NumberOfGroundTest;                                       // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TrapRadius;                                               // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxElevationDifferentialOnTrapEdge;                       // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DreamSnareTrapPlacementValidationStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.DreamworldOnlyComponent
// 0x0010 (0x0280 - 0x0270)
class UDreamworldOnlyComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0270(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DreamworldOnlyComponent"));

		return ptr;
	}


	void ToggleVisibility(bool* bPropagateToChildren);
	bool SnapTo(class USceneComponent** InParent, struct FName* InSocketName);
	void SetWorldScale3D(struct FVector* NewScale);
	void SetVisibility(bool* bNewVisibility, bool* bPropagateToChildren);
	void SetSkipComponentAndChildrenTransformUpdate(bool* value);
	void SetShouldUpdatePhysicsVolume(bool* bInShouldUpdatePhysicsVolume);
	void SetRelativeScale3D(struct FVector* NewScale3D);
	void SetMobility(TEnumAsByte<EComponentMobility>* NewMobility);
	void SetHiddenInGame(bool* NewHidden, bool* bPropagateToChildren);
	void SetAbsolute(bool* bNewAbsoluteLocation, bool* bNewAbsoluteRotation, bool* bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool* oldValue);
	void OnRep_Transform();
	void OnRep_RelativeRotation();
	void OnRep_RelativeLocation();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldRotation(struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeRotation(struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(EDetachmentRule* LocationRule, EDetachmentRule* RotationRule, EDetachmentRule* ScaleRule, bool* bCallModify);
	bool K2_AttachToComponent(class USceneComponent** Parent, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent** InParent, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachType, bool* bWeldSimulatedBodies);
	void K2_AddWorldTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeLocation(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(struct FName* BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(struct FName* InSocketName, TEnumAsByte<ERelativeTransformSpace>* TransformSpace);
	struct FRotator GetSocketRotation(struct FName* InSocketName);
	struct FQuat GetSocketQuaternion(struct FName* InSocketName);
	struct FVector GetSocketLocation(struct FName* InSocketName);
	bool GetSkipComponentAndChildrenTransformUpdate();
	bool GetShouldUpdatePhysicsVolume();
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool* bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int* ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(struct FName* InSocketName);
	void DetachFromParent(bool* bMaintainWorldPosition, bool* bCallModify);
};


// Class DeadByDaylight.DynamicGrass
// 0x0018 (0x0358 - 0x0340)
class ADynamicGrass : public AActor
{
public:
	class UMaterialParameterCollection*                _worldSettings;                                           // 0x0340(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0348(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DynamicGrass"));

		return ptr;
	}

};


// Class DeadByDaylight.EdgeObjectHandlingStrategy
// 0x0110 (0x0140 - 0x0030)
class UEdgeObjectHandlingStrategy : public UObject
{
public:
	TArray<class UActorSpawner*>                       _edgeObjectSpawners;                                      // 0x0030(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UActorSpawner*>                       _edgeObjectBlockers;                                      // 0x0040(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0xF0];                                      // 0x0050(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EdgeObjectHandlingStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.EditorActorVisualization
// 0x0060 (0x02D0 - 0x0270)
class UEditorActorVisualization : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0270(0x0030) MISSED OFFSET
	struct FTransform                                  RelativeTransform;                                        // 0x02A0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EditorActorVisualization"));

		return ptr;
	}

};


// Class DeadByDaylight.EditorMeshVisualization
// 0x0060 (0x02D0 - 0x0270)
class UEditorMeshVisualization : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0270(0x0030) MISSED OFFSET
	struct FTransform                                  RelativeTransform;                                        // 0x02A0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EditorMeshVisualization"));

		return ptr;
	}

};


// Class DeadByDaylight.EffectsLocator
// 0x0068 (0x03A8 - 0x0340)
class AEffectsLocator : public AActor
{
public:
	TArray<struct FEffectsLocatorTargets>              AffectedActors;                                           // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              ActorCaptureRadius;                                       // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x54];                                      // 0x0354(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EffectsLocator"));

		return ptr;
	}


	void OnLostActor(class AActor** lostActor);
	void OnLeaveCollisionArea(class AActor** OverlappedActor, class AActor** OtherActor);
	void OnFoundActor(class AActor** foundActor);
	void OnEnterCollisionArea(class AActor** OverlappedActor, class AActor** OtherActor);
	void OnActorTick(class UMaterialInstanceDynamic** actorMaterialInstanceDynamic);
};


// Class DeadByDaylight.EmblemRankContainer
// 0x01E0 (0x0218 - 0x0038)
class UEmblemRankContainer : public UGameInstanceSubsystem
{
public:
	unsigned char                                      UnknownData00[0x1E0];                                     // 0x0038(0x01E0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EmblemRankContainer"));

		return ptr;
	}

};


// Class DeadByDaylight.EndGameComponent
// 0x0090 (0x0190 - 0x0100)
class UEndGameComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0100(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EndGameComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.EndGameEntity
// 0x0008 (0x0348 - 0x0340)
class AEndGameEntity : public AActor
{
public:
	class USkeletalMeshComponent*                      _skeletalMeshComponent;                                   // 0x0340(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EndGameEntity"));

		return ptr;
	}

};


// Class DeadByDaylight.EndGameEntityAnimInstance
// 0x0000 (0x0270 - 0x0270)
class UEndGameEntityAnimInstance : public UAnimInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EndGameEntityAnimInstance"));

		return ptr;
	}

};


// Class DeadByDaylight.EndGameStateComponent
// 0x0058 (0x0158 - 0x0100)
class UEndGameStateComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x5];                                       // 0x0100(0x0005) MISSED OFFSET
	bool                                               _isEndGameOver;                                           // 0x0105(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0106(0x0002) MISSED OFFSET
	float                                              _worldTimeAtLastModification;                             // 0x0108(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3C];                                      // 0x010C(0x003C) MISSED OFFSET
	float                                              _timeDilation;                                            // 0x0148(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              _normalTotalTimeElapsedAtLastDilationModification;        // 0x014C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EEndGameScenarioTrigger                            _endGameScenarioTrigger;                                  // 0x0150(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0151(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EndGameStateComponent"));

		return ptr;
	}


	void OnRep_WorldTimeAtLastDilationModification();
	void OnRep_TimeDilation();
	void OnRep_IsEndGameOver();
	void Multicast_SetIsInEndGameSimulation(bool* endGameSimulation);
	bool IsTimerSlowedDown();
	bool IsEndGameOver();
	bool HasEndGameBegun();
	float GetElapsedTimePercent();
};


// Class DeadByDaylight.EnergyPoweredInterface
// 0x0000 (0x0030 - 0x0030)
class UEnergyPoweredInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EnergyPoweredInterface"));

		return ptr;
	}

};


// Class DeadByDaylight.Entity
// 0x0020 (0x0360 - 0x0340)
class AEntity : public AActor
{
public:
	class UCurveFloat*                                 _dissolveCurve;                                           // 0x0340(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 _revealsCurve;                                            // 0x0348(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialHelper*                             _materialHelper;                                          // 0x0350(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      _skeletalMesh;                                            // 0x0358(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Entity"));

		return ptr;
	}

};


// Class DeadByDaylight.EscapeDoor
// 0x00C0 (0x0488 - 0x03C8)
class AEscapeDoor : public AInteractable
{
public:
	bool                                               activated;                                                // 0x03C8(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03C9(0x0007) MISSED OFFSET
	TArray<struct FVector>                             EscapePositions;                                          // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UObject*>                             EscapeFire;                                               // 0x03E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UChargeableComponent*                        _killerOpenChargeable;                                    // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _openChargeable;                                          // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UAkComponent*                                _ak_audio_escape;                                         // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UEscapeDoorAnimInstance*                     _escapeDoorAnimInstance;                                  // 0x0408(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             _rootComponent;                                           // 0x0410(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USpotLightComponent*                         _spotlight;                                               // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x68];                                      // 0x0420(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EscapeDoor"));

		return ptr;
	}


	void StartAtlantaDoorOpeningSound();
	void StartAtlantaDoorBeepingSound();
	void OnRep_Activated(bool* oldActivated);
	void OnPlayerExitExitArea(class ADBDPlayer** Player);
	void OnPlayerEnterExitArea(class ADBDPlayer** Player);
	void OnExitGateOpened(class ADBDPlayer** Player);
	void OnExitActivationChanged(bool* activated);
	void OnEscapeZoneEndOverlap(class AActor** overlappingActor);
	void OnEscapeZoneBeginOverlap(class AActor** overlappingActor);
	void LightAllLights();
	bool IsActivated();
	bool GetIsOpen();
	struct FVector GetEscapeSwitchFloorLocation();
	class USkeletalMeshComponent* GetDoorSkeletalMeshComponent();
	bool GetAtlantaExitOpeningIndicatorVisibility();
};


// Class DeadByDaylight.EscapeDoorAnimInstance
// 0x0000 (0x0280 - 0x0280)
class UEscapeDoorAnimInstance : public USleepingAnimInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EscapeDoorAnimInstance"));

		return ptr;
	}


	void SetIsOpenByKiller(bool* isOpenByKiller);
	void SetIsOpen(bool* IsOpen);
	void PlaySound(class UAkAudioEvent** AkEvent);
};


// Class DeadByDaylight.EscapeOutlineUpdateStrategy
// 0x0020 (0x0128 - 0x0108)
class UEscapeOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _doorOpenColorForSurvivor;                                // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                _doorOpenColorForKiller;                                  // 0x0118(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EscapeOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.EscapeRequirementTracker
// 0x0030 (0x0060 - 0x0030)
class UEscapeRequirementTracker : public UObject
{
public:
	TArray<class AGenerator*>                          _escapeGenerators;                                        // 0x0030(0x0010) (ZeroConstructor, Transient)
	class ADBDGameState*                               _dbdGameState;                                            // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0048(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EscapeRequirementTracker"));

		return ptr;
	}


	void OnGameEventDispatched(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
};


// Class DeadByDaylight.EscapeTile
// 0x0008 (0x0458 - 0x0450)
class AEscapeTile : public ATile
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0450(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EscapeTile"));

		return ptr;
	}


	void OnSetSpawnObject(class UTileSpawnPoint** TileSpawnPoint, class AActor** spawnedObject);
	void OnRep_Initialized(bool* oldValue);
	void InitOnSpawned();
};


// Class DeadByDaylight.EventObjectComponent
// 0x0010 (0x0110 - 0x0100)
class UEventObjectComponent : public UActorComponent
{
public:
	struct FName                                       _eventId;                                                 // 0x0100(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0100(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData01[0x4];                                       // 0x010C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EventObjectComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.EventGeneratorComponent
// 0x0008 (0x0118 - 0x0110)
class UEventGeneratorComponent : public UEventObjectComponent
{
public:
	bool                                               _updateOultineForSurvivor;                                // 0x0110(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               _updateOultineForSlasher;                                 // 0x0111(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0112(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EventGeneratorComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.EventHookComponent
// 0x0010 (0x0120 - 0x0110)
class UEventHookComponent : public UEventObjectComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0110(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EventHookComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.EvilWithinComponent
// 0x0070 (0x0170 - 0x0100)
class UEvilWithinComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnTierChange;                                             // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                _currentTier;                                             // 0x0110(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              _lastTierTimeStart;                                       // 0x0114(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0118(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.EvilWithinComponent"));

		return ptr;
	}


	void OnRep_CurrentTier(int* previousTier);
	void OnLevelReadyToPlay();
	bool IsAtLastTier();
	float GetRequirementForTier(int* tier);
	float GetPercentStalkingPointsInCurrentTier();
	int GetMaxTier();
	int GetCurrentTier();
	bool CanStandKill(class ADBDPlayer** Player);
	bool CanBeStandingKilled(class ADBDPlayer** Player);
	void Authority_OnStalkPointsAdded(float* stalkPoints);
	void Authority_OnPlayerDisconnect(class ADBDPlayer** Player);
	void Authority_NotifyKill(class ADBDPlayer** killedPlayer);
};


// Class DeadByDaylight.ExitOpenedIndicatorWidget
// 0x0000 (0x0330 - 0x0330)
class UExitOpenedIndicatorWidget : public UBaseIndicatorWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ExitOpenedIndicatorWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.ExposerCirclingComponent
// 0x0050 (0x02C0 - 0x0270)
class UExposerCirclingComponent : public USceneComponent
{
public:
	float                                              MaxHeight;                                                // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinRadius;                                                // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxRadius;                                                // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CirclingSpeed;                                            // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceBetweenPoints;                                    // 0x0280(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BezierModifier;                                           // 0x0284(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Samples;                                                  // 0x0288(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x34];                                      // 0x028C(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ExposerCirclingComponent"));

		return ptr;
	}


	void SetIsCircling(bool* circling);
	void Reset();
};


// Class DeadByDaylight.ExposerInteriorZoneComponent
// 0x0010 (0x05D0 - 0x05C0)
class UExposerInteriorZoneComponent : public UBoxComponent
{
public:
	TArray<class USceneComponent*>                     ExposerSpawnPoints;                                       // 0x05C0(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ExposerInteriorZoneComponent"));

		return ptr;
	}


	void AddExposerSpawnPoint(class USceneComponent** Point);
};


// Class DeadByDaylight.Fadeable
// 0x0000 (0x0030 - 0x0030)
class UFadeable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Fadeable"));

		return ptr;
	}

};


// Class DeadByDaylight.FearMarketManager
// 0x00D0 (0x0100 - 0x0030)
class UFearMarketManager : public UObject
{
public:
	struct FFearMarketItemInstance                     PendingPurchaseFearMarketItem;                            // 0x0030(0x0018)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0048(0x0050) MISSED OFFSET
	struct FFearMarketOfferingInstance                 _existingFearMarket;                                      // 0x0098(0x0020)
	TWeakObjectPtr<class UDBDGameInstance>             _gameInstance;                                            // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x40];                                      // 0x00C0(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FearMarketManager"));

		return ptr;
	}


	void ReceivedFearMarketData(bool* success);
};


// Class DeadByDaylight.FearMarketPopupScreen
// 0x0000 (0x0110 - 0x0110)
class UFearMarketPopupScreen : public UGenericPopupScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FearMarketPopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.Firecracker
// 0x0038 (0x0400 - 0x03C8)
class AFirecracker : public AInteractable
{
public:
	bool                                               DebugDisplayEnabled;                                      // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03C9(0x0007) MISSED OFFSET
	TArray<class UGameplayModifierContainer*>          _effectModifiers;                                         // 0x03D0(0x0010) (ExportObject, ZeroConstructor, Transient)
	bool                                               _exploded;                                                // 0x03E0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET
	TArray<class AActor*>                              _actorsInRange;                                           // 0x03E8(0x0010) (ZeroConstructor, Transient)
	class ADBDPlayer*                                  _playerOwner;                                             // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Firecracker"));

		return ptr;
	}


	bool ShouldDeafen(class ADBDPlayer** Player, float* outDuration);
	bool ShouldBlind(class ADBDPlayer** Player, float* outDuration);
	void OnFuseBurnUpdate(float* DeltaSeconds, float* fuseTimeLeftPercent);
	void OnFuseBurnExit();
	void OnFuseBurnEnter();
	void OnExplode();
	void OnEffectsInitialized();
	void Multicast_InitFromSpawner(class ACollectable** spawner);
	bool HasModifierOfType(struct FGameplayTag* Type);
	bool HasFlag(struct FGameplayTag* flag);
	float GetModifierValue(struct FGameplayTag* Type);
	float GetExplosionRange();
	float GetExplosionEffectDuration();
	float GetExplosionDelay();
	bool GetExploded();
	TArray<class UGameplayModifierContainer*> GetEffects();
	class UPrimitiveComponent* GetEffectArea();
	float GetDeafnessEffectDuration(class ADBDPlayer** Player);
	float GetBlindnessEffectDuration(class ADBDPlayer** Player);
};


// Class DeadByDaylight.FirecrackerEffectHandlerComponent
// 0x0040 (0x0140 - 0x0100)
class UFirecrackerEffectHandlerComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnFirecrackerInRangeBegin;                                // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFirecrackerInRangeUpdate;                               // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFirecrackerInRangeEnd;                                  // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FFirecrackerEffectData>              _effectDataList;                                          // 0x0130(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FirecrackerEffectHandlerComponent"));

		return ptr;
	}


	void SetFirecrackerInRange(class AFirecracker** Firecracker, bool* InRange);
	void OnFirecrackerDestroyed(class AActor** DestroyedActor);
};


// Class DeadByDaylight.FirecrackerStateMachine
// 0x0000 (0x0170 - 0x0170)
class UFirecrackerStateMachine : public UStateMachine
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FirecrackerStateMachine"));

		return ptr;
	}


	void Server_SetStateStack(TArray<uint16_t>* netStateIDStack);
	void NetIDStackChanged();
	void Multicast_SetStateStack(TArray<uint16_t>* netStateIDStack);
};


// Class DeadByDaylight.FlashLightableComponent
// 0x00D8 (0x01D8 - 0x0100)
class UFlashLightableComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnLitChanged;                                             // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAuthorityChargeComplete;                                // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              _timeToCharge;                                            // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _timeBeforeChargeReset;                                   // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              _timeToUnlit;                                             // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       _flashLightableSocketName;                                // 0x012C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x012C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	bool                                               _isLit;                                                   // 0x0138(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x9F];                                      // 0x0139(0x009F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FlashLightableComponent"));

		return ptr;
	}


	void SetTimeToCharge(float* timeToCharge);
	void OnRep_IsLit();
	void OnLitChargeComplete__DelegateSignature(class ADBDPlayer** effector);
	void OnLitChanged__DelegateSignature(bool* IsLit);
	bool IsLit();
	float GetTimeToCharge();
};


// Class DeadByDaylight.FlashLightComponent
// 0x0070 (0x0170 - 0x0100)
class UFlashLightComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET
	float                                              BlindingScoreCooldown;                                    // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	TScriptInterface<class UAimingStrategyInterface>   AimStrategy;                                              // 0x0118(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USceneComponent*                             Tip;                                                      // 0x0128(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USpotLightComponent*                         _spotlight;                                               // 0x0130(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UChargerComponent*                           _charger;                                                 // 0x0138(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0140(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FlashLightComponent"));

		return ptr;
	}


	bool UsingCheapSpotLightOcclusion();
	void Server_UpdateFlashLightableLitCharge(class UFlashLightableComponent** FlashLightable, float* DeltaSeconds);
	void Server_StopBlindCharge();
	void Server_StartBlindCharge();
	void OnUseReleased();
	void OnUse();
	bool IsSlasherBlinded();
	bool IsInUse();
	float GetOcclusionDistance();
	float GetMaxAimingDistance();
	float GetEffectiveTimeToInvisibilityBurnoutModifier();
	float GetEffectiveTimeToBlindModifier();
	float GetEffectiveBlindnessDuration();
	float GetEffectiveBeamLength();
	float GetEffectiveBeamHalfAngle();
	float GetEffectiveAccuracy();
};


// Class DeadByDaylight.FlashLightReceiverComponent
// 0x0010 (0x0110 - 0x0100)
class UFlashLightReceiverComponent : public UActorComponent
{
public:
	TArray<TWeakObjectPtr<class UFlashLightComponent>> _flashLights;                                             // 0x0100(0x0010) (ExportObject, Net, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FlashLightReceiverComponent"));

		return ptr;
	}


	bool IsInAnyFlashLightZone();
	bool STATIC_IsActorInAnyFlashLightZone(class AActor** Target);
	void Authority_RemoveFlashLight(class UFlashLightComponent** Flashlight);
	void Authority_AddFlashLight(class UFlashLightComponent** Flashlight);
};


// Class DeadByDaylight.FleeComponent
// 0x0020 (0x0120 - 0x0100)
class UFleeComponent : public UActorComponent
{
public:
	class AActor*                                      _threat;                                                  // 0x0100(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0108(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FleeComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.FootSteps
// 0x0070 (0x03B0 - 0x0340)
class AFootSteps : public AActor
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0340(0x0004) MISSED OFFSET
	float                                              _raycastHalfAngle;                                        // 0x0344(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _raycastZOffset;                                          // 0x0348(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _raycastDistance;                                         // 0x034C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterial*                                   _material;                                                // 0x0350(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _minimumDecalSize;                                        // 0x0358(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _maximumDecalSize;                                        // 0x035C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _projectionTickness;                                      // 0x0360(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0364(0x0004) MISSED OFFSET
	class UCurveFloat*                                 _fadeCurve;                                               // 0x0368(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 _veinsCurve;                                              // 0x0370(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FFootStep>                           _footSteps;                                               // 0x0378(0x0010) (ZeroConstructor, Transient)
	TArray<class UDecalComponent*>                     _decalPool;                                               // 0x0388(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0398(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FootSteps"));

		return ptr;
	}


	void OnLoudNoiseTriggered(class AActor** originator, class AActor** instigatingActor, struct FVector* Location, bool* shouldTrack, float* audibleRange, bool* isQuickAction);
};


// Class DeadByDaylight.FrenzyComponent
// 0x0110 (0x0210 - 0x0100)
class UFrenzyComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnFrenzyStarted;                                          // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFrenzyEnded;                                            // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFrenzyEndedNoCooldown;                                  // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInjuredBleedoutStartedDuringFrenzy;                     // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFrenzyReadyToStart;                                     // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x70];                                      // 0x0150(0x0070) MISSED OFFSET
	class ASlasherPlayer*                              _slasher;                                                 // 0x01C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x01C8(0x0028) MISSED OFFSET
	class UInteractionDefinition*                      _cooldownInteraction;                                     // 0x01F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x01F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FrenzyComponent"));

		return ptr;
	}


	void StartFrenzy();
	void SetStartingFrenzy(bool* startingFrenzy);
	void SetObjectState(class UGameplayTagContainerComponent** objectState);
	void ResumeFrenzyChargeDepletion();
	void PauseFrenzyChargeDepletion();
	void OnMoriStarted();
	void OnGameEventDispatched(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void OnFrenzyCooldownStarted();
	bool IsInFrenzyCooldown();
	bool IsInFrenzy();
	void InitializeFrenzy();
	bool HasStartedInjuredBleedoutDuringThisFrenzy();
	void EndFrenzy(EFrenzyEndReason* Reason);
	bool CanStartFrenzy();
	bool CanManuallyEndFrenzy();
};


// Class DeadByDaylight.FriendManager
// 0x0178 (0x01A8 - 0x0030)
class UFriendManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x178];                                     // 0x0030(0x0178) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FriendManager"));

		return ptr;
	}

};


// Class DeadByDaylight.FriendsListScreen
// 0x0048 (0x0138 - 0x00F0)
class UFriendsListScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x00F0(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.FriendsListScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.GameAssetLibrary
// 0x0018 (0x00C8 - 0x00B0)
class UGameAssetLibrary : public UAssetLibrary
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00B0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameAssetLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.GameEventAnalyticsComponent
// 0x0018 (0x0048 - 0x0030)
class UGameEventAnalyticsComponent : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameEventAnalyticsComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.GameEventDispatcher
// 0x00A8 (0x00D8 - 0x0030)
class UGameEventDispatcher : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET
	class URecentGameEventTracker*                     _recentGameEventTracker;                                  // 0x0080(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0088(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameEventDispatcher"));

		return ptr;
	}


	void UnregisterListener(struct FGameEventDispatcherHandleBP* GameEventDispatcherHandle);
	void RemotelyDispatch(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void RegisterListener(struct FGameEventDispatcherHandleBP* GameEventDispatcherHandle);
	void LocallyDispatch(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	class URecentGameEventTracker* GetRecentEventTracker();
	void Authority_RemotelyDispatch(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
};


// Class DeadByDaylight.GameEventListenerCollectionComponent
// 0x0018 (0x0118 - 0x0100)
class UGameEventListenerCollectionComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0100(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameEventListenerCollectionComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.GameEventTracker
// 0x0038 (0x0068 - 0x0030)
class UGameEventTracker : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnGameplayEvent;                                          // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGameflowEvent;                                          // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0050(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameEventTracker"));

		return ptr;
	}


	void FireGameflowEvent(EDBDScoreTypes* EventType, float* amount, class ADBDPlayerState** Instigator, struct FName* Data);
	void FireGameEvent(EDBDScoreTypes* EventType, float* amount, class AActor** Instigator, class AActor** Target);
	void FireAnalyticEvent(struct FString* EventName);
};


// Class DeadByDaylight.GameFlowContextSystem
// 0x00B8 (0x00E8 - 0x0030)
class UGameFlowContextSystem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0030(0x0090) MISSED OFFSET
	class URootMovie*                                  m_RootMovie;                                              // 0x00C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x00C8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameFlowContextSystem"));

		return ptr;
	}

};


// Class DeadByDaylight.GameFlowHandler
// 0x0058 (0x0088 - 0x0030)
class UGameFlowHandler : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class UGameFlowContextSystem*                      _contextSystem;                                           // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0040(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameFlowHandler"));

		return ptr;
	}

};


// Class DeadByDaylight.GameOn
// 0x00A0 (0x00D0 - 0x0030)
class UGameOn : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0030(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameOn"));

		return ptr;
	}

};


// Class DeadByDaylight.GameplayModifierFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UGameplayModifierFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameplayModifierFunctionLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.GameplayNotificationManager
// 0x0028 (0x0058 - 0x0030)
class UGameplayNotificationManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GameplayNotificationManager"));

		return ptr;
	}

};


// Class DeadByDaylight.GateFactory
// 0x0000 (0x0340 - 0x0340)
class AGateFactory : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GateFactory"));

		return ptr;
	}


	bool WasRecentlyRendered(float* Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor** InParentActor, struct FName* InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetReplicates(bool* bInReplicates);
	void SetReplicateMovement(bool* bInReplicateMovement);
	void SetOwner(class AActor** NewOwner);
	void SetNetDormancy(TEnumAsByte<ENetDormancy>* NewDormancy);
	void SetLifeSpan(float* InLifespan);
	void SetActorTickInterval(float* TickInterval);
	void SetActorTickEnabled(bool* bEnabled);
	void SetActorScale3D(struct FVector* NewScale3D);
	void SetActorRelativeScale3D(struct FVector* NewRelativeScale);
	void SetActorHiddenInGame(bool* bNewHidden);
	void SetActorEnableCollision(bool* bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveRadialDamage(float* DamageReceived, class UDamageType** DamageType, struct FVector* Origin, struct FHitResult* HitInfo, class AController** InstigatedBy, class AActor** DamageCauser);
	void ReceivePointDamage(float* Damage, class UDamageType** DamageType, struct FVector* HitLocation, struct FVector* HitNormal, class UPrimitiveComponent** HitComponent, struct FName* BoneName, struct FVector* ShotFromDirection, class AController** InstigatedBy, class AActor** DamageCauser, struct FHitResult* HitInfo);
	void ReceiveHit(class UPrimitiveComponent** MyComp, class AActor** Other, class UPrimitiveComponent** OtherComp, bool* bSelfMoved, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* NormalImpulse, struct FHitResult* Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float* Damage, class UDamageType** DamageType, class AController** InstigatedBy, class AActor** DamageCauser);
	void ReceiveActorOnReleased(struct FKey* ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnClicked(struct FKey* ButtonPressed);
	void ReceiveActorEndOverlap(class AActor** OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor** OtherActor);
	void ReceiveActorBeginCursorOver();
	void PrestreamTextures(float* Seconds, bool* bEnableStreaming, int* CinematicTextureGroups);
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float* Loudness, class APawn** NoiseInstigator, struct FVector* NoiseLocation, float* MaxRange, struct FName* Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface** Parent);
	bool K2_TeleportTo(struct FVector* DestLocation, struct FRotator* DestRotation);
	bool K2_SetActorTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(struct FRotator* NewRotation, bool* bTeleportPhysics);
	void K2_SetActorRelativeTransform(struct FTransform* NewRelativeTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(struct FRotator* NewRelativeRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(struct FVector* NewRelativeLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController** PC);
	void K2_OnBecomeViewTarget(class APlayerController** PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor(EDetachmentRule* LocationRule, EDetachmentRule* RotationRule, EDetachmentRule* ScaleRule);
	void K2_DestroyComponent(class UActorComponent** Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent** Parent, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor** ParentActor, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor** InParentActor, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachLocationType, bool* bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent** InParent, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachLocationType, bool* bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor** Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor** OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor** OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass** ClassFilter, TArray<class AActor*>* OverlappingActors);
	TEnumAsByte<ENetRole> GetLocalRole();
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(struct FKey* InputAxisKey);
	float GetInputAxisValue(struct FName* InputAxisName);
	float GetInputAxisKeyValue(struct FKey* InputAxisKey);
	float GetHorizontalDotProductTo(class AActor** OtherActor);
	float GetHorizontalDistanceTo(class AActor** OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor** OtherActor);
	float GetDistanceTo(class AActor** OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass** ComponentClass, struct FName* Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass** ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass** ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool* bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool* bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController** PlayerController);
	void DisableInput(class APlayerController** PlayerController);
	void DetachRootComponentFromParent(bool* bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	class UActorComponent* AddComponent(struct FName* TemplateName, bool* bManualAttachment, struct FTransform* RelativeTransform, class UObject** ComponentTemplateContext);
	bool ActorHasTag(struct FName* Tag);
};


// Class DeadByDaylight.Generator
// 0x0128 (0x04F0 - 0x03C8)
class AGenerator : public AInteractable
{
public:
	bool                                               activated;                                                // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsRepaired;                                               // 0x03C9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ForceRevealToLocalPlayer;                                 // 0x03CA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x03CB(0x0005) MISSED OFFSET
	class UCurveLinearColor*                           KillerOutlineFadeCurve;                                   // 0x03D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NativePercentComplete;                                    // 0x03D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGeneratorRepaired;                                      // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGeneratorRepairedBySurvivor;                            // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnIsDamagedChanged;                                       // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0410(0x0030) MISSED OFFSET
	bool                                               FireLevelScoreEventOnFix;                                 // 0x0440(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xB];                                       // 0x0441(0x000B) MISSED OFFSET
	struct FGameplayTag                                _repairSemanticTag;                                       // 0x044C(0x000C) (Edit)
	struct FDamageData                                 _damageData;                                              // 0x0458(0x0020) (Net, Transient)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0478(0x0004) MISSED OFFSET
	bool                                               _isBlocked;                                               // 0x047C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isBlockedFromCharging;                                   // 0x047D(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x047E(0x0002) MISSED OFFSET
	unsigned char                                      UnknownData06[0x50];                                      // 0x047E(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.Generator._blockingSources
	class UChargeableComponent*                        _generatorCharge;                                         // 0x04D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData07[0x18];                                      // 0x04D8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Generator"));

		return ptr;
	}


	void TriggerSkillCheckFailureLoudNoise(class ADBDPlayer** instigatingPlayer);
	void SetIsBlockedFromCharging(bool* isBlockedFromCharging);
	void SetComplete(bool* complete);
	void ResetGenerator();
	void PlayFailSparksFX(class ADBDPlayer** interactingPlayer, bool* Explode);
	void OnUpdateChargeProgress(float* newPercentComplete);
	void OnResetGenerator();
	void OnRep_IsBlocked();
	void OnRep_DamageData();
	void OnEscapeDoorActivated();
	void OnDamageCosmetic(bool* intense);
	void OnChargeChanged(class UChargeableComponent** ChargeableComponent, float* percent);
	void OnBlockingStatusChanged(bool* IsBlocked);
	void Multicast_PlayFailSparksFX(class ADBDPlayer** Player, bool* Explode);
	void Multicast_DamageCosmetic(bool* intense);
	bool IsIntenseDamage();
	bool IsDamaged();
	bool IsBlocked();
	bool IsBeingRepaired();
	float GetRepairPercentComplete();
	TArray<class ADBDPlayer*> GetRepairers();
	class UMapActorComponent* GetMapActorComponent();
	bool GetIsBlockedFromCharging();
	class UChargeableComponent* GetGeneratorChargeComponent();
	void BroadcastIsDamagedChangedEvent(class ADBDPlayer** Player);
	void BroadcastGeneratorRepairedBySurvivor(class ADBDPlayer** repairingSurvivor);
	void BroadcastGeneratorRepaired();
	void Authority_RepairDamage(class ADBDPlayer** repairedBy);
	void Authority_RemoveBlockingSource(class UObject** Source);
	bool Authority_HasRepairedDamage(class ADBDPlayer** Player);
	void Authority_Damage(class ADBDPlayer** damagedBy, float* immediateRegressionPercent);
	void Authority_AddBlockingSource(class UObject** Source);
};


// Class DeadByDaylight.GeneratorAnimInstance
// 0x0000 (0x0280 - 0x0280)
class UGeneratorAnimInstance : public USleepingAnimInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GeneratorAnimInstance"));

		return ptr;
	}


	void SetSkillCheckSuccess(bool* success);
};


// Class DeadByDaylight.GeneratorEntity
// 0x0028 (0x0368 - 0x0340)
class AGeneratorEntity : public AActor
{
public:
	class AGenerator*                                  _associatedGenerator;                                     // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMontagePlayer*                              _montagePlayer;                                           // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0350(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GeneratorEntity"));

		return ptr;
	}


	void SetSkeletalMeshActive(bool* Active);
	void SetAssociatedGenerator(class AGenerator** Generator);
	class UMontagePlayer* GetMontagePlayer();
};


// Class DeadByDaylight.GeneratorEntityAnimInstance
// 0x0000 (0x0270 - 0x0270)
class UGeneratorEntityAnimInstance : public UAnimInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GeneratorEntityAnimInstance"));

		return ptr;
	}

};


// Class DeadByDaylight.GeneratorIndicatorWidget
// 0x0000 (0x0330 - 0x0330)
class UGeneratorIndicatorWidget : public UBaseIndicatorWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GeneratorIndicatorWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.GeneratorOutlineUpdateStrategy
// 0x0038 (0x01B0 - 0x0178)
class UGeneratorOutlineUpdateStrategy : public USourceBasedOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _unrepairedAuraColor;                                     // 0x0178(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                _fullyRepairedAuraColor;                                  // 0x0188(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0198(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GeneratorOutlineUpdateStrategy"));

		return ptr;
	}


	struct FLinearColor GetYellowColor();
	struct FLinearColor GetWhiteColor();
};


// Class DeadByDaylight.GestureInteractionDefinition
// 0x0010 (0x04C0 - 0x04B0)
class UGestureInteractionDefinition : public UInteractionDefinition
{
public:
	EGestureID                                         _gestureID;                                               // 0x04B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x04B1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GestureInteractionDefinition"));

		return ptr;
	}

};


// Class DeadByDaylight.GhostKillerAnalyticsComponent
// 0x0100 (0x0200 - 0x0100)
class UGhostKillerAnalyticsComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0100(0x0038) MISSED OFFSET
	struct FGhostKillerAnalytics                       _ghostKillerAnalytics;                                    // 0x0138(0x00A0) (Net)
	unsigned char                                      UnknownData01[0x28];                                      // 0x01D8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GhostKillerAnalyticsComponent"));

		return ptr;
	}


	void Local_OnStalkModeChanged(bool* IsInStalkMode);
	void Local_OnLeanStateChanged(ELeanState* leanState);
	void Local_OnIsStealthChanged(bool* IsStealth);
	void Authority_OnStalkChargePercentChanged(class UChargeableComponent** ChargeableComponent, float* PercentCompletionChange, float* TotalPercentComplete);
	void Authority_OnPreAttackSuccess(struct FGameplayTag* GameplayTag, struct FGameEventData* GameEventData);
};


// Class DeadByDaylight.GhostStalkedComponent
// 0x0138 (0x0238 - 0x0100)
class UGhostStalkedComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnIsMarkedChanged;                                        // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnIsSpottingKillerChanged;                                // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FTagStateBool                               _isMarked;                                                // 0x0120(0x0030) (Net, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0150(0x0008) MISSED OFFSET
	class UStatusEffect*                               _ghostKillerInstinctEffect;                               // 0x0158(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0160(0x0030) MISSED OFFSET
	class UTimerObject*                                _markTimer;                                               // 0x0190(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0198(0x0010) MISSED OFFSET
	class ASlasherPlayer*                              _killer;                                                  // 0x01A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UStalkedComponent*                           _stalkedComponent;                                        // 0x01B0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x80];                                      // 0x01B8(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GhostStalkedComponent"));

		return ptr;
	}


	void OnKillerStealthChanged(bool* IsStealth);
	void OnIsSpottingKiller__DelegateSignature(bool* isSpotting);
	void OnIsMarkedChanged__DelegateSignature(bool* IsMarked);
	void OnCharacterSightChanged(class ACharacter** Character, class UCharacterSightComponent** sightComponent);
	void Local_OnSpotKiller();
	bool IsMarked();
	void Initialize(class ASlasherPlayer** Killer);
	void Client_OnSpotKiller();
	void Authority_OnStalkedChargeFull(bool* COMPLETED, TArray<class AActor*>* instigatorsForCompletion);
};


// Class DeadByDaylight.GhostStalkPowerComponent
// 0x00C0 (0x01C0 - 0x0100)
class UGhostStalkPowerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET
	class UStalkerComponent*                           _stalkerComponent;                                        // 0x0130(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0138(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.GhostStalkPowerComponent._ghostStalkedComponentClassPtr
	class UBoxComponent*                               _standingOcclusionBox;                                    // 0x0168(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               _crouchOcclusionBox;                                      // 0x0170(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              _crouchAttackRequiredTimeSeconds;                         // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x14];                                      // 0x017C(0x0014) MISSED OFFSET
	bool                                               _debugMode;                                               // 0x0190(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2F];                                      // 0x0191(0x002F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GhostStalkPowerComponent"));

		return ptr;
	}


	void RefreshSurvivorMaximumSightDistance();
	void OnLeanStateChanged(ELeanState* leanState);
	void OnIsCrouchedChanged(bool* isCrouched);
	void Authority_OnStalkModeChanged(bool* IsInStalkMode);
};


// Class DeadByDaylight.GhostStealthComponent
// 0x0148 (0x0248 - 0x0100)
class UGhostStealthComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnSuccessfulAttackInStealth;                              // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStealthStateChanged;                                    // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnIsStealthChanged;                                       // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnIsBeingSpotChanged;                                     // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    Local_OnStealthCancelledByPlayer;                         // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	EGhostStealthState                                 _stealthState;                                            // 0x0150(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3F];                                      // 0x0151(0x003F) MISSED OFFSET
	class UTimerObject*                                _cooldownTimer;                                           // 0x0190(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TMap<class ACharacter*, TWeakObjectPtr<class ASoundMarker>> _markers;                                                 // 0x0198(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x01E8(0x0010) MISSED OFFSET
	float                                              _markerMaxAngleOffset;                                    // 0x01F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               _useKillerInstinctWhenSpotted;                            // 0x01FC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01FD(0x0003) MISSED OFFSET
	class UCharacterSightableComponent*                _sightableComponent;                                      // 0x0200(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UStalkerComponent*                           _stalkerComponent;                                        // 0x0208(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x38];                                      // 0x0210(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.GhostStealthComponent"));

		return ptr;
	}


	void SetRedStainVisibility(bool* visible);
	void Server_ResetGhostStealth();
	void OnSuccessfulAttackInStealth__DelegateSignature(class ADBDPlayer** Target);
	void OnStealthStateChanged__DelegateSignature(EGhostStealthState* stealthState);
	void OnStealthCancelledByPlayer__DelegateSignature(class ADBDPlayer** Player);
	void OnRep_StealthState(EGhostStealthState* previousState);
	void OnIsStealthChanged__DelegateSignature(bool* IsStealth);
	void OnIsBeingSpotChanged__DelegateSignature(bool* isBeingSpot);
	void Multicast_BroadcastOnSuccessfulAttackInStealth(class ADBDPlayer** Target);
	bool IsStealthReadyToActivate();
	bool IsStealth();
	EGhostStealthState GetStealthState();
	float GetStealthChargePercent();
	void Client_SpawnMarkerOnCharacter(class ACharacter** Character);
	void Client_OnPlayerSpottedKiller(class ADBDPlayer** Player);
	void Authority_TryActivateStealth();
};


// Class DeadByDaylight.HalloweenEventAnalyticsComponent
// 0x0048 (0x0148 - 0x0100)
class UHalloweenEventAnalyticsComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0100(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HalloweenEventAnalyticsComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.HalloweenEventComponent
// 0x0090 (0x0190 - 0x0100)
class UHalloweenEventComponent : public UActorComponent
{
public:
	class USectionnedChargeableComponent*              _toxinVialComponent;                                      // 0x0100(0x0008) (Edit, ExportObject, Net, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UHalloweenEventAnalyticsComponent*           _halloweenAnalyticsComponent;                             // 0x0108(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x80];                                      // 0x0110(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HalloweenEventComponent"));

		return ptr;
	}


	void Server_SpawnVial(float* initialCharge);
	void OnRep_Vial();
	void OnFinishedPlaying(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	bool IsVialFull();
	class USectionnedChargeableComponent* GetVial();
};


// Class DeadByDaylight.HasTokenOrActivationTimerElapsedIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UHasTokenOrActivationTimerElapsedIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HasTokenOrActivationTimerElapsedIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.Hatch
// 0x0008 (0x03D0 - 0x03C8)
class AHatch : public AInteractable
{
public:
	EHatchState                                        _hatchState;                                              // 0x03C8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               _isSurvivorEscaping;                                      // 0x03C9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isActive;                                                // 0x03CA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x03CB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Hatch"));

		return ptr;
	}


	void SetIsSurvivorEscaping(bool* escaping);
	void SetIsActive(bool* IsActive);
	void OnSurvivorEscaping();
	void OnSurvivorEscapeInterrupted();
	void OnSurvivorEscaped();
	void OnRep_HatchState();
	void OnHatchStateModified();
	void OnActiveChanged();
	void Local_SetHatchState(bool* Open);
	bool IsSurvivorEscaping();
	bool IsOpen();
	bool GetIsActive();
	EHatchState GetHatchState();
	class USceneComponent* GetHatchCenter();
	class USceneComponent* GetEscapeFocalPoint();
	class UAnimationMontageSlave* GetAnimationMontageSlave();
	void FXOpenHatch();
	void FXEndSmoke();
	void FXCloseHatch();
	void Authority_SetHatchState(EHatchState* newState);
};


// Class DeadByDaylight.HatchOutlineUpdateStrategy
// 0x0000 (0x0128 - 0x0128)
class UHatchOutlineUpdateStrategy : public UDefaultOutlineUpdateStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HatchOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.HexSpawner
// 0x0010 (0x0330 - 0x0320)
class UHexSpawner : public UActorSpawner
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0320(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HexSpawner"));

		return ptr;
	}


	bool UseActivatedElement();
	bool IsEnabled();
	void EditorForceSpawnVisualization();
	class AActor* AuthorityGetSpawnedActor();
	void Authority_SpawnActorAsyncEvent();
};


// Class DeadByDaylight.PlayerOverlapHISMComponent
// 0x0020 (0x0820 - 0x0800)
class UPlayerOverlapHISMComponent : public UHISMMaterialHelperComponent
{
public:
	int                                                _playerInfluenceRadius;                                   // 0x0800(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0804(0x0004) MISSED OFFSET
	TArray<class UMaterialInterface*>                  _playerOverlapOverrides;                                  // 0x0808(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0818(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerOverlapHISMComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.HookableComponent
// 0x0050 (0x0150 - 0x0100)
class UHookableComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0100(0x0018) MISSED OFFSET
	struct FDBDTimer                                   _drainTimer;                                              // 0x0118(0x0028) (Net, Transient)
	bool                                               _isDrainTimerPaused;                                      // 0x0140(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	int                                                _hookedCount;                                             // 0x0144(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                _hookedBasementCount;                                     // 0x0148(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x014C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HookableComponent"));

		return ptr;
	}


	void UpdateDrainTimer(float* DeltaTime);
	bool IsDrainTimerExpired();
	float GetDrainTimerPercentLeft();
	void Authority_SetDrainTimerPercentLeft(float* percentTime);
	void Authority_SetDrainTimerPercentElapsed(float* percentTime);
};


// Class DeadByDaylight.HookAnalyticsBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UHookAnalyticsBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HookAnalyticsBlueprintLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.HookedIndicatorWidget
// 0x0010 (0x0340 - 0x0330)
class UHookedIndicatorWidget : public UBaseIndicatorWidget
{
public:
	float                                              HookedIndicatorDuration;                                  // 0x0330(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0334(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HookedIndicatorWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.HudScreen
// 0x00D8 (0x01C8 - 0x00F0)
class UHudScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0xD8];                                      // 0x00F0(0x00D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HudScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.HudScreenScaleform
// 0x0000 (0x01C8 - 0x01C8)
class UHudScreenScaleform : public UHudScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HudScreenScaleform"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.HudScreenUMG
// 0x0108 (0x02D0 - 0x01C8)
class UHudScreenUMG : public UHudScreen
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01C8(0x0008) MISSED OFFSET
	class UUmgPlayerHud*                               _atlantaHud;                                              // 0x01D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class USafeZoneManagerWidget*                      _safeZoneManager;                                         // 0x01D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UNoiseIndicatorWidget*>               _closeNoiseIndicatorWidgets;                              // 0x01E0(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UExitOpenedIndicatorWidget*>          _exitOpenedIndicatorWidgets;                              // 0x01F0(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UGeneratorIndicatorWidget*>           _generatorIndicatorWidgets;                               // 0x0200(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UNoiseIndicatorWidget*>               _hatchIndicatorWidgets;                                   // 0x0210(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UHookedIndicatorWidget*>              _hookedIndicatorWidgets;                                  // 0x0220(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UKillerNoiseIndicatorWidget*>         _killerCuesIndicatorWidgets;                              // 0x0230(0x0010) (ExportObject, ZeroConstructor, Transient)
	TMap<struct FString, class UNoiseIndicatorWidget*> _loudNoiseIndicatorWidgets;                               // 0x0240(0x0050) (ExportObject, ZeroConstructor, Transient)
	class UPromptManager*                              _promptManager;                                           // 0x0290(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAtlantaTutorialObjectiveManager*            _objectiveManager;                                        // 0x0298(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x02A0(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.HudScreenUMG.AtlantaObjectiveClass

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.HudScreenUMG"));

		return ptr;
	}

};


// Class DeadByDaylight.InactiveCooldownTimerPerkIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UInactiveCooldownTimerPerkIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.InactiveCooldownTimerPerkIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.InboxScreen
// 0x00D0 (0x01C0 - 0x00F0)
class UInboxScreen : public UScreenBase
{
public:
	class UUMGInboxScreen*                             _umgScreen;                                               // 0x00F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<struct FInboxMessageUIData>                 _newsMessages;                                            // 0x00F8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FInboxMessageUIData>                 _rewardsMessages;                                         // 0x0108(0x0010) (ZeroConstructor, Transient)
	TArray<struct FInboxMessageUIData>                 _socialMessages;                                          // 0x0118(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x98];                                      // 0x0128(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.InboxScreen"));

		return ptr;
	}

};


// Class DeadByDaylight.InfectedInteractableComponent
// 0x00D0 (0x01D0 - 0x0100)
class UInfectedInteractableComponent : public UActorComponent
{
public:
	class UCurveFloat*                                 VomitAlphaCurve;                                          // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTimelineComponent*                          _vomitAlphaTimeline;                                      // 0x0108(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0110(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.InfectedInteractableComponent"));

		return ptr;
	}


	void OnVomitAlphaUpdate(float* Alpha);
	void Multicast_FadeOutVomit();
	void Multicast_FadeInVomit();
	void Multicast_DebugDisplayLifetime(float* RemainingLifeTime);
	class AInteractable* GetOwningInteractable();
	void Authority_OnOwningInteractableBeginOrEndUse(bool* inUse, class ADBDPlayer** interactingPlayer);
	void Authority_OnHitWithVomit();
	bool Authority_IsAMaxSicknessSurvivorInteracting();
};


// Class DeadByDaylight.IniAssetLibrary
// 0x0010 (0x00C0 - 0x00B0)
class UIniAssetLibrary : public UAssetLibrary
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.IniAssetLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.InputMasher
// 0x0038 (0x0138 - 0x0100)
class UInputMasher : public UActorComponent
{
public:
	class UInputComponent*                             _inputComponent;                                          // 0x0100(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0108(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.InputMasher"));

		return ptr;
	}

};


// Class DeadByDaylight.InteractionAnimNotify
// 0x0010 (0x0050 - 0x0040)
class UInteractionAnimNotify : public UAnimNotify
{
public:
	struct FName                                       NotifyId;                                                 // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0040(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.InteractionAnimNotify"));

		return ptr;
	}

};


// Class DeadByDaylight.InteractionDetectorComponent
// 0x00F8 (0x01F8 - 0x0100)
class UInteractionDetectorComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         _detectionPrimitive;                                      // 0x0100(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0108(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.InteractionDetectorComponent._overlappingInteractables
	unsigned char                                      UnknownData01[0x50];                                      // 0x0158(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.InteractionDetectorComponent._overlappingPrimitiveComponents
	unsigned char                                      UnknownData02[0x50];                                      // 0x01A8(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.InteractionDetectorComponent._ignoredActors

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.InteractionDetectorComponent"));

		return ptr;
	}


	void SetDetectionPrimitive(class UPrimitiveComponent** detectionPrimitive);
	void OnLocallyObservedChanged(class ADBDPlayer** Player);
	class UPrimitiveComponent* GetDetectionPrimitive();
	void EndOverlapCallback(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void BeginOverlapCallback(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* fromSweep, struct FHitResult* SweepResult);
	void AddIgnoredActor(class AActor** ignored);
};


// Class DeadByDaylight.InteractionProficiency
// 0x0018 (0x0048 - 0x0030)
class UInteractionProficiency : public UObject
{
public:
	TArray<struct FString>                             InteractionIDs;                                           // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.InteractionProficiency"));

		return ptr;
	}


	float GetValue(class UChargeableInteractionDefinition** chargeableInteraction, class ADBDPlayer** Player);
	EStatusEffectType GetType(float* value);
	int GetLevel(class UChargeableInteractionDefinition** chargeableInteraction, class ADBDPlayer** Player);
	bool GetIsActive(class UChargeableInteractionDefinition** chargeableInteraction, class ADBDPlayer** Player);
};


// Class DeadByDaylight.Interactor
// 0x00D0 (0x0340 - 0x0270)
class UInteractor : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0270(0x0018) MISSED OFFSET
	struct FString                                     InteractorName;                                           // 0x0288(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               IsUsable;                                                 // 0x0298(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x37];                                      // 0x0299(0x0037) MISSED OFFSET
	struct FLock                                       _lock;                                                    // 0x02D0(0x0008) (Transient)
	struct FLock                                       _reservation;                                             // 0x02D8(0x0008) (Transient)
	class UInteractionDefinition*                      _currentInteraction;                                      // 0x02E0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UInteractionDefinition*>              _interactionDefinitions;                                  // 0x02E8(0x0010) (ExportObject, ZeroConstructor)
	struct FActivationDefinition                       _activationDefinition;                                    // 0x02F8(0x0028) (Edit)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0320(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Interactor"));

		return ptr;
	}


	void Multicast_ReservationStatus(class ADBDPlayer** Player, bool* Lock);
	void Multicast_LockStatus(class ADBDPlayer** Player, class UInteractionDefinition** currentInteraction, bool* Lock);
	bool IsInterruptionPossible(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee, class UInteractionDefinition** definition, class UInterruptionDefinition** interruption);
	bool IsInteracting();
	TArray<class UInteractionDefinition*> GetInteractionDefinitions();
	class ADBDPlayer* GetInteractingPlayerRaw();
	class AInteractable* GetInteractable();
	class UInteractionDefinition* GetCurrentInteraction();
	bool CanPerformInteraction(class ADBDPlayer** Player, class UInteractionDefinition** definition);
	void BPPostInitializeComponents();
	class ADBDPlayer* Authority_GetInteractingPlayer();
};


// Class DeadByDaylight.InterruptionDefinition
// 0x00F0 (0x0360 - 0x0270)
class UInterruptionDefinition : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0270(0x0004) MISSED OFFSET
	bool                                               _usesWorldCoordinates;                                    // 0x0274(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               _snapInterruptor;                                         // 0x0275(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xA];                                       // 0x0276(0x000A) MISSED OFFSET
	struct FTransform                                  _interruptionSnapPointForInterruptor;                     // 0x0280(0x0030) (Edit, IsPlainOldData)
	struct FAnimationMontageDescriptor                 _animationMontageToPlayOnInterruptionEnterForInterruptor; // 0x02B0(0x0020) (Edit)
	struct FAnimationMontageDescriptor                 _animationMontageToPlayOnInterruptionForInterruptorNew;   // 0x02D0(0x0020) (Edit)
	bool                                               _snapInterruptee;                                         // 0x02F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x02F1(0x000F) MISSED OFFSET
	struct FTransform                                  _interruptionSnapPointForInterruptee;                     // 0x0300(0x0030) (Edit, IsPlainOldData)
	struct FAnimationMontageDescriptor                 _animationMontageToPlayOnInterruptionForInterrupteeNew;   // 0x0330(0x0020) (Edit)
	bool                                               _pickUpOnInterrupt;                                       // 0x0350(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               _canInterruptWhileCarrying;                               // 0x0351(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               _useMontageFollower;                                      // 0x0352(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0353(0x0001) MISSED OFFSET
	float                                              _maxHeightDeltaBetweenCharacters;                         // 0x0354(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0358(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.InterruptionDefinition"));

		return ptr;
	}


	void SetInterruptorSnapPoint(struct FTransform* Point);
	void SetInterrupteeSnapPoint(struct FTransform* Point);
	void OnInterruptionUpdateStart(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee);
	void OnInterruptionExitEnd(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee);
	void OnInterruptionEnterStart(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee);
	bool IsUsingMontageFollower();
	bool IsUsingAttack();
	bool IsInterruptionPossible(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee);
	bool InteractionCheckHeightDelta(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee);
	struct FRotator GetInterruptionSnapPointRotationForInterruptor(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee);
	struct FRotator GetInterruptionSnapPointRotationForInterruptee(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee);
	struct FVector GetInterruptionSnapPointPositionForInterruptor(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee);
	struct FVector GetInterruptionSnapPointPositionForInterruptee(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee);
	class UInteractionDefinition* GetInteractionDefinition();
	class AInteractable* GetInteractable();
	bool CanInterruptWhileCarrying();
};


// Class DeadByDaylight.InventoryHandler
// 0x0078 (0x00A8 - 0x0030)
class UInventoryHandler : public UObject
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0030(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.InventoryHandler"));

		return ptr;
	}

};


// Class DeadByDaylight.IsMaximumInfected
// 0x0000 (0x0118 - 0x0118)
class UIsMaximumInfected : public UGameplayModifierCondition
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.IsMaximumInfected"));

		return ptr;
	}


	void SetSubjectProviderClass(class UClass** subjectProviderClass);
	void OnRep_SubjectProviderClass();
	void OnRep_OwningModifier();
	void InitializeSubjectProviderClass();
	class AActor* GetOwningActor();
};


// Class DeadByDaylight.IsNotSightedByAnyCharacter
// 0x0008 (0x0138 - 0x0130)
class UIsNotSightedByAnyCharacter : public UEventDrivenModifierCondition
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0130(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.IsNotSightedByAnyCharacter"));

		return ptr;
	}


	void SetSubjectProviderClass(class UClass** subjectProviderClass);
	void OnRep_SubjectProviderClass();
	void OnRep_OwningModifier();
	void InitializeSubjectProviderClass();
	class AActor* GetOwningActor();
};


// Class DeadByDaylight.ItemBlueprint
// 0x0000 (0x03C8 - 0x03C8)
class AItemBlueprint : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ItemBlueprint"));

		return ptr;
	}


	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};


// Class DeadByDaylight.ItemPerformedInteraction
// 0x0000 (0x0030 - 0x0030)
class UItemPerformedInteraction : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ItemPerformedInteraction"));

		return ptr;
	}

};


// Class DeadByDaylight.RecommendationsFilter
// 0x0008 (0x0038 - 0x0030)
class URecommendationsFilter : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RecommendationsFilter"));

		return ptr;
	}

};


// Class DeadByDaylight.ItemRecommendationsFilter
// 0x0028 (0x0060 - 0x0038)
class UItemRecommendationsFilter : public URecommendationsFilter
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0038(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ItemRecommendationsFilter"));

		return ptr;
	}

};


// Class DeadByDaylight.ItemVfx
// 0x0000 (0x0348 - 0x0348)
class AItemVfx : public ABaseVFX
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ItemVfx"));

		return ptr;
	}

};


// Class DeadByDaylight.KillerInstinctComponent
// 0x0020 (0x0120 - 0x0100)
class UKillerInstinctComponent : public UActorComponent
{
public:
	class UParticleSystemComponent*                    _killerInstinctParticleSystem;                            // 0x0100(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0108(0x0004) MISSED OFFSET
	struct FLinearColor                                _camperHighlightColorOverride;                            // 0x010C(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x011C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.KillerInstinctComponent"));

		return ptr;
	}


	void SetParticleSystem(class UParticleSystemComponent** killerInstinctParticleSystem);
	bool IsOwnerInKillerInstinctRadius();
	class UParticleSystemComponent* GetParticleSystem();
};


// Class DeadByDaylight.NoiseIndicatorWidget
// 0x0000 (0x0330 - 0x0330)
class UNoiseIndicatorWidget : public UBaseIndicatorWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.NoiseIndicatorWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.KillerNoiseIndicatorWidget
// 0x0000 (0x0330 - 0x0330)
class UKillerNoiseIndicatorWidget : public UNoiseIndicatorWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.KillerNoiseIndicatorWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.KillerOpenGate
// 0x0080 (0x0660 - 0x05E0)
class UKillerOpenGate : public UChargeableInteractionDefinition
{
public:
	struct FAnimationMontageDescriptor                 _openGateMontage;                                         // 0x05E0(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0600(0x0050) MISSED OFFSET
	TWeakObjectPtr<class ADBDPlayer>                   _interactingPlayer;                                       // 0x0650(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0658(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.KillerOpenGate"));

		return ptr;
	}


	void UpdateSwitch();
};


// Class DeadByDaylight.KillerProjectileLauncher
// 0x0000 (0x0178 - 0x0178)
class UKillerProjectileLauncher : public UBaseProjectileLauncher
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.KillerProjectileLauncher"));

		return ptr;
	}


	void SetProjectileVar(struct FName* VarName, float* value);
	void SetProjectilePool(class UAuthoritativeActorPoolComponent** projectilePool);
	void Server_Launch(struct FLaunchInfo* LaunchInfo, class ABaseProjectile** Projectile);
	void OnRep_Ammo();
	void OnLaunch(struct FLaunchInfo* LaunchInfo);
	void Local_Launch();
	bool IsLocallyControlled();
	bool IsAmmoFull();
	bool HasProjectile();
	bool HasAuthority();
	class ABaseProjectile* GetProjectileToLaunch();
	class APawn* GetOwningPawn();
	float GetLaunchSpeed();
	struct FVector GetLaunchPosition();
	struct FVector GetLaunchDirection();
	int GetAmmo();
	void Authority_Reload();
	void Authority_Launch();
	void Authority_AddMaxAmmo(int* ammoToAdd);
};


// Class DeadByDaylight.KillerSoundCuesComponent
// 0x0010 (0x0110 - 0x0100)
class UKillerSoundCuesComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.KillerSoundCuesComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.KillInteractionDefinition
// 0x0010 (0x05F0 - 0x05E0)
class UKillInteractionDefinition : public UChargeableInteractionDefinition
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x05E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.KillInteractionDefinition"));

		return ptr;
	}

};


// Class DeadByDaylight.LanternInteractable
// 0x0058 (0x0420 - 0x03C8)
class ALanternInteractable : public AInteractable
{
public:
	struct FScriptMulticastDelegate                    OnLanternStateChanged;                                    // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLanternCollectedByPlayerCosmetic;                       // 0x03D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x03E8(0x0020) MISSED OFFSET
	class UClass*                                      _collectableClass;                                        // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0410(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LanternInteractable"));

		return ptr;
	}


	void SlasherDestroyLantern(class ADBDPlayer** Player);
	void OnSlasherDestroyedLantern(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void OnCamperWasHooked(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void OnCamperLeavingHook(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void OnBackToCollectableTimerEnd();
	ELanternState GetLanternState();
	void CollectLight(class ADBDPlayer** Player);
	void ChangeLanternState(ELanternState* newLanternState);
	bool CanBeDestroyed();
	bool CanBeCollected();
};


// Class DeadByDaylight.LanternLightCollectable
// 0x0008 (0x04D8 - 0x04D0)
class ALanternLightCollectable : public ACollectable
{
public:
	class ALanternInteractable*                        _parentLantern;                                           // 0x04D0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LanternLightCollectable"));

		return ptr;
	}


	void SetParentLantern(class ALanternInteractable** parentLantern);
};


// Class DeadByDaylight.LegalMenuScreen
// 0x0030 (0x0120 - 0x00F0)
class ULegalMenuScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00F0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LegalMenuScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.LegionKillerAnalyticsComponent
// 0x0038 (0x0138 - 0x0100)
class ULegionKillerAnalyticsComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0100(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LegionKillerAnalyticsComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.LegionSurvivorAnalyticsComponent
// 0x0058 (0x0158 - 0x0100)
class ULegionSurvivorAnalyticsComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0100(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LegionSurvivorAnalyticsComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.WorldRunawayMeshComponent
// 0x0020 (0x0C40 - 0x0C20)
class UWorldRunawayMeshComponent : public USkeletalMeshComponent
{
public:
	float                                              ResetCooldown;                                            // 0x0C20(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0C24(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.WorldRunawayMeshComponent"));

		return ptr;
	}


	void SetShouldRunAwayWithRandomDelay(bool* should, float* delayRange);
	void SetShouldRunAwayWithDelay(bool* should, float* Delay);
	void SetShouldRunAway(bool* should);
	bool GetShouldRunAway();
	float GetRunawayMustTickDuration();
	float GetReturnMustTickDuration();
};


// Class DeadByDaylight.LevelCrowWRMeshComponent
// 0x0010 (0x0C50 - 0x0C40)
class ULevelCrowWRMeshComponent : public UWorldRunawayMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0C40(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LevelCrowWRMeshComponent"));

		return ptr;
	}


	void SetShouldRunAwayWithRandomDelay(bool* should, float* delayRange);
	void SetShouldRunAwayWithDelay(bool* should, float* Delay);
	void SetShouldRunAway(bool* should);
	bool GetShouldRunAway();
	float GetRunawayMustTickDuration();
	float GetReturnMustTickDuration();
};


// Class DeadByDaylight.LevelParadise
// 0x00F0 (0x0430 - 0x0340)
class ALevelParadise : public AActor
{
public:
	float                                              LoopStartDistance;                                        // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LoopDistance;                                             // 0x0344(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USceneComponent*                             MainPlayerSpawnPoint;                                     // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class USceneComponent*>                     OtherSurvivorSpawnPoints;                                 // 0x0350(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	TArray<class USceneComponent*>                     ParadiseTiles;                                            // 0x0360(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	class AActor*                                      ParadiseViewTarget;                                       // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0378(0x00A8) MISSED OFFSET
	class ADBDPlayer*                                  _spawnedMainPawn;                                         // 0x0420(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             _runnerComponent;                                         // 0x0428(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LevelParadise"));

		return ptr;
	}


	void ParadiseEntered(struct FParadiseData* PlayerData);
	void OnInterpolationDone();
	void EnterParadise(struct FParadiseData* PlayerData);
};


// Class DeadByDaylight.LevelUpPopupScreenUMG
// 0x0000 (0x0110 - 0x0110)
class ULevelUpPopupScreenUMG : public UGenericPopupScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LevelUpPopupScreenUMG"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.LightFollower
// 0x0030 (0x0130 - 0x0100)
class ULightFollower : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LightFollower"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.LightFunctionActorSpawner
// 0x0010 (0x0330 - 0x0320)
class ULightFunctionActorSpawner : public UActorSpawner
{
public:
	class UTexture*                                    LightFunctionTexture;                                     // 0x0320(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0328(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LightFunctionActorSpawner"));

		return ptr;
	}

};


// Class DeadByDaylight.LightingData
// 0x0070 (0x00A8 - 0x0038)
class ULightingData : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0038(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.LightingData.DefaultLighting
	unsigned char                                      UnknownData01[0x30];                                      // 0x0068(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.LightingData.DefaultAtlantaLighting
	TArray<struct FSceneLightingDescription>           Descriptions;                                             // 0x0098(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LightingData"));

		return ptr;
	}

};


// Class DeadByDaylight.LightingFactory
// 0x0008 (0x0038 - 0x0030)
class ULightingFactory : public UObject
{
public:
	class ULightingData*                               _data;                                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LightingFactory"));

		return ptr;
	}

};


// Class DeadByDaylight.LightingHelper
// 0x0068 (0x0098 - 0x0030)
class ULightingHelper : public UObject
{
public:
	class ABaseSky*                                    _levelLighting;                                           // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ABaseSky*                                    _levelLightingWithoutExposure;                            // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULightingInterpolator*                       _lightingInterpolator;                                    // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULightingFactory*                            _lightingFactory;                                         // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPostProcessComponent*                       _postProcessCache;                                        // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0058(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LightingHelper"));

		return ptr;
	}


	class UTextureCube* GetTextureCube(struct FName* mapTheme);
	void DBD_ModifyExposure(float* value);
};


// Class DeadByDaylight.LightingInterpolator
// 0x0050 (0x0080 - 0x0030)
class ULightingInterpolator : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnInterpolationDone;                                      // 0x0030(0x0010) (ZeroConstructor, Transient, InstancedReference)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0040(0x0038) MISSED OFFSET
	class ABaseSky*                                    _targetLighting;                                          // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LightingInterpolator"));

		return ptr;
	}


	void STATIC_LerpSkylight(class USkyLightComponent** Target, class USkyLightComponent** A, class USkyLightComponent** B, float* Alpha);
	void STATIC_LerpLight(class ULightComponent** Target, class ULightComponent** A, class ULightComponent** B, float* Alpha);
	void STATIC_LerpHeightFog(class UExponentialHeightFogComponent** Target, class UExponentialHeightFogComponent** A, class UExponentialHeightFogComponent** B, float* Alpha);
};


// Class DeadByDaylight.LoadingScreen
// 0x0000 (0x00F0 - 0x00F0)
class ULoadingScreen : public UScreenBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LoadingScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.LoadingScreenScaleform
// 0x0000 (0x00F0 - 0x00F0)
class ULoadingScreenScaleform : public ULoadingScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LoadingScreenScaleform"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.LoadingScreenUMG
// 0x0008 (0x00F8 - 0x00F0)
class ULoadingScreenUMG : public ULoadingScreen
{
public:
	class UUMGLoadingScreenWidget*                     _loadingScreen;                                           // 0x00F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LoadingScreenUMG"));

		return ptr;
	}

};


// Class DeadByDaylight.LocalEventManager
// 0x0528 (0x0558 - 0x0030)
class ULocalEventManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x528];                                     // 0x0030(0x0528) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LocalEventManager"));

		return ptr;
	}

};


// Class DeadByDaylight.LocalPlayerTrackerComponent
// 0x0010 (0x0280 - 0x0270)
class ULocalPlayerTrackerComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0270(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LocalPlayerTrackerComponent"));

		return ptr;
	}


	void TriggerOnLocallyObservedChanged();
};


// Class DeadByDaylight.Locker
// 0x0068 (0x0430 - 0x03C8)
class ALocker : public AInteractable
{
public:
	struct FScriptMulticastDelegate                    OnSurvivorInLockerChanged;                                // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ADBDPlayer*                                  _delayedDoorOpenPlayer;                                   // 0x03D8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EClosetAnimState                                   _delayedDoorOpenState;                                    // 0x03E0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET
	class ACamperPlayer*                               _survivorInLocker;                                        // 0x03E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class ULockerAnimInstance*                         _lockerAnimInstance;                                      // 0x03F0(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x03F8(0x0018) MISSED OFFSET
	struct FGameplayTagContainer                       _interactionExitClosetSemantics;                          // 0x0410(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Locker"));

		return ptr;
	}


	void UpdateDelayedDoorOpen();
	void SetSurvivorInLocker(class ACamperPlayer** survivorInLocker);
	void SetDelayedOpenDoor(class ADBDPlayer** Player, EClosetAnimState* State);
	void SetAnimState(EClosetAnimState* animState);
	void OnSurvivorInLockerChanged__DelegateSignature(class ADBDPlayer** oldSurvivor, class ADBDPlayer** newSurvivor);
	void OnSurvivorHealthChanged(ECamperDamageState* before, ECamperDamageState* after);
	class UPrimitiveComponent* GetStunZone();
	void EjectSurvivor();
};


// Class DeadByDaylight.LockerAnimInstance
// 0x0000 (0x0280 - 0x0280)
class ULockerAnimInstance : public USleepingAnimInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LockerAnimInstance"));

		return ptr;
	}


	void SetAnimState(EClosetAnimState* animState);
};


// Class DeadByDaylight.LockerOutlineUpdateStrategy
// 0x0000 (0x0128 - 0x0128)
class ULockerOutlineUpdateStrategy : public UDefaultOutlineUpdateStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LockerOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.LoudNoiseHUDIndicator
// 0x0070 (0x02E0 - 0x0270)
class ULoudNoiseHUDIndicator : public USceneComponent
{
public:
	class UStaticMesh*                                 DistortionMesh;                                           // 0x0270(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EdgePadding;                                              // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CornerRoundness;                                          // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScreenFadeOutDistance;                                    // 0x0280(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0284(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    LoudNoiseAddedEvent;                                      // 0x0288(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0298(0x0038) MISSED OFFSET
	TArray<struct FLoudNoiseIndicatorData>             _trackedNoises;                                           // 0x02D0(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LoudNoiseHUDIndicator"));

		return ptr;
	}


	void AddTrackedNoise(struct FVector* Location, float* Duration);
};


// Class DeadByDaylight.LunarEventComponent
// 0x00F8 (0x01F8 - 0x0100)
class ULunarEventComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0100(0x0018) MISSED OFFSET
	int                                                _lanternCollectedCount;                                   // 0x0118(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                _additionalEventProgressCount;                            // 0x011C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xD8];                                      // 0x0120(0x00D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LunarEventComponent"));

		return ptr;
	}


	void OnRep_lanternCollectedCount();
	void OnLanternHoldTimerEnd();
	void OnFinishedPlaying(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void Multicast_ResetLanternLight(class ALanternInteractable** LanternInteractable);
	void Local_OnCamperLostLantern(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void Local_OnCamperEscape(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void Authority_OnSlasherDestroysLantern(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void Authority_OnPlayerLeaveGame(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void Authority_OnPickupLantern(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void Authority_OnFixGenerator(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void Authority_OnDestroyCamperLightGameEvent(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void Authority_OnCamperLostLantern(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void Authority_OnCamperEscape(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
};


// Class DeadByDaylight.MagicFountain
// 0x0000 (0x03C8 - 0x03C8)
class AMagicFountain : public AInteractable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MagicFountain"));

		return ptr;
	}


	void SetSingleZone(class UPrimitiveComponent** zone);
	void SetInteractorsUsable(bool* usable, class UInteractor** exception);
	void PreInterruptionEvent(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee, class UInterruptionDefinition** interruption);
	void OnLevelReadyToPlay();
	void OnInteractorLockChanged(bool* locked, class ADBDPlayer** interactingPlayer);
	bool IsInterruptionPossible(class ADBDPlayer** interruptor, class ADBDPlayer** interruptee, class UInteractor** Interactor, class UInteractionDefinition** definition, class UInterruptionDefinition** interruption);
	bool IsInteractionPossibleInternal(class ADBDPlayer** Player, class UInteractor** Interactor, class UInteractionDefinition** definition, EInputInteractionType* InteractionType);
	bool IsInteractionDone(class ADBDPlayer** Player, class UInteractor** Interactor, class UInteractionDefinition** definition, EInputInteractionType* InteractionType);
	bool IsInteractingWith(class ADBDPlayer** Player);
	bool HasAnOngoingInteraction();
	class ADBDPlayer* GetPlayerOwner();
	TArray<class UInteractor*> GetInteractors();
	TArray<class ADBDPlayer*> GetInteractingPlayersRaw();
	struct FVector GetFocalPointPosition(class ADBDPlayer** Player, class UInteractionDefinition** definition);
	void AuthorityRequestCancelOngoingInteractions(bool* onlyOnHitCancelableInteractions);
	TArray<class ADBDPlayer*> Authority_GetInteractingPlayers();
	void AttachEveryInteractionToZone(class UPrimitiveComponent** zone);
};


// Class DeadByDaylight.MagicFountainOutlineUpdateStrategy
// 0x0018 (0x0120 - 0x0108)
class UMagicFountainOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _outlineColor;                                            // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0118(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MagicFountainOutlineUpdateStrategy"));

		return ptr;
	}


	void SetFountainCorrupted(bool* corrupted);
};


// Class DeadByDaylight.ManualIconStrategy
// 0x0008 (0x0038 - 0x0030)
class UManualIconStrategy : public UBasePerkIconStrategy
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ManualIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.MapActorComponent
// 0x0030 (0x0130 - 0x0100)
class UMapActorComponent : public UActorComponent
{
public:
	EMapActorCategory                                  Category;                                                 // 0x0100(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0101(0x0007) MISSED OFFSET
	class UPrimitiveComponent*                         _mapActorCollider;                                        // 0x0108(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0110(0x0018) MISSED OFFSET
	bool                                               _detectionEnabled;                                        // 0x0128(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0129(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MapActorComponent"));

		return ptr;
	}


	void Multicast_SetDetectionEnabled(bool* Enabled);
	bool IsKnownBy(class ADBDPlayer** Character);
	bool GetDetectionEnabled();
};


// Class DeadByDaylight.MapActorDB
// 0x0040 (0x0070 - 0x0030)
class UMapActorDB : public UObject
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0030(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MapActorDB"));

		return ptr;
	}

};


// Class DeadByDaylight.MapActorDetectorComponent
// 0x0028 (0x0128 - 0x0100)
class UMapActorDetectorComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnActorDetected;                                          // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<EMapActorCategory>                          CollectedCategories;                                      // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UPrimitiveComponent*                         _primitive;                                               // 0x0120(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MapActorDetectorComponent"));

		return ptr;
	}


	void SetDetectionPrimitive(class UPrimitiveComponent** Primitive);
	void OnOverlapEnter(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
};


// Class DeadByDaylight.MapData
// 0x0040 (0x0078 - 0x0038)
class UMapData : public UDataAsset
{
public:
	struct FName                                       ThemeName;                                                // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0038(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FName                                       ThemeWeather;                                             // 0x0044(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	int                                                MapWidth;                                                 // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                MapHeight;                                                // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               Draft;                                                    // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	TArray<struct FTileProperties>                     MapTileProperties;                                        // 0x0060(0x0010) (ZeroConstructor)
	class UProceduralGenerationData*                   _proceduralGenerationData;                                // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MapData"));

		return ptr;
	}

};


// Class DeadByDaylight.MatchHandler
// 0x0000 (0x0030 - 0x0030)
class UMatchHandler : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MatchHandler"));

		return ptr;
	}

};


// Class DeadByDaylight.MatchManagementScreen
// 0x00F0 (0x01E0 - 0x00F0)
class UMatchManagementScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0xF0];                                      // 0x00F0(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MatchManagementScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.MeatHook
// 0x0290 (0x0658 - 0x03C8)
class AMeatHook : public AInteractable
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03C8(0x0008) MISSED OFFSET
	bool                                               IsSurvivorStruggling;                                     // 0x03D0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WasSurvivorStruggleCancelled;                             // 0x03D1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03D2(0x0006) MISSED OFFSET
	TArray<class UDBDClipRegionComponent*>             ClipRegions;                                              // 0x03D8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, Transient)
	bool                                               IsInBasement;                                             // 0x03E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsBreakable;                                              // 0x03E9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsSabotageable;                                           // 0x03EA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x03EB(0x0001) MISSED OFFSET
	struct FGameplayTag                                HookIdentityTag;                                          // 0x03EC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                               SnapHookedCharacter;                                      // 0x03F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FullyHooked;                                              // 0x03F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x03FA(0x0006) MISSED OFFSET
	struct FDBDTimer                                   YawAdjustTimer;                                           // 0x0400(0x0028) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              HookYaw;                                                  // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TargetHookYaw;                                            // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPollableEventListener*                      _eventListener;                                           // 0x0430(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ACamperPlayer*                               _hookedSurvivor;                                          // 0x0438(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ADBDPlayer*                                  _saboteurPlayer;                                          // 0x0440(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _useCamperSabotageDurationModifiers;                      // 0x0448(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x51];                                      // 0x0449(0x0051) MISSED OFFSET
	bool                                               _isSacrificed;                                            // 0x049A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isSabotaged;                                             // 0x049B(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _survivorUnhookable;                                      // 0x049C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _canSurvivorAttemptEscape;                                // 0x049D(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _survivorCanStruggle;                                     // 0x049E(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _canBeSabotaged;                                          // 0x049F(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              _drainStartTimer;                                         // 0x04A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isIdle;                                                  // 0x04A4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x04A5(0x0003) MISSED OFFSET
	struct FHookAnalyticsController                    _hookAnalytics;                                           // 0x04A8(0x0100)
	unsigned char                                      UnknownData06[0x10];                                      // 0x05A8(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData07[0x50];                                      // 0x05A8(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.MeatHook._campersThatSabotagedMeatHook
	class UInteractor*                                 _mainInteractor;                                          // 0x0608(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class USceneComponent*                             _meatHookEffect;                                          // 0x0610(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UChargeableInteractionDefinition*            _unhook;                                                  // 0x0618(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class USceneComponent*                             _camperHookedSnapTransform;                               // 0x0620(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class AEntity*                                     _entity;                                                  // 0x0628(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x10];                                      // 0x0630(0x0010) MISSED OFFSET
	float                                              _struggleThreshold;                                       // 0x0640(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0644(0x0004) MISSED OFFSET
	class ADBDPlayer*                                  _interactingPlayer;                                       // 0x0648(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _meathookInitilized;                                      // 0x0650(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x7];                                       // 0x0651(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MeatHook"));

		return ptr;
	}


	void SnapSurvivorTransform(class ACamperPlayer** Survivor);
	void SnapSurvivorToHook(float* Time);
	void SetTargetHookLookAt(struct FVector* lookAt, float* Time);
	void SetMeatHookInitilized(bool* value);
	void SetInteractingPlayer(class ADBDPlayer** interactingPlayer);
	void SetEntity(class AEntity** Entity);
	void Server_RefreshCharmCustomization();
	void ResetTargetHookYaw(float* Time);
	void OnTickStruggle(float* DeltaTime);
	void OnStruggleExit();
	void OnStruggleEnter();
	void OnSacrificeOut();
	void OnSacrificeIn();
	void OnReactionIn();
	void OnReaction();
	void OnHookingExit();
	void OnHookingEnter();
	void OnHookedSurvivorChanged(class ACamperPlayer** before, class ACamperPlayer** after);
	void OnHookedSurvivorAttacked();
	void OnHookedIdle();
	void OnHookedExit();
	void OnHookedEnter();
	void OnAutoRepair();
	void Multicast_SetIsSacrificed(bool* value);
	void Multicast_SetIsSabotaged(bool* value, class ADBDPlayer** Saboteur, bool* useCamperSabotageDurationModifiers);
	void Multicast_SetHookedSurvivor(class ACamperPlayer** Survivor);
	void Multicast_RefreshCharmCustomization();
	void Multicast_EscapeAttemptResult(bool* Result);
	void InitializeMeatHookIfPossible();
	void InitializeMeatHook();
	struct FAnimationMontageDescriptor GetUnhookOutMontageDescriptor();
	struct FAnimationMontageDescriptor GetUnhookInMontageDescriptor();
	class UChargeableInteractionDefinition* GetUnhookCID();
	class ADBDPlayer* GetSaboteurPlayer();
	float GetSabotageDuration();
	class UMontagePlayer* GetMontagePlayer();
	class USceneComponent* GetMeatHookEffect();
	class UAkComponent* GetMeatHookAkAudioComponent();
	class UMapActorComponent* GetMapActorNative();
	class UInteractor* GetMainInteractor();
	class USphereComponent* GetKickSlasherDetectionZone();
	bool GetIsSacrificed();
	bool GetIsSabotaged();
	bool GetIsBroken();
	class UBoxComponent* GetInteractorZoneComponent();
	class ADBDPlayer* GetInteractingPlayer();
	class ACamperPlayer* GetHookedSurvivor();
	class UHookableComponent* GetHookableComponentOfHookedActor();
	class USceneComponent* GetCamperUnkookFocalPointTransform();
	class USceneComponent* GetCamperHookedSnapTransform();
	void FireHookSoundEvent(struct FName* NoiseRangeTunable, class ADBDPlayer** soundInstigator);
	void DebugHookedSurvivor(class ACamperPlayer** expectedSurvivor);
	bool CanUnhookSurvivor(class ACamperPlayer** Survivor);
	bool CanSurvivorStruggle(class ACamperPlayer** Survivor);
	bool CanSurvivorAttemptEscape(class ACamperPlayer** Survivor);
	bool CanHookSurvivor();
	bool CanBeSabotaged();
	void Authority_SignalUnhookingEnter();
	void Authority_SignalUnhookingCharged();
	void Authority_SignalUnhookingAborted();
	void Authority_SignalSurvivorAttemptingEscapeAborted();
	void Authority_SignalSurvivorAttemptingEscape();
	void Authority_SetIsSacrificed(bool* value);
	void Authority_SetIsSabotaged(bool* value, class ADBDPlayer** Saboteur, bool* useCamperSabotageDurationModifiers);
	void Authority_SetHookedSurvivor(class ACamperPlayer** Survivor);
	void Authority_SendOnUnhookAnalytics(class ADBDPlayer** rescuer);
};


// Class DeadByDaylight.MeatHookAnimInstance
// 0x0000 (0x0270 - 0x0270)
class UMeatHookAnimInstance : public UAnimInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MeatHookAnimInstance"));

		return ptr;
	}

};


// Class DeadByDaylight.MeatHookOutlineUpdateStrategy
// 0x0040 (0x0148 - 0x0108)
class UMeatHookOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                                HookedOutlineColorSlasher;                                // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                CarryingOutlineColorSlasher;                              // 0x0118(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                DefaultOutlineColorSlasher;                               // 0x0128(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                VisibleOutlineColorCamper;                                // 0x0138(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MeatHookOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.MeatHookStateMachine
// 0x0000 (0x0170 - 0x0170)
class UMeatHookStateMachine : public UStateMachine
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MeatHookStateMachine"));

		return ptr;
	}


	void Server_SetStateStack(TArray<uint16_t>* netStateIDStack);
	void NetIDStackChanged();
	void Multicast_SetStateStack(TArray<uint16_t>* netStateIDStack);
};


// Class DeadByDaylight.MenuAssetLibrary
// 0x0010 (0x0130 - 0x0120)
class UMenuAssetLibrary : public UItemsAssetLibrary
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0120(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MenuAssetLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.MenuMeatHook
// 0x0028 (0x0368 - 0x0340)
class AMenuMeatHook : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0340(0x0010) MISSED OFFSET
	class UCharmSpawnerComponent*                      _charmSpawnerComponent;                                   // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0358(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MenuMeatHook"));

		return ptr;
	}


	void BeginDestroySequence_Internal();
};


// Class DeadByDaylight.MenuUtilities
// 0x0000 (0x0030 - 0x0030)
class UMenuUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MenuUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.MontagePlayer
// 0x00F0 (0x01F0 - 0x0100)
class UMontagePlayer : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnMontageStarted;                                         // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x48];                                      // 0x0110(0x0048) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMontageEnded;                                           // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0168(0x0018) MISSED OFFSET
	class UDataTable*                                  _animationMappingsTable;                                  // 0x0180(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  _playerSpecificMappingsTable;                             // 0x0188(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                _currentlyPlayingMontage;                                 // 0x0190(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0198(0x0010) MISSED OFFSET
	TArray<struct FMontageInstanceInfo>                _activeMontagesInfo;                                      // 0x01A8(0x0010) (ZeroConstructor, Transient)
	struct FName                                       _outSectionName;                                          // 0x01B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01B8(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              _timeBeforeOut;                                           // 0x01C4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class USkeletalMeshComponent*                      _skeletalMeshComponent;                                   // 0x01C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0x20];                                      // 0x01D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MontagePlayer"));

		return ptr;
	}


	void Stop(float* BlendOutTime);
	void SignalAnimInstanceChanged();
	void SetSkeletalMesh(class USkeletalMeshComponent** SkeletalMeshComponent);
	void SetPlayRate(float* PlayRate);
	class UAnimMontage* PlayScaledForDuration(struct FAnimationMontageDescriptor* animMontageID, float* Duration);
	class UAnimMontage* PlayLoopForDuration(struct FAnimationMontageDescriptor* animMontageID, float* Duration, float* PlayRate, struct FName* Out);
	class UAnimMontage* Play(struct FAnimationMontageDescriptor* animMontageID, float* PlayRate, bool* isFollower);
	void OnMontageEndedInternal(struct FGuid* Guid, class UAnimMontage** Montage, bool* interrupted);
	void OnMontageBlendingOutInternal(struct FGuid* Guid, class UAnimMontage** Montage, bool* interrupted);
	void JumpToSectionEnd(struct FName* sectionName);
	void JumpToSection(struct FName* sectionName);
	bool IsPlayingAnyMontage();
	bool IsPlaying(struct FAnimationMontageDescriptor* montageDescriptor);
	class UAnimInstance* GetAnimInstance();
};


// Class DeadByDaylight.MoriableComponent
// 0x0020 (0x0120 - 0x0100)
class UMoriableComponent : public UActorComponent
{
public:
	struct FVector                                     _moriInteractionRelativeLocation;                         // 0x0100(0x000C) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	class UInteractionDefinition*                      _moriInteraction;                                         // 0x0110(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0118(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MoriableComponent"));

		return ptr;
	}


	void OnRep_MoriInteraction();
	void OnMoriUpdateStart();
	void OnMoriFinished();
};


// Class DeadByDaylight.MoriComponent
// 0x0028 (0x0128 - 0x0100)
class UMoriComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0100(0x0018) MISSED OFFSET
	TArray<class UClass*>                              _moriInteractionClasses;                                  // 0x0118(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MoriComponent"));

		return ptr;
	}


	void OnMoriUpdateStart();
	void OnMoriFinished();
	void OnMoriChargeCompleted();
};


// Class DeadByDaylight.MovementModifierActor
// 0x0008 (0x0348 - 0x0340)
class AMovementModifierActor : public AActor
{
public:
	float                                              MaxSpeedMultiplier;                                       // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0344(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MovementModifierActor"));

		return ptr;
	}

};


// Class DeadByDaylight.MysteryBoxPopupScreenUMG
// 0x0000 (0x0110 - 0x0110)
class UMysteryBoxPopupScreenUMG : public UGenericPopupScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.MysteryBoxPopupScreenUMG"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.NavigationScreen
// 0x0178 (0x0268 - 0x00F0)
class UNavigationScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x178];                                     // 0x00F0(0x0178) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.NavigationScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.NavigationScreenScaleform
// 0x0000 (0x0268 - 0x0268)
class UNavigationScreenScaleform : public UNavigationScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.NavigationScreenScaleform"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.NavigationScreenUMG
// 0x0010 (0x0278 - 0x0268)
class UNavigationScreenUMG : public UNavigationScreen
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0268(0x0008) MISSED OFFSET
	class UUMGLobbyScreen*                             _atlNavigationScreen;                                     // 0x0270(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.NavigationScreenUMG"));

		return ptr;
	}

};


// Class DeadByDaylight.NewContentPopupScreen
// 0x0000 (0x0110 - 0x0110)
class UNewContentPopupScreen : public UGenericPopupScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.NewContentPopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.NewsContentManager
// 0x00C8 (0x00F8 - 0x0030)
class UNewsContentManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET
	TWeakObjectPtr<class UDBDGameInstance>             _gameInstance;                                            // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xA8];                                      // 0x0050(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.NewsContentManager"));

		return ptr;
	}

};


// Class DeadByDaylight.NotExhaustedActivationTimerElapsedIconStrategy
// 0x0000 (0x0030 - 0x0030)
class UNotExhaustedActivationTimerElapsedIconStrategy : public UBasePerkIconStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.NotExhaustedActivationTimerElapsedIconStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.OfferingCard
// 0x0020 (0x0360 - 0x0340)
class AOfferingCard : public AActor
{
public:
	TArray<struct FRarityTexture>                      RarityTextures;                                           // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FOfferingTypeTexture>                OfferingTypeTextures;                                     // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OfferingCard"));

		return ptr;
	}


	void PlayAnim(EOfferingAnimState* State);
};


// Class DeadByDaylight.OfferingEffectCollection
// 0x0050 (0x0080 - 0x0030)
class UOfferingEffectCollection : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OfferingEffectCollection"));

		return ptr;
	}

};


// Class DeadByDaylight.OfferingHandler
// 0x0008 (0x0038 - 0x0030)
class UOfferingHandler : public UObject
{
public:
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OfferingHandler"));

		return ptr;
	}

};


// Class DeadByDaylight.OfferingSequenceAssets
// 0x0020 (0x0360 - 0x0340)
class AOfferingSequenceAssets : public AActor
{
public:
	TArray<struct FOfferingRevealDelays>               OfferingRevealDelays;                                     // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AOfferingCard*>                       Cards;                                                    // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OfferingSequenceAssets"));

		return ptr;
	}


	void PlaySmoke();
	void PlayFadeOut();
	void PlayFadeIn();
};


// Class DeadByDaylight.OfferingSequenceManager
// 0x0050 (0x0390 - 0x0340)
class AOfferingSequenceManager : public AActor
{
public:
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class APlayerController*                           _localPlayerController;                                   // 0x0348(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UOfferingHandler*                            _offeringHandler;                                         // 0x0350(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AOfferingSequenceAssets*                     _sequenceAssets;                                          // 0x0358(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ADBDLobbyHud*                                _hud;                                                     // 0x0360(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ACameraActor*                                _offeringCamera;                                          // 0x0368(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0370(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OfferingSequenceManager"));

		return ptr;
	}


	void FadeInScreen();
};


// Class DeadByDaylight.OfflineLobbyLevel
// 0x01E0 (0x0548 - 0x0368)
class AOfflineLobbyLevel : public ALobbyLevel
{
public:
	TArray<TWeakObjectPtr<class APlayerStart>>         _roleSelectionCamperSpawns;                               // 0x0368(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TWeakObjectPtr<class APlayerStart>>         _roleSelectionSlasherSpawns;                              // 0x0378(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TWeakObjectPtr<class APlayerStart>                 _offlineLobbyLocalSlasherSpawn;                           // 0x0388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class APlayerStart>                 _offlineLobbyLocalCamperSpawn;                            // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class APlayerStart>                 _partyLobbyLocalSlasherStart;                             // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class APlayerStart>                 _partyLobbyLocalCamperStart;                              // 0x03A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<TWeakObjectPtr<class APlayerStart>>         _partyLobbyCamperSpawns;                                  // 0x03A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FVector>                             _partyLobbySlasherPOVTrackerOffsets;                      // 0x03B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TWeakObjectPtr<class APlayerStart>>         _partyLobbySlasherSpawns;                                 // 0x03C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TWeakObjectPtr<class APlayerStart>>         _partyLobbyEmptySlotCamperSpawns;                         // 0x03D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                _partyLobbyAdditionalSlotStartIndex;                      // 0x03E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x30];                                      // 0x03EC(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.OfflineLobbyLevel._partyLobbyEmptySlotSilhouette
	unsigned char                                      UnknownData02[0x30];                                      // 0x0420(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.OfflineLobbyLevel._meatHookForCustomization
	TWeakObjectPtr<class ATargetPoint>                 _meatHookSpawn;                                           // 0x0450(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0458(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.OfflineLobbyLevel._charmForCustomizationZoom
	TWeakObjectPtr<class ATargetPoint>                 _camperCharmSpawn;                                        // 0x0488(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class ATargetPoint>                 _slasherCharmSpawn;                                       // 0x0490(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<TWeakObjectPtr<class APlayerStart>, TWeakObjectPtr<class ADBDMenuSilhouette>> _partyLobbyEmptySlotPawns;                                // 0x0498(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x60];                                      // 0x04E8(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OfflineLobbyLevel"));

		return ptr;
	}


	void CheckDestroyingPawns(class AActor** DestroyedActor);
};


// Class DeadByDaylight.OniBasicAttackComponent
// 0x0010 (0x0110 - 0x0100)
class UOniBasicAttackComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OniBasicAttackComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.OniDemonModeAttackStateComponent
// 0x0018 (0x0120 - 0x0108)
class UOniDemonModeAttackStateComponent : public UChargedAttackStateComponent
{
public:
	struct FScriptMulticastDelegate                    OnChargedAttackReadyChanged;                              // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0118(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OniDemonModeAttackStateComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.OnlineLobbyLevel
// 0x0048 (0x03B0 - 0x0368)
class AOnlineLobbyLevel : public ALobbyLevel
{
public:
	class UProceduralGenerationData*                   ProceduralGenerationData;                                 // 0x0368(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class APlayerStart>                 _onlineLobbyLocalSlasherSpawn;                            // 0x0370(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class APlayerStart>                 _onlineLobbyLocalCamperStart;                             // 0x0378(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<TWeakObjectPtr<class APlayerStart>>         _onlineLobbyCamperSpawns;                                 // 0x0380(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FVector>                             _onlineLobbySlasherPOVTrackerOffsets;                     // 0x0390(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TWeakObjectPtr<class APlayerStart>>         _onlineLobbySlasherSpawns;                                // 0x03A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OnlineLobbyLevel"));

		return ptr;
	}

};


// Class DeadByDaylight.OnlinePrivilegeManager
// 0x0008 (0x0040 - 0x0038)
class UOnlinePrivilegeManager : public UGameInstanceSubsystem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OnlinePrivilegeManager"));

		return ptr;
	}

};


// Class DeadByDaylight.OnlineSystemHandler
// 0x0458 (0x0488 - 0x0030)
class UOnlineSystemHandler : public UObject
{
public:
	unsigned char                                      UnknownData00[0x198];                                     // 0x0030(0x0198) MISSED OFFSET
	class ULocalPlayer*                                _cachedLocalPlayer;                                       // 0x01C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDBDGameInstance*                            _gameInstance;                                            // 0x01D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UGameSessionDS*                              _gameSessionDS;                                           // 0x01D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x200];                                     // 0x01E0(0x0200) MISSED OFFSET
	class UDBDServerInstance*                          _serverInstance;                                          // 0x03E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x03E8(0x0030) MISSED OFFSET
	class UCrossplayManager*                           _crossplayManager;                                        // 0x0418(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x68];                                      // 0x0420(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OnlineSystemHandler"));

		return ptr;
	}

};


// Class DeadByDaylight.OutfitHelper
// 0x0000 (0x0030 - 0x0030)
class UOutfitHelper : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OutfitHelper"));

		return ptr;
	}

};


// Class DeadByDaylight.OutfitRecommendationsFilter
// 0x0028 (0x0060 - 0x0038)
class UOutfitRecommendationsFilter : public URecommendationsFilter
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0038(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OutfitRecommendationsFilter"));

		return ptr;
	}

};


// Class DeadByDaylight.OverlayMenuScreen
// 0x0348 (0x0438 - 0x00F0)
class UOverlayMenuScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x348];                                     // 0x00F0(0x0348) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OverlayMenuScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.OverlayMenuScreenScaleform
// 0x0000 (0x0438 - 0x0438)
class UOverlayMenuScreenScaleform : public UOverlayMenuScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OverlayMenuScreenScaleform"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.OverlayMenuScreenUMG
// 0x0008 (0x0440 - 0x0438)
class UOverlayMenuScreenUMG : public UOverlayMenuScreen
{
public:
	class UUMGAtlantaSettingScreen*                    _atlOverlayMenuScreen;                                    // 0x0438(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.OverlayMenuScreenUMG"));

		return ptr;
	}

};


// Class DeadByDaylight.Pallet
// 0x0070 (0x0438 - 0x03C8)
class APallet : public AInteractable
{
public:
	bool                                               StunSent;                                                 // 0x03C8(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	EPalletState                                       _state;                                                   // 0x03C9(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03CA(0x0006) MISSED OFFSET
	class USkeletalMeshComponent*                      _illusionaryPallet;                                       // 0x03D0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UDestructibleComponent*                      _skPlank01DM;                                             // 0x03D8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UInteractionDefinition*                      _destroyLeft;                                             // 0x03E0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UInteractionDefinition*                      _destroyRight;                                            // 0x03E8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               _pushBox;                                                 // 0x03F0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x03F8(0x0028) MISSED OFFSET
	class UBoxComponent*                               _stunBox;                                                 // 0x0420(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPalletAnimInstance*                         _palletAnimInstance;                                      // 0x0428(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class ADBDPlayer*                                  _playerDoingPulldown;                                     // 0x0430(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Pallet"));

		return ptr;
	}


	void UpdateIllusionaryPallet();
	void SetPalletState(EPalletState* State);
	void SetIllusionaryPallet(class USkeletalMeshComponent** Pallet);
	void ResetPallet();
	void PulldownPallet();
	void PullDown(class ADBDPlayer** Player);
	void OnStunOverlap(class UPrimitiveComponent** OverlappedComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void OnPalletPulledUp_BP();
	void OnOverlapPushBox(class UPrimitiveComponent** OverlappedComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void Multicast_ResetPallet();
	void Multicast_PulldownPallet();
	class ADBDPlayer* GetPlayerDoingPulldown();
	bool GetIsPulledDown();
	void ExplodePallet(class ADBDPlayer** Player);
	void CallMulticastStunSlasher(class AActor** potentialSlasher, class ACamperPlayer** CamperPlayer, bool* stunBreakPallet);
	void Authority_StunSlashersinStunZone(class AActor** Actor);
};


// Class DeadByDaylight.PalletAnimInstance
// 0x0000 (0x0280 - 0x0280)
class UPalletAnimInstance : public USleepingAnimInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PalletAnimInstance"));

		return ptr;
	}


	void SetIsPulledDown(bool* isPulledDown);
};


// Class DeadByDaylight.PalletTracker
// 0x0020 (0x0360 - 0x0340)
class APalletTracker : public AActor
{
public:
	class APallet*                                     _procedurallySpawnedPallet;                               // 0x0340(0x0008) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	class APallet*                                     _dreamPallet;                                             // 0x0348(0x0008) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             _indicatorLocation;                                       // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0358(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PalletTracker"));

		return ptr;
	}


	void RevealToLocalPlayerBP(bool* shown);
	void InitializeTunableValues(class ASlasherPlayer** Slasher);
	void EnableSelectedEffectToLocalPlayer(bool* activated);
	bool CanSpawnDreamPalletAtLocation();
};


// Class DeadByDaylight.PanelScreen
// 0x01C8 (0x02B8 - 0x00F0)
class UPanelScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x1C8];                                     // 0x00F0(0x01C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PanelScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.PanelScreenScaleform
// 0x0000 (0x02B8 - 0x02B8)
class UPanelScreenScaleform : public UPanelScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PanelScreenScaleform"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.PanelScreenUMG
// 0x0010 (0x02C8 - 0x02B8)
class UPanelScreenUMG : public UPanelScreen
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02B8(0x0008) MISSED OFFSET
	class UUMGSwitcherScreen*                          _atlantaPanelScreen;                                      // 0x02C0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PanelScreenUMG"));

		return ptr;
	}

};


// Class DeadByDaylight.ParticleSystemDistanceFaderComponent
// 0x0020 (0x0120 - 0x0100)
class UParticleSystemDistanceFaderComponent : public UActorComponent
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                  // 0x0100(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       OpacityParameterName;                                     // 0x0108(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0108(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              StartFadeDistance;                                        // 0x0114(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EndFadeDistance;                                          // 0x0118(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x011C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ParticleSystemDistanceFaderComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.PerformanceDataAccumulator
// 0x00E8 (0x0118 - 0x0030)
class UPerformanceDataAccumulator : public UObject
{
public:
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0030(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerformanceDataAccumulator"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGLoadoutItemButton
// 0x01D0 (0x04D0 - 0x0300)
class UUMGLoadoutItemButton : public UBaseUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnLoadoutItemButtonClicked;                               // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLoadoutItemButtonLongPress;                             // 0x0310(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               HideStackCount;                                           // 0x0320(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0321(0x0007) MISSED OFFSET
	class UCanvasPanel*                                EmptyCanvas;                                              // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     EmptyButton;                                              // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     LockedButton;                                             // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ActionCanvas;                                             // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ImageRarityBG;                                            // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ImageGradient;                                            // 0x0350(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ImagePaint;                                               // 0x0358(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ImageEventBorder;                                         // 0x0360(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ImagePaintTop;                                            // 0x0368(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ImagePaintBottom;                                         // 0x0370(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	ESlateVisibility                                   EmptyCanvasVisibility;                                    // 0x0378(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   ActionCanvasVisibility;                                   // 0x0379(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   PrivateCanvasVisibility;                                  // 0x037A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   LockIconVisibility;                                       // 0x037B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   EmptyIconVisibility;                                      // 0x037C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   SpecialEventVisiblity;                                    // 0x037D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   LoadoutSelectedVisibility;                                // 0x037E(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   LoadoutLockVisibility;                                    // 0x037F(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UImage*                                      ImageIcon;                                                // 0x0380(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ImageShadow;                                              // 0x0388(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     ActionButton;                                             // 0x0390(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTexture2D*                                  EmptyBGAsset;                                             // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  DisableBGAsset;                                           // 0x03A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FInventorySlotData                          LoadoutItemData;                                          // 0x03A8(0x00F8) (BlueprintVisible, Transient)
	bool                                               _triggerClickEventForLoadoutWidget;                       // 0x04A0(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2F];                                      // 0x04A1(0x002F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLoadoutItemButton"));

		return ptr;
	}


	void UpdateWidgetByState(EInventoryButtonState* State);
	void UpdateWidgetByData(struct FInventorySlotData* SlotData);
	void UpdateImageColor(EItemRarity* Rarity, EStatusEffectType* EffectType);
	void SetIsSelected(bool* isSelected);
	void SetIconImageByPath(struct FString* IconPath);
	void OnLockedButtonClicked();
	void InitializationForLoadoutWidget();
	void InitializationForCharacterInfoWidget();
	struct FName GetLoadoutItemID();
	void BroadcastLongPressEvent(struct FName* ItemId);
	void BroadcastClickedEvent(struct FName* ItemId);
};


// Class DeadByDaylight.PerkActionButton
// 0x0018 (0x04E8 - 0x04D0)
class UPerkActionButton : public UUMGLoadoutItemButton
{
public:
	class UTextBlock*                                  TextUnlockLevelTitle;                                     // 0x04D0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               Activatable;                                              // 0x04D8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   SelectedImageVisibility;                                  // 0x04D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   ClickableButtonVisibility;                                // 0x04DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   ClickableImageVisibility;                                 // 0x04DB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   ProgressbarVisibility;                                    // 0x04DC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04DD(0x0003) MISSED OFFSET
	float                                              IdleTime;                                                 // 0x04E0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkActionButton"));

		return ptr;
	}


	void UpdateWidgetPercentage(float* percentage);
	void SetIsActivatable(bool* isClickable);
	void SetCanEverBeActivated();
	void CallSetPerkLevel(int* Level);
};


// Class DeadByDaylight.PerkCollectionComponent
// 0x0028 (0x0128 - 0x0100)
class UPerkCollectionComponent : public UActorComponent
{
public:
	TArray<class UPerk*>                               _array;                                                   // 0x0100(0x0010) (ExportObject, Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0110(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkCollectionComponent"));

		return ptr;
	}


	void OnRep_Array(TArray<class UPerk*>* oldArray);
};


// Class DeadByDaylight.PerkHudWidget
// 0x0138 (0x0438 - 0x0300)
class UPerkHudWidget : public UBaseUserWidget
{
public:
	class UCanvasPanel*                                PerksClickable;                                           // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                PerksExternal;                                            // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0310(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.PerkHudWidget.AtlantaPerkActionButtonClass
	unsigned char                                      UnknownData01[0xF8];                                      // 0x0340(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkHudWidget"));

		return ptr;
	}


	void RemoveExistingPerk(struct FName* PerkId, bool* isExternal);
	void OnPerkClickedHandler(struct FName* PerkId);
};


// Class DeadByDaylight.PerkManager
// 0x0208 (0x0308 - 0x0100)
class UPerkManager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET
	class UPerkCollectionComponent*                    _perks;                                                   // 0x0110(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UStatusEffectCollectionComponent*            _statusEffects;                                           // 0x0118(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1E8];                                     // 0x0120(0x01E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkManager"));

		return ptr;
	}


	void Server_SpawnStatusEffect(struct FName* statusEffectId);
	void Server_SpawnPerk(struct FName* PerkId, int* PerkLevel);
	void Server_RemoveStatusEffects();
	void Server_RemovePerks();
	void OnIsApplicableChanged(class UGameplayModifierContainer** GameplayModifierContainer, bool* IsApplicable);
	bool HasPerkModifierOfType(struct FGameplayTag* Type);
	bool HasPerkFlag(struct FGameplayTag* flag, EGameplayModifierSource* Filter);
	bool HasAnyEffectWithID(struct FName* ID);
	bool HasAnyAddonWithTag(struct FName* Tag);
	bool HasAllCharacterPerksEquipped();
	class UStatusEffect* GetStatusEffect(struct FName* ID);
	class UGameplayModifierContainer* GetSourceWithModifier(struct FGameplayTag* Type, EGameplayModifierSource* Filter);
	class UGameplayModifierContainer* GetSourceWithFlag(struct FGameplayTag* flag, EGameplayModifierSource* Filter);
	float GetPerkModifierMinValueAndSource(struct FGameplayTag* Type, float* startValue, class UGameplayModifierContainer** outSource);
	float GetPerkModifierMinValue(struct FGameplayTag* Type, float* startValue);
	float GetPerkModifierMaxValueAndSource(struct FGameplayTag* Type, class UGameplayModifierContainer** outSource);
	float GetPerkModifierMaxValue(struct FGameplayTag* Type);
	float GetPerkModifier(struct FGameplayTag* Type, EGameplayModifierSource* Filter);
	class UPerk* GetPerk(struct FName* ID);
	float GetMultiplicativeModifierValueWithCompoundNegative(struct FGameplayTag* Type, EGameplayModifierSource* Filter);
	float GetMultiplicativeModifierValueOfContainerWithCompoundNegative(struct FGameplayTagContainer* container, EGameplayModifierSource* Filter);
	float GetMultiplicativeModifierValue(struct FGameplayTag* Type);
	TArray<class UStatusEffect*> GetAllStatusEffects(struct FName* ID);
	TArray<class UGameplayModifierContainer*> GetAllSourcesWithModifier(struct FGameplayTag* Type, EGameplayModifierSource* Filter);
	TArray<class UGameplayModifierContainer*> GetAllSourcesWithFlag(struct FGameplayTag* flag, EGameplayModifierSource* Filter);
	void Authority_RemoveStatusEffectByID(struct FName* statusEffectId, bool* bRemoveAllWithID);
	void Authority_RemoveStatusEffect(class UStatusEffect** StatusEffect);
	class UStatusEffect* Authority_ImposeStatusEffect(struct FName* statusEffectId, class ADBDPlayer** originatingPlayer, float* customParam, class UGameplayModifierContainer** originatingEffect, bool* shouldDisplay);
	class UStatusEffect* Authority_ImposeNewStatusEffectOrChangeLifeTime(struct FName* statusEffectId, class ADBDPlayer** originatingPlayer, float* Lifetime, float* customParam, class UGameplayModifierContainer** originatingEffect, bool* shouldDisplay);
	class UStatusEffect* Authority_ImposeDynamicStatusEffect(struct FName* statusEffectId, class ADBDPlayer** originatingPlayer, float* customParam, class UGameplayModifierContainer** originatingEffect);
	void Authority_EndStatusEffectByID(struct FName* statusEffectId, bool* bRemoveAllWithID);
};


// Class DeadByDaylight.PerkManagerOwnerInterface
// 0x0000 (0x0030 - 0x0030)
class UPerkManagerOwnerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkManagerOwnerInterface"));

		return ptr;
	}

};


// Class DeadByDaylight.PerkOwnerInterface
// 0x0000 (0x0030 - 0x0030)
class UPerkOwnerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkOwnerInterface"));

		return ptr;
	}

};


// Class DeadByDaylight.PerkSelectionPopupScreenUMG
// 0x0000 (0x0110 - 0x0110)
class UPerkSelectionPopupScreenUMG : public UGenericPopupScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkSelectionPopupScreenUMG"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.PerkSelectionSlotWidget
// 0x0088 (0x0388 - 0x0300)
class UPerkSelectionSlotWidget : public UBaseUserWidget
{
public:
	class UTextBlock*                                  PerkName;                                                 // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextChoose;                                               // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPerkActionButton*                           PerkActionButton;                                         // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      SelectedIcon;                                             // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  DescriptionText;                                          // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     SelectionButton;                                          // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PictureBackground;                                        // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PicturePerkBackground;                                    // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PictureHighlightFrame;                                    // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PictureTopRightBackground;                                // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PictureTopRightFrame;                                     // 0x0350(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              HighOpacity;                                              // 0x0358(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LowOpacity;                                               // 0x035C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PerkBackgroundLowOpacity;                                 // 0x0360(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DescriptionBackgroundLowOpacity;                          // 0x0364(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0368(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkSelectionSlotWidget"));

		return ptr;
	}


	void OnButtonClicked();
};


// Class DeadByDaylight.PerkSoundHudIcon
// 0x0010 (0x0310 - 0x0300)
class UPerkSoundHudIcon : public UBaseUserWidget
{
public:
	struct FName                                       PerkId;                                                   // 0x0300(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0300(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData01[0x4];                                       // 0x030C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkSoundHudIcon"));

		return ptr;
	}


	void ClearPerk();
	void ActivatePerk(float* percentage);
};


// Class DeadByDaylight.PerkSoundHudIconSporadic
// 0x0038 (0x0348 - 0x0310)
class UPerkSoundHudIconSporadic : public UPerkSoundHudIcon
{
public:
	class UCanvasPanel*                                SporadicIcon;                                             // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              FadeInRate;                                               // 0x0318(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeOutRate;                                              // 0x031C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimationStartOpacity;                                    // 0x0320(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                FadePolynomialOrder;                                      // 0x0324(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisplayIcon;                                              // 0x0328(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0329(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkSoundHudIconSporadic"));

		return ptr;
	}


	void NativeTick(struct FGeometry* MyGeometry, float* DeltaTime);
};


// Class DeadByDaylight.PerkSoundHudWidget
// 0x0008 (0x0308 - 0x0300)
class UPerkSoundHudWidget : public UBaseUserWidget
{
public:
	class UHorizontalBox*                              PerkIcons;                                                // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PerkSoundHudWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.PhantomTrap
// 0x0008 (0x03D0 - 0x03C8)
class APhantomTrap : public AInteractable
{
public:
	class UTerrorRadiusEmitterComponent*               _terrorRadiusEmitter;                                     // 0x03C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PhantomTrap"));

		return ptr;
	}


	void SetRadiusVisibility(bool* visible, class AActor** revealSource);
	void InitializeTerrorRadiusEmitter(class ASlasherPlayer** OwningSlasher);
};


// Class DeadByDaylight.PhaseWalkingComponent
// 0x0120 (0x0220 - 0x0100)
class UPhaseWalkingComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnPhaseWalkInfoReceived;                                  // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGameEndedVFX;                                           // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TriggerSurvivorVisibilityVFX;                             // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TriggerKillerVisibilityVFX;                               // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMaxActivePhaseWalkCharges;                              // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      _huskClass;                                               // 0x0150(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FTagStateBool                               _isActivePhaseWalking;                                    // 0x0158(0x0030) (Transient)
	bool                                               _isPassivePhaseWalking;                                   // 0x0188(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _isInteractionPhaseWalking;                               // 0x0189(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x018A(0x0006) MISSED OFFSET
	class AActor*                                      _husk;                                                    // 0x0190(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	struct FDBDBidirectionalTimer                      _activePhaseWalkCharges;                                  // 0x0198(0x0028) (Transient)
	unsigned char                                      UnknownData01[0x28];                                      // 0x01C0(0x0028) MISSED OFFSET
	bool                                               _survivorsWereVisible;                                    // 0x01E8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x37];                                      // 0x01E9(0x0037) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PhaseWalkingComponent"));

		return ptr;
	}


	void UpdateSurvivorVisibility(bool* visible);
	void UpdateKillerVisibility();
	void Server_Broadcast_PhaseWalk(struct FPhaseWalkInfo* PhaseWalkInfo);
	void Multicast_Broadcast_PhaseWalk(struct FPhaseWalkInfo* PhaseWalkInfo);
	void ModifyActivePhaseWalkCharges(float* Delta);
	void Local_PhaseWalk(struct FPhaseWalkInfo* PhaseWalkInfo);
	void Local_EndPhaseWalks();
	bool IsPhaseWalking();
	bool IsPassivePhaseWalking();
	bool IsActivePhaseWalking();
	void InitializePhaseWalkVariables();
	struct FDBDTimer GetPassivePhaseWalkTimer();
	class AActor* GetHusk();
	class UDecoySlasherComponent* GetDecoySlasherComponent();
	float GetActivePhaseWalkCharges();
	float GetActivePhaseWalkChargePercentage();
	bool CanStartActivePhaseWalk();
	void BroadcastTriggerSurvivorVisibilityVFX(bool* visible);
};


// Class DeadByDaylight.PigAnalytics
// 0x0000 (0x0030 - 0x0030)
class UPigAnalytics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PigAnalytics"));

		return ptr;
	}

};


// Class DeadByDaylight.PlagueSurvivorAnalyticsComponent
// 0x00A8 (0x01A8 - 0x0100)
class UPlagueSurvivorAnalyticsComponent : public UActorComponent
{
public:
	uint32_t                                           _replicatedRegularVomitHits;                              // 0x0100(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xA4];                                      // 0x0104(0x00A4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlagueSurvivorAnalyticsComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.PlagueUtilities
// 0x0000 (0x0030 - 0x0030)
class UPlagueUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlagueUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.PlayerDataStorageFacade
// 0x0058 (0x0088 - 0x0030)
class UPlayerDataStorageFacade : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0030(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerDataStorageFacade"));

		return ptr;
	}

};


// Class DeadByDaylight.PlayerDebugComponent
// 0x0008 (0x0108 - 0x0100)
class UPlayerDebugComponent : public UActorComponent
{
public:
	bool                                               _disableStartUpdateMontageDuringEnter;                    // 0x0100(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               _allowPalletPullUpInteraction;                            // 0x0101(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0102(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerDebugComponent"));

		return ptr;
	}


	void Server_TeleportAllPlayersTo(class ADBDPlayer** playerToTeleportOthersTo);
	void Server_SpawnCamperByIndex(int* Index, int* Count);
	void Server_SetAllowPalletPullUpInteraction(bool* isAllowed);
	void Server_DisableStartUpdateMontageDuringEnter(bool* disable);
};


// Class DeadByDaylight.PlayerGameRelevancyComponent
// 0x0058 (0x0158 - 0x0100)
class UPlayerGameRelevancyComponent : public UActorComponent
{
public:
	struct FTagStateBool                               _isRelevantToGameplay;                                    // 0x0100(0x0030) (Net)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0130(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerGameRelevancyComponent"));

		return ptr;
	}

};


// Class DeadByDaylight.PlayerInteractionHandler
// 0x0268 (0x0368 - 0x0100)
class UPlayerInteractionHandler : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0100(0x0070) MISSED OFFSET
	float                                              PriorityConeAngle;                                        // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x24];                                      // 0x0174(0x0024) MISSED OFFSET
	struct FScriptMulticastDelegate                    NewInteractionRequestedDelegate;                          // 0x0198(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ServerValidatedInteractionStartedDelegate;                // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ServerValidatedInteractionEndedDelegate;                  // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	EInteractionLayer                                  InteractionLayer;                                         // 0x01C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x01C9(0x000F) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDeactivateSkillCheckDelegate;                           // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               _hasInteractionRequest;                                   // 0x01E8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _hasInteractionRequestInBuffer;                           // 0x01E9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x01EA(0x0006) MISSED OFFSET
	class UInteractionDefinition*                      _requestedInteraction;                                    // 0x01F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	EInputInteractionType                              _requestedInteractionType;                                // 0x01F8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	ERequestState                                      _requestedInteractionState;                               // 0x01F9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x01FA(0x0006) MISSED OFFSET
	class UInteractionDefinition*                      _currentInteraction;                                      // 0x0200(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x58];                                      // 0x0208(0x0058) MISSED OFFSET
	TArray<class ADBDPlayer*>                          _currentPlayerDependencies;                               // 0x0260(0x0010) (ZeroConstructor, Transient)
	EInputInteractionType                              _currentInteractionType;                                  // 0x0270(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0271(0x0007) MISSED OFFSET
	class USkillCheck*                                 _skillCheck;                                              // 0x0278(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0280(0x0008) MISSED OFFSET
	TArray<float>                                      _progressBasedSkillChecks;                                // 0x0288(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData08[0x60];                                      // 0x0298(0x0060) MISSED OFFSET
	class ADBDPlayer*                                  _requestedInterruptionOtherParty;                         // 0x02F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UInterruptionDefinition*                     _requestedInterruptionDefinition;                         // 0x0300(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               _requestedInterruptionIsInterruptor;                      // 0x0308(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0309(0x0007) MISSED OFFSET
	class ADBDPlayer*                                  _currentInterruptionOtherParty;                           // 0x0310(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UInterruptionDefinition*                     _currentInterruptionDefinition;                           // 0x0318(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               _currentInterruptionIsInterruptor;                        // 0x0320(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _interactionInProgress;                                   // 0x0321(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x36];                                      // 0x0322(0x0036) MISSED OFFSET
	TArray<class UInteractionDefinition*>              _interactionsInZone;                                      // 0x0358(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerInteractionHandler"));

		return ptr;
	}


	void UnPauseSkillCheckTimer();
	void StartCustomSkillCheck(ESkillCheckCustomType* Type, float* Delay);
	void SetSkillCheckTimer(float* Delay);
	void SetScanForInteractionsEnabled(bool* Enabled);
	void Server_StoreInterruption_Interruptor(class ADBDPlayer** interruptionOtherParty, class UInterruptionDefinition** InterruptionDefinition);
	void Server_StoreInteraction(EInputInteractionType* InteractionType, class UInteractionDefinition** Interaction);
	void Server_RequestInterruption_Interruptor();
	void Server_EndInteraction(class UInteractionDefinition** Interaction);
	void Server_DebugRequestInteraction(struct FString* interactionName, struct FString* InteractorName, struct FString* interactableName);
	void Server_CancelCurrentInteractionByInput();
	void Server_AnswerInterruption_Interruptee(bool* success);
	void ResetSuccessiveSkillCheckCount();
	void RemoveInteraction(class UInteractionDefinition** Interaction);
	void PauseSkillCheckTimer();
	int NumInteractionsInZone();
	void Multicast_StoreInterruption_Interruptor(class ADBDPlayer** interruptionOtherParty, class UInterruptionDefinition** InterruptionDefinition);
	void Multicast_StoreInteraction(EInputInteractionType* InteractionType, class UInteractionDefinition** Interaction);
	void Multicast_RequestInterruption_Interruptee(class ADBDPlayer** interruptionOtherParty, class UInterruptionDefinition** InterruptionDefinition);
	void Multicast_InterruptionRequestResult_Interruptor(bool* success);
	void Multicast_InteractionRequestResult(bool* success);
	void Multicast_CancelCurrentInteractionByInput();
	void IncrementSuccessiveSkillCheckCount();
	bool HasAvailableInteraction(EInputInteractionType* InteractionType);
	bool HasActiveSkillCheck();
	class USkillCheck* GetSkillCheck();
	float GetMultiplicativeSkillCheckProbabilityModifier();
	class UInteractionDefinition* GetCurrentInteractionOfType(EInputInteractionType* interactionInputType);
	class UInteractionDefinition* GetCurrentInteraction();
	void GetAvailableInteractions(TArray<class UInteractionDefinition*>* Result);
	class UInteractionDefinition* GetAvailableInteractionByID(struct FString* InteractionID);
	class UInteractionDefinition* GetAvailableInteraction(EInputInteractionType* InteractionType);
	float GetAdditiveSkillCheckProbabilityModifier();
	void Client_NotifyChargeCompleted(class UInteractionDefinition** Interaction);
	void CleanInteractionArray(class AActor** DestroyedActor);
	bool CanPerformInteraction(struct FString* interactionName);
	void Broadcast_Multicast_ConfirmChargedCompleted(bool* chargeComplete);
	void Broadcast_InteractionPlayerProperties_Multicast(struct FInteractionPlayerProperties* playerProperties);
	void Broadcast_InteractionPlayerProperties(struct FInteractionPlayerProperties* playerProperties);
	void Broadcast_ConfirmChargedCompleted(bool* chargeComplete);
	void Authority_ClearPlayerDependency(class ADBDPlayer** playerDependency);
	void Authority_ClearPlayerDependencies();
	void AddSelfInteractions(class AActor** interactionRoot);
	void AddInteraction(class UInteractionDefinition** Interaction);
};


// Class DeadByDaylight.PlayerMoveBackAndForthComponent
// 0x0040 (0x0140 - 0x0100)
class UPlayerMoveBackAndForthComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0100(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerMoveBackAndForthComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.SpherePlayerOverlapComponent
// 0x0000 (0x05C0 - 0x05C0)
class USpherePlayerOverlapComponent : public USphereComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SpherePlayerOverlapComponent"));

		return ptr;
	}


	void SetSphereRadius(float* InSphereRadius, bool* bUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
};


// Class DeadByDaylight.CapsulePlayerOverlapComponent
// 0x0000 (0x05C0 - 0x05C0)
class UCapsulePlayerOverlapComponent : public UCapsuleComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.CapsulePlayerOverlapComponent"));

		return ptr;
	}


	void SetCapsuleSize(float* InRadius, float* InHalfHeight, bool* bUpdateOverlaps);
	void SetCapsuleRadius(float* Radius, bool* bUpdateOverlaps);
	void SetCapsuleHalfHeight(float* HalfHeight, bool* bUpdateOverlaps);
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();
	float GetScaledCapsuleHalfHeight();
};


// Class DeadByDaylight.BoxPlayerOverlapComponent
// 0x0000 (0x05C0 - 0x05C0)
class UBoxPlayerOverlapComponent : public UBoxComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BoxPlayerOverlapComponent"));

		return ptr;
	}


	void SetBoxExtent(struct FVector* InBoxExtent, bool* bUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
};


// Class DeadByDaylight.PlayerPerspectiveComponent
// 0x0078 (0x0178 - 0x0100)
class UPlayerPerspectiveComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0100(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerPerspectiveComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.PlayerProfileDAL
// 0x0058 (0x0088 - 0x0030)
class UPlayerProfileDAL : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0030(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerProfileDAL"));

		return ptr;
	}

};


// Class DeadByDaylight.PlayerReportManager
// 0x00A8 (0x00D8 - 0x0030)
class UPlayerReportManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0030(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PlayerReportManager"));

		return ptr;
	}

};


// Class DeadByDaylight.PollableEventListener
// 0x0010 (0x0110 - 0x0100)
class UPollableEventListener : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PollableEventListener"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.PopupFactory
// 0x0008 (0x0038 - 0x0030)
class UPopupFactory : public UObject
{
public:
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PopupFactory"));

		return ptr;
	}

};


// Class DeadByDaylight.PopupSequencer
// 0x0030 (0x0060 - 0x0030)
class UPopupSequencer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0040(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PopupSequencer"));

		return ptr;
	}

};


// Class DeadByDaylight.PortalOutlineUpdateStrategy
// 0x0010 (0x0118 - 0x0108)
class UPortalOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _survivorAuraColor;                                       // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PortalOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.PortalPlacerStateComponent
// 0x0098 (0x0198 - 0x0100)
class UPortalPlacerStateComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnTeleportCooldownComplete;                               // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0110(0x000C) MISSED OFFSET
	int                                                _remainingPortals;                                        // 0x011C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x40];                                      // 0x0120(0x0040) MISSED OFFSET
	TArray<class ADemogorgonPortal*>                   _placedPortals;                                           // 0x0160(0x0010) (Net, ZeroConstructor, Transient)
	TArray<struct FPortalRestrictedLocation>           _restrictedPortalLocations;                               // 0x0170(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0180(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PortalPlacerStateComponent"));

		return ptr;
	}


	void UpdateRemainingPortalCount();
	void OnLevelReadyToPlay();
	void OnDemogorgonTeleportCooldownComplete__DelegateSignature();
	bool IsUsePortalCooldownDone();
	void InitializeTunableValues(class ASlasherPlayer** Killer);
	float GetTeleportDuration();
	int GetRemainingPortalCount();
};


// Class DeadByDaylight.PortalRadiusDetectorComponent
// 0x0058 (0x0158 - 0x0100)
class UPortalRadiusDetectorComponent : public UActorComponent
{
public:
	TArray<class ADemogorgonPortal*>                   Portals;                                                  // 0x0100(0x0010) (ZeroConstructor, Transient)
	TArray<class ADBDPlayer*>                          _playersInsideRadius;                                     // 0x0110(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0120(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PortalRadiusDetectorComponent"));

		return ptr;
	}


	void OnRep_PlayersInsideRadius();
	void OnPortalEffectsAppliedMultiDelegate__DelegateSignature();
	void Authority_OnLevelReadyToPlay();
	void Authority_CallOnPortalEffectsApplied(struct FScriptDelegate* callback);
};


// Class DeadByDaylight.PortalTargetingComponent
// 0x0030 (0x0130 - 0x0100)
class UPortalTargetingComponent : public UActorComponent
{
public:
	class ADemogorgonPortal*                           _targetedPortal;                                          // 0x0100(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPortalPlacerStateComponent*                 _portalPlacerState;                                       // 0x0108(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0110(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PortalTargetingComponent"));

		return ptr;
	}


	void SetIsPorting(bool* isPorting);
	void Server_SetTargetedPortal(class ADemogorgonPortal** targetedPortal);
	void Multicast_SetTargetedPortal(class ADemogorgonPortal** targetedPortal);
	class ADemogorgonPortal* GetTargetedPortal();
};


// Class DeadByDaylight.PowerButton
// 0x0058 (0x0358 - 0x0300)
class UPowerButton : public UBaseUserWidget
{
public:
	class UActionButton*                               Button;                                                   // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                SwitchIcon;                                               // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                CountContainer;                                           // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ProgressBarContainer;                                     // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CountLabel;                                               // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      TierImage;                                                // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                AddonsContainer;                                          // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGInventoryItemButton*                     FirstAddonSlot;                                           // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGInventoryItemButton*                     SecondAddonSlot;                                          // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              DisabledOpacity;                                          // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnabledOpacity;                                           // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UProgressBar*                                PowerChargeProgression;                                   // 0x0350(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PowerButton"));

		return ptr;
	}


	void SetSwitchIconActive(bool* Active);
	void SetState(EActionButtonState* State);
	void SetSecondaryBarProgression(float* progression);
	void SetPowerIntensityOpacity(float* Opacity);
	void SetPowerChargeProgression(float* progression);
	void OnUpdateItemProgress(int* itemIndex, float* powerPercentage, float* timePercentage);
	void OnTierChanged(int* previousTier, int* currentTier, bool* IsFirstTime);
	void OnSetItemProgressBarActive(int* itemIndex, bool* Active);
};


// Class DeadByDaylight.ProceduralGenerationData
// 0x0118 (0x0150 - 0x0038)
class UProceduralGenerationData : public UDataAsset
{
public:
	TArray<struct FQuadrantSpawnTypeProperties>        QuadrantSpawnTypeProperties;                              // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FQuadrantSpawnCategories>            QuadrantSpawnCategories;                                  // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FThemeProperties>                    ThemeProperties;                                          // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                MaxSurvivorCount;                                         // 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	TArray<struct FKillerItemDependencies>             KillersItemDependencies;                                  // 0x0070(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UCurveFloat*                                 SurvivorItemPopulationProbability;                        // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FSurvivorItemProperties>             SurvivorItemProperty;                                     // 0x0088(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UCurveFloat*                                 EscapeStrategyPopulationProbability;                      // 0x0098(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FEscapeStrategyProperty>             EscapeStrategyProperties;                                 // 0x00A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FEscapeTypeObjects>                  EscapeTypeActors;                                         // 0x00B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGameplayElementsPopulation>         ElementsPopulation;                                       // 0x00C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FManagedGameplayElementsPopulation>  ManagedElementsPopulation;                                // 0x00D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FSurvivorGroupingProbability>        SurvivorGroupingProbabilities;                            // 0x00E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                     ProceduralMapOffset;                                      // 0x00F0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProceduralTileWidth;                                      // 0x00FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProceduralTileHeight;                                     // 0x0100(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ProceduralQuadTileMapOffset;                              // 0x0104(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProceduralQuadTileCubeWidth;                              // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DifficultyModifier;                                       // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterCameraHeight;                                    // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterCollisionRadius;                                 // 0x011C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpawnerCollisionRadius;                                   // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TotemVisualHeight;                                        // 0x0124(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FEventSubstitionData>                _eventProperties;                                         // 0x0128(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0138(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ProceduralGenerationData"));

		return ptr;
	}

};


// Class DeadByDaylight.ProceduralLevelBuilder
// 0x0A00 (0x0D40 - 0x0340)
class AProceduralLevelBuilder : public AActor
{
public:
	struct FString                                     PathToMapDirectory;                                       // 0x0340(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     PathToTilesDirectory;                                     // 0x0350(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              KillerMinProximityFromCamper;                             // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SurvivorMinProximityFromOtherCamper;                      // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinProximityBetweenGenerators;                            // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinProximityBetweenChests;                                // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinProximityBetweenTotems;                                // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SurvivorMinProximityFromGenerator;                        // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SurvivorMinProximityFromTotem;                            // 0x0378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SurvivorMaxLineOfSightFromTotem;                          // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DebugMap;                                                 // 0x0380(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UClass*>                              DebugTiles;                                               // 0x0388(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              SmallMeatLockerMinProximityFromKillerLair;                // 0x0398(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FactorToAdjustToWhenOutOfProximity;                       // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FactorToAdjustToWhenInLineOfSight;                        // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeightAmplifier;                                          // 0x03A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeightAmplifierActivationHeight;                          // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	class UProceduralGenerationData*                   ProceduralGenerationData;                                 // 0x03B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TileWeightRateOfDecay;                                    // 0x03B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              QuadTileWeightRateOfDecay;                                // 0x03BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03C0(0x0008) MISSED OFFSET
	class UClass*                                      DesignTunableClass;                                       // 0x03C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDBDDesignTunables*                          _designTunables;                                          // 0x03D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FGeneratedLevelData                         _generatedData;                                           // 0x03D8(0x01C0)
	TArray<struct FDependency>                         _escapeDependencies;                                      // 0x0598(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x1C0];                                     // 0x05A8(0x01C0) MISSED OFFSET
	class UClass*                                      _tileClass;                                               // 0x0768(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1A8];                                     // 0x0770(0x01A8) MISSED OFFSET
	class UMapData*                                    _mapData;                                                 // 0x0918(0x0008) (ZeroConstructor, IsPlainOldData)
	class UObjectLibrary*                              _availableTilesLibrary;                                   // 0x0920(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xD8];                                      // 0x0928(0x00D8) MISSED OFFSET
	class UObjectLibrary*                              _availableDerivedTileLibrary;                             // 0x0A00(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTileMatrix*                                 _tileMatrix;                                              // 0x0A08(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTileBank*                                   _tileBank;                                                // 0x0A10(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x68];                                      // 0x0A18(0x0068) MISSED OFFSET
	class UActorSpawner*                               _killerLairSpawner;                                       // 0x0A80(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0A88(0x0008) MISSED OFFSET
	TArray<struct FSoftObjectPath>                     _itemAssetReferences;                                     // 0x0A90(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData07[0x18];                                      // 0x0AA0(0x0018) MISSED OFFSET
	TArray<class ATile*>                               _tilesThatHaveBeenSpawned;                                // 0x0AB8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData08[0x10];                                      // 0x0AC8(0x0010) MISSED OFFSET
	class AProceduralLevelData*                        _debugProceduralDatas;                                    // 0x0AD8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ADBDClientSyncer*                            _syncer;                                                  // 0x0AE0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x58];                                      // 0x0AE8(0x0058) MISSED OFFSET
	class UEdgeObjectHandlingStrategy*                 _edgeObjectHandlingStrategy;                              // 0x0B40(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x1F8];                                     // 0x0B48(0x01F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ProceduralLevelBuilder"));

		return ptr;
	}


	void SyncSeeds();
	void StartGenerationOnSyncerReady();
	class AActor* SpawnActor(class UClass** ActorClass, ETileSpawnPointType* spawnPointType);
	void OnMapLevelLoaded();
	void OfferingAdjustFog(float* Modifier);
	void Multicast_DebugShareGenerationData(struct FGenerationParams* usedParams);
	void BuildFromSeed();
};


// Class DeadByDaylight.ProceduralLevelData
// 0x0238 (0x0578 - 0x0340)
class AProceduralLevelData : public AActor
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0340(0x0030) UNKNOWN PROPERTY: SoftObjectProperty DeadByDaylight.ProceduralLevelData.SelectedPaperMap
	int                                                GenerationSeed;                                           // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EKillerMoodInfluence                               LevelMood;                                                // 0x0374(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0375(0x0003) MISSED OFFSET
	struct FGeneratedLevelData                         GeneratedData;                                            // 0x0378(0x01C0) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<struct FName>                               offerings;                                                // 0x0538(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                PerksLevel;                                               // 0x0548(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x054C(0x0004) MISSED OFFSET
	TArray<struct FName>                               Perks;                                                    // 0x0550(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               SkipGameplayElementGeneration;                            // 0x0560(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0561(0x0007) MISSED OFFSET
	class AActor*                                      _builder;                                                 // 0x0568(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0570(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ProceduralLevelData"));

		return ptr;
	}

};


// Class DeadByDaylight.ProcessingPopupScreen
// 0x0000 (0x00F0 - 0x00F0)
class UProcessingPopupScreen : public UBasePopupScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ProcessingPopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ProjectedUserInterface
// 0x0028 (0x0368 - 0x0340)
class AProjectedUserInterface : public AActor
{
public:
	struct FString                                     ScreenClassName;                                          // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class URootMovie*                                  _rootMovie;                                               // 0x0350(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     _projectionPanelSize;                                     // 0x0358(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0364(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ProjectedUserInterface"));

		return ptr;
	}


	void UpdateMouseInput();
	void InitializeComponents(class UStaticMeshComponent** projectionPanel);
};


// Class DeadByDaylight.PromptManager
// 0x0038 (0x0068 - 0x0030)
class UPromptManager : public UObject
{
public:
	class UAtlantaPromptWidget*                        _promptWidget;                                            // 0x0030(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAtlantaPromptWidget*                        _tutorialPromptWidget;                                    // 0x0038(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0040(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PromptManager"));

		return ptr;
	}

};


// Class DeadByDaylight.PulldownAnalytics
// 0x0000 (0x0030 - 0x0030)
class UPulldownAnalytics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.PulldownAnalytics"));

		return ptr;
	}

};


// Class DeadByDaylight.RankManager
// 0x0000 (0x0030 - 0x0030)
class URankManager : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RankManager"));

		return ptr;
	}

};


// Class DeadByDaylight.RBTOutlineUpdateStrategy
// 0x0000 (0x0128 - 0x0128)
class URBTOutlineUpdateStrategy : public UDefaultOutlineUpdateStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RBTOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.RecentGameEventTracker
// 0x0050 (0x0080 - 0x0030)
class URecentGameEventTracker : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RecentGameEventTracker"));

		return ptr;
	}

};


// Class DeadByDaylight.RecommendationsGenerator
// 0x0090 (0x00C0 - 0x0030)
class URecommendationsGenerator : public UObject
{
public:
	TWeakObjectPtr<class UShopManager>                 _shopManager;                                             // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class UDBDGameInstance>             _gameInstance;                                            // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<struct FString, class URecommendationsFilter*> _filters;                                                 // 0x0040(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0090(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RecommendationsGenerator"));

		return ptr;
	}

};


// Class DeadByDaylight.RedStainComponent
// 0x0010 (0x0410 - 0x0400)
class URedStainComponent : public USpotLightComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0400(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RedStainComponent"));

		return ptr;
	}


	void UpdateRedStain(bool* shouldBeHidden, float* Alpha);
};


// Class DeadByDaylight.RegionFinder
// 0x0078 (0x00A8 - 0x0030)
class URegionFinder : public UObject
{
public:
	TArray<struct FRegion>                             Regions;                                                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              TIMEOUT;                                                  // 0x0040(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x64];                                      // 0x0044(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RegionFinder"));

		return ptr;
	}

};


// Class DeadByDaylight.ReportPlayerPopupScreen
// 0x0030 (0x0140 - 0x0110)
class UReportPlayerPopupScreen : public UGenericPopupScreen
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0110(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ReportPlayerPopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ReverseBearTrap
// 0x00B8 (0x0480 - 0x03C8)
class AReverseBearTrap : public AInteractable
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03C8(0x0008) MISSED OFFSET
	class USkeletalMeshComponent*                      _rbtMesh;                                                 // 0x03D0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAnimationMontageSlave*                      _animMontageSlave;                                        // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x98];                                      // 0x03E0(0x0098) MISSED OFFSET
	bool                                               _exitGatesPoweredAfterAttachment;                         // 0x0478(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               _generatorFixedAfterAttachment;                           // 0x0479(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x047A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ReverseBearTrap"));

		return ptr;
	}


	void StopMontage();
	void StopExecutionTimer();
	bool ShouldUpdateExecutionTimer();
	void SetVisible(bool* visible);
	void SetKeyID(int* keyID);
	void SetGateClosedAtAttachment(bool* CLOSED);
	void ResetExecutionTimer(float* Time);
	void OnWarningLevelChanged(int* previousWarningLevel, int* currentWarningLevel);
	void OnGeneratorComplete(int* remainingGeneratorCount);
	void OnExitWarningZone();
	void OnEnterWarningZone();
	void OnDetachSurvivor(class ACamperPlayer** Survivor);
	void OnAttachSurvivorBegin(class ACamperPlayer** Survivor);
	void OnAttachSurvivor(class ACamperPlayer** Survivor);
	void NotifyOnAttachSurvivorBegin(class ACamperPlayer** Survivor);
	void NotifyDetachStarted(class ACamperPlayer** Survivor);
	bool IsRBTActivated();
	bool IsInWarningZone();
	bool IsExecutionTimerDone();
	bool IsExecutionTimerActive();
	bool HasDetachStarted();
	bool GetWasGateClosedAtAttachment();
	int GetWarningLevel();
	int GetKeyID();
	bool GetGeneratorFixedAfterAttachment();
	bool GetExitGatesPoweredAfterAttachment();
	float GetExecutionTimerTimeLeft();
	float GetExecutionTimerPercentTimeElapsed();
	class ACamperPlayer* GetAttachedSurvivor();
	void DetachSurvivor(class ACamperPlayer** Survivor);
	bool CanExecute();
	void AttachSurvivor(class ACamperPlayer** Survivor);
};


// Class DeadByDaylight.ReverseBearTrapRemover
// 0x0068 (0x0430 - 0x03C8)
class AReverseBearTrapRemover : public AInteractable
{
public:
	TArray<int>                                        _keys;                                                    // 0x03C8(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x03D8(0x0050) MISSED OFFSET
	class UMapActorComponent*                          _mapActor;                                                // 0x0428(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ReverseBearTrapRemover"));

		return ptr;
	}


	void PlayRemoveFailMontage();
	bool HasSearchedForKey(int* keyID);
	bool HasKey(int* keyID);
	class UMapActorComponent* GetMapActor();
	class AReverseBearTrap* GetAttachedRBT(class AActor** Player);
	void AddSearchedKey(int* keyID);
	void AddKey(int* keyID);
};


// Class DeadByDaylight.ReverseBearTrapUtilities
// 0x0000 (0x0030 - 0x0030)
class UReverseBearTrapUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ReverseBearTrapUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.RewardTrackContainer
// 0x01D0 (0x0200 - 0x0030)
class URewardTrackContainer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x1D0];                                     // 0x0030(0x01D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RewardTrackContainer"));

		return ptr;
	}

};


// Class DeadByDaylight.RitualAnalyticsComponent
// 0x0010 (0x0110 - 0x0100)
class URitualAnalyticsComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RitualAnalyticsComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.RitualHandlerComponent
// 0x0140 (0x0240 - 0x0100)
class URitualHandlerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET
	TMap<struct FName, class URitualEvaluatorBase*>    _evaluators;                                              // 0x0110(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0xE0];                                      // 0x0160(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RitualHandlerComponent"));

		return ptr;
	}


	void ReceiveGameEvent(EDBDScoreTypes* scoreType, float* amount, class AActor** Instigator, class AActor** Target);
	void OnGameEvent(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
};


// Class DeadByDaylight.RoleSelectionScreen
// 0x0030 (0x0120 - 0x00F0)
class URoleSelectionScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00F0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RoleSelectionScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.RootMovie
// 0x0080 (0x00B0 - 0x0030)
class URootMovie : public UObject
{
public:
	struct FString                                     SwfAssetName;                                             // 0x0030(0x0010) (ZeroConstructor)
	class UGFxMoviePlayer*                             SwfMoviePlayer;                                           // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET
	class UScreenController*                           m_ScreenController;                                       // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UUIController*                               m_UIController;                                           // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0068(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.RootMovie"));

		return ptr;
	}


	void SetCursorAsSticky(int* isSticky, int* lockVertical, int* lockHorizontal, int* moveByX, int* moveByY, float* stickinessOverride);
	void RegisterView(struct FString* screenId, class UGFxObject** ScreenObject);
	void RegisterUIControl(class UGFxObject** flashObj);
	void RegisterScreenControl(class UGFxObject** flashObj);
	void PlaySound(struct FString* soundId);
	void OpenLinkInBrowser(struct FString* linkAddress);
	void OnScreenReady(struct FString* screenId);
	void OnScreenLeave(struct FString* screenId);
	void OnScreenEnter(struct FString* screenId);
	void OnMovieClosed();
	void OnFlashReady();
	void OnAssert(int* Type, struct FString* Message);
};


// Class DeadByDaylight.S3GameConfigs
// 0x00B0 (0x00E8 - 0x0038)
class US3GameConfigs : public UGameInstanceSubsystem
{
public:
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0038(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.S3GameConfigs"));

		return ptr;
	}

};


// Class DeadByDaylight.SafeZoneManagerWidget
// 0x0008 (0x0308 - 0x0300)
class USafeZoneManagerWidget : public UBaseUserWidget
{
public:
	class UCanvasPanel*                                SafeZonePanel;                                            // 0x0300(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SafeZoneManagerWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.SaveGameSummaryUtilities
// 0x0000 (0x0030 - 0x0030)
class USaveGameSummaryUtilities : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SaveGameSummaryUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.ScreamComponent
// 0x0020 (0x0120 - 0x0100)
class UScreamComponent : public UActorComponent
{
public:
	class UCustomizedAudioComponent*                   _customizedAudio;                                         // 0x0100(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAkComponent*                                _audioComponent;                                          // 0x0108(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UPerkManager*                                _perkManager;                                             // 0x0110(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UMontagePlayer*                              _montagePlayer;                                           // 0x0118(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ScreamComponent"));

		return ptr;
	}


	bool PlayScreamSoundAndAnimation(class UAkAudioEvent** audioEvent, bool* fireLoudNoiseEvent, struct FMontagePlaybackDefinition* montageDefinition, float* audibleRange);
	bool PlayScreamSound(class UAkAudioEvent** audioEvent, bool* fireLoudNoiseEvent, float* audibleRange);
	bool CanScream();
};


// Class DeadByDaylight.ScreenCenterAimingStrategy
// 0x0010 (0x0110 - 0x0100)
class UScreenCenterAimingStrategy : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ScreenCenterAimingStrategy"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.ScreenController
// 0x0260 (0x0290 - 0x0030)
class UScreenController : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class UGFxObject*                                  _screenControllerObj;                                     // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UGFxMoviePlayer*                             _moviePlayer;                                             // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<struct FString, class UScreenBase*>           _screenDictionary;                                        // 0x0048(0x0050) (ZeroConstructor, Transient)
	TMap<struct FString, EScreenType>                  _screenTypeDictionary;                                    // 0x0098(0x0050) (ZeroConstructor, Transient)
	TMap<class UClass*, TWeakObjectPtr<class UUserWidget>> _cachedUMGScreens;                                        // 0x00E8(0x0050) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x158];                                     // 0x0138(0x0158) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ScreenController"));

		return ptr;
	}

};


// Class DeadByDaylight.ScreenSpaceLocationComponent
// 0x0020 (0x0290 - 0x0270)
class UScreenSpaceLocationComponent : public USceneComponent
{
public:
	int                                                FrameDelay;                                               // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   _currentResolution;                                       // 0x0274(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x027C(0x0004) MISSED OFFSET
	TArray<struct FTransform>                          _previousTransforms;                                      // 0x0280(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ScreenSpaceLocationComponent"));

		return ptr;
	}


	bool HasValidPosition();
	struct FVector2D GetCurrentResolution();
};


// Class DeadByDaylight.Searchable
// 0x0030 (0x03F8 - 0x03C8)
class ASearchable : public AInteractable
{
public:
	float                                              Weight;                                                   // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EItemRarity                                        ItemRarity;                                               // 0x03CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03CD(0x0003) MISSED OFFSET
	class USearchableSpawnPoint*                       _searchableSpawnPoint;                                    // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       _itemIdToSpawn;                                           // 0x03D8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03D8(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	bool                                               _hasBeenSearched;                                         // 0x03E4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x13];                                      // 0x03E5(0x0013) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Searchable"));

		return ptr;
	}


	class ACollectable* SpawnObject(class ADBDPlayer** Player);
	void SetHasBeenSearched(bool* newHasBeenSearched);
	bool GetHasBeenSearched();
};


// Class DeadByDaylight.SearchableOutlineUpdateStrategy
// 0x0000 (0x0128 - 0x0128)
class USearchableOutlineUpdateStrategy : public UDefaultOutlineUpdateStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SearchableOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.TileSpawnPoint
// 0x0070 (0x02E0 - 0x0270)
class UTileSpawnPoint : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0270(0x0008) MISSED OFFSET
	ETileSpawnPointType                                TileSpawnPointType;                                       // 0x0278(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0279(0x0003) MISSED OFFSET
	float                                              Weight;                                                   // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0280(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.TileSpawnPoint.Visualization
	unsigned char                                      UnknownData03[0x8];                                       // 0x02B0(0x0008) MISSED OFFSET
	class AActor*                                      _spawnedObject;                                           // 0x02B8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	TArray<class UClass*>                              ObjectSpawnModifier;                                      // 0x02C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                _spawnPriorityTier;                                       // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _weightInfluenceable;                                     // 0x02D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _weightInfluencer;                                        // 0x02D5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xA];                                       // 0x02D6(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TileSpawnPoint"));

		return ptr;
	}


	void OnRep_SpawnObject();
	class AActor* GetSpawnedObject();
};


// Class DeadByDaylight.SearchableSpawnPoint
// 0x0000 (0x02E0 - 0x02E0)
class USearchableSpawnPoint : public UTileSpawnPoint
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SearchableSpawnPoint"));

		return ptr;
	}

};


// Class DeadByDaylight.SeasonEndPopupScreen
// 0x0000 (0x0110 - 0x0110)
class USeasonEndPopupScreen : public UGenericPopupScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SeasonEndPopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.SeasonManager
// 0x0010 (0x0350 - 0x0340)
class ASeasonManager : public AActor
{
public:
	class UDBDGameInstance*                            _gameInstance;                                            // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SeasonManager"));

		return ptr;
	}


	int GetOldSlasherPips();
	int GetOldCamperPips();
};


// Class DeadByDaylight.SectionnedChargeableComponent
// 0x0008 (0x02E8 - 0x02E0)
class USectionnedChargeableComponent : public UChargeableComponent
{
public:
	unsigned char                                      _sections;                                                // 0x02E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SectionnedChargeableComponent"));

		return ptr;
	}


	float GetSectionChargeRemaining();
};


// Class DeadByDaylight.SelectiveVisibilityComponent
// 0x0000 (0x0270 - 0x0270)
class USelectiveVisibilityComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SelectiveVisibilityComponent"));

		return ptr;
	}


	void ToggleVisibility(bool* bPropagateToChildren);
	bool SnapTo(class USceneComponent** InParent, struct FName* InSocketName);
	void SetWorldScale3D(struct FVector* NewScale);
	void SetVisibility(bool* bNewVisibility, bool* bPropagateToChildren);
	void SetSkipComponentAndChildrenTransformUpdate(bool* value);
	void SetShouldUpdatePhysicsVolume(bool* bInShouldUpdatePhysicsVolume);
	void SetRelativeScale3D(struct FVector* NewScale3D);
	void SetMobility(TEnumAsByte<EComponentMobility>* NewMobility);
	void SetHiddenInGame(bool* NewHidden, bool* bPropagateToChildren);
	void SetAbsolute(bool* bNewAbsoluteLocation, bool* bNewAbsoluteRotation, bool* bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool* oldValue);
	void OnRep_Transform();
	void OnRep_RelativeRotation();
	void OnRep_RelativeLocation();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldRotation(struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeRotation(struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(EDetachmentRule* LocationRule, EDetachmentRule* RotationRule, EDetachmentRule* ScaleRule, bool* bCallModify);
	bool K2_AttachToComponent(class USceneComponent** Parent, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent** InParent, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachType, bool* bWeldSimulatedBodies);
	void K2_AddWorldTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeLocation(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(struct FName* BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(struct FName* InSocketName, TEnumAsByte<ERelativeTransformSpace>* TransformSpace);
	struct FRotator GetSocketRotation(struct FName* InSocketName);
	struct FQuat GetSocketQuaternion(struct FName* InSocketName);
	struct FVector GetSocketLocation(struct FName* InSocketName);
	bool GetSkipComponentAndChildrenTransformUpdate();
	bool GetShouldUpdatePhysicsVolume();
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool* bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int* ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(struct FName* InSocketName);
	void DetachFromParent(bool* bMaintainWorldPosition, bool* bCallModify);
};


// Class DeadByDaylight.ShopCameraManager
// 0x0020 (0x0360 - 0x0340)
class AShopCameraManager : public AInfo
{
public:
	TArray<struct FCharacterCameraTag>                 CatalogCharactersCamera;                                  // 0x0340(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCharacterCameraTag>                 StoryCharactersCamera;                                    // 0x0350(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ShopCameraManager"));

		return ptr;
	}

};


// Class DeadByDaylight.ShopManager
// 0x05B8 (0x05E8 - 0x0030)
class UShopManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x98];                                      // 0x0030(0x0098) MISSED OFFSET
	TWeakObjectPtr<class UDBDGameInstance>             _gameInstance;                                            // 0x00C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x410];                                     // 0x00D0(0x0410) MISSED OFFSET
	class UBannerDataProcessor*                        _bannerDataProcessor;                                     // 0x04E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class URecommendationsGenerator*                   _recommendationsGenerator;                                // 0x04E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF8];                                      // 0x04F0(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ShopManager"));

		return ptr;
	}

};


// Class DeadByDaylight.SkillCheck
// 0x00E0 (0x0350 - 0x0270)
class USkillCheck : public USceneComponent
{
public:
	float                                              SuccessZoneStart;                                         // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SuccessZoneEnd;                                           // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BonusZoneLength;                                          // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SkillCheckCount;                                          // 0x027C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                xOffset;                                                  // 0x0280(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              xOffset_max;                                              // 0x0284(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                yOffset;                                                  // 0x0288(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              yOffset_max;                                              // 0x028C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              InsaneSkillCheckJitterAmplitude;                          // 0x0290(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x24];                                      // 0x0294(0x0024) MISSED OFFSET
	class ADBDPlayer*                                  _owner;                                                   // 0x02B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UChargeableInteractionDefinition*            _currentInteraction;                                      // 0x02C0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x88];                                      // 0x02C8(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SkillCheck"));

		return ptr;
	}


	bool ShouldShowWarning();
	void Server_SetInteraction(class UChargeableInteractionDefinition** Interaction);
	void Server_OnSkillCheckSuccess(bool* Bonus, bool* insane, ESkillCheckCustomType* Type);
	void Server_OnSkillCheckFailure(bool* hadInput, bool* insane, ESkillCheckCustomType* Type);
	void OnSkillCheckInput();
	void Multicast_SkillCheckResponse(float* ChargeChange, bool* hadInput, bool* success, bool* Bonus, bool* insane, ESkillCheckCustomType* Type, bool* TriggerLoudNoise, class UChargeableInteractionDefinition** Interaction);
	bool IsDisplayed();
	float GetStartDelayInSeconds();
	void ActivateSkillCheck(class UInteractionDefinition** Interaction, float* Delay);
	void ActivateCustomSkillCheck(ESkillCheckCustomType* Type, float* Delay);
};


// Class DeadByDaylight.SlasherAnimInstance
// 0x0130 (0x03A0 - 0x0270)
class USlasherAnimInstance : public UAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0270(0x0008) MISSED OFFSET
	bool                                               _isCrouched;                                              // 0x0278(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isRevvingChainsaw;                                       // 0x0279(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isAttackSuccessMontagePlaying;                           // 0x027A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isCamOn;                                                 // 0x027B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isAttacking;                                             // 0x027C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isAnyMontagePlaying;                                     // 0x027D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isFrenzy;                                                // 0x027E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isFrenzyCD;                                              // 0x027F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isInParadise;                                            // 0x0280(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _enableArmOverrideTier3;                                  // 0x0281(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isRingingBell;                                           // 0x0282(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isCarrying;                                              // 0x0283(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     _firstPersonCarryOffset;                                  // 0x0284(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     _firstPersonCarryOffsetLookingDown;                       // 0x0290(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isPassivePhaseWalking;                                   // 0x029C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isActivePhaseWalking;                                    // 0x029D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isInAir;                                                 // 0x029E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isSpectator;                                             // 0x029F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _firstPersonView;                                         // 0x02A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _isIdle;                                                  // 0x02A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _validSlasher;                                            // 0x02A2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x02A3(0x0001) MISSED OFFSET
	float                                              _animDirection;                                           // 0x02A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _animSpeed;                                               // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _animPitch;                                               // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _animTurning;                                             // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _animYaw;                                                 // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _pelvisHeight;                                            // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _idleTime;                                                // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                _directionSwitch;                                         // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     _leftClearFrontSpaceVector;                               // 0x02C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     _rightClearFrontSpaceVector;                              // 0x02D0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     _velocity;                                                // 0x02DC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     _rightFootEffectorLocation;                               // 0x02E8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     _leftFootEffectorLocation;                                // 0x02F4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    _meshRotation;                                            // 0x0300(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x030C(0x0004) MISSED OFFSET
	TArray<class UAnimMontage*>                        _attackSuccessAnimations;                                 // 0x0310(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UAnimMontage*>                        _camOnAnimations;                                         // 0x0320(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class ASlasherPlayer*                              _mySlasher;                                               // 0x0330(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EInteractionAnimation                              _interactionType;                                         // 0x0338(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0339(0x0007) MISSED OFFSET
	class UPortalPlacerStateComponent*                 _demogorgonPortalPlacerState;                             // 0x0340(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              _demogorgonTeleportDuration;                              // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	class UChargedAttackStateComponent*                _demogorgonChargedAttackStateComponent;                   // 0x0350(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               _isDemogorgonCharging;                                    // 0x0358(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0359(0x0003) MISSED OFFSET
	float                                              _demogorgonChargingPercent;                               // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UOniDemonModeAttackStateComponent*           _oniAttackState;                                          // 0x0360(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               _isOniCharging;                                           // 0x0368(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EOniAttackType                                     _oniAttackType;                                           // 0x0369(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x036A(0x0002) MISSED OFFSET
	float                                              _oniChargeDuration;                                       // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EAttackSubstate                                    _attackSubstate;                                          // 0x0370(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0371(0x0007) MISSED OFFSET
	class UEvilWithinComponent*                        _evilWithinComponent;                                     // 0x0378(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UFrenzyComponent*                            _frenzyComponent;                                         // 0x0380(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UPhaseWalkingComponent*                      _phaseWalkingComponent;                                   // 0x0388(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UArmIKSensorComponent*                       _armIKSensorComponent;                                    // 0x0390(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0398(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SlasherAnimInstance"));

		return ptr;
	}


	void SetIsCrouched(bool* value);
	void CallOnFootTrapped();
};


// Class DeadByDaylight.SlasherAttackPickerComponent
// 0x0000 (0x0100 - 0x0100)
class USlasherAttackPickerComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SlasherAttackPickerComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.SlasherHitsWhileCarryingTrackerComponent
// 0x0068 (0x0168 - 0x0100)
class USlasherHitsWhileCarryingTrackerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0100(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.SlasherHitsWhileCarryingTrackerComponent._campersHitDuringLastCarry
	unsigned char                                      UnknownData01[0x18];                                      // 0x0150(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SlasherHitsWhileCarryingTrackerComponent"));

		return ptr;
	}


	void OnPickup(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
	void OnAttack(struct FGameplayTag* gameEventType, struct FGameEventData* GameEventData);
};


// Class DeadByDaylight.SlasherMovementComponent
// 0x0020 (0x0960 - 0x0940)
class USlasherMovementComponent : public UDBDCharacterMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0940(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SlasherMovementComponent"));

		return ptr;
	}


	void SetRandomInputAmplitude(float* value);
	void Server_SetMaxSpeedMultiplierScalar(float* Timestamp, float* value);
	void Server_SetMaxAccelerationMultiplierScalar(float* Timestamp, float* value);
	void Server_SetGroundFriction(float* Timestamp, float* value);
	void Server_SetAdditiveMaxSpeedScalar(float* Timestamp, float* value);
	void Server_RemoveMaxSpeedMultiplierCurve(float* Timestamp, class UCurveFloat** Curve);
	void Server_AddMaxSpeedMultiplierCurve(float* Timestamp, class UCurveFloat** Curve, float* Duration);
	void Local_AddMaxSpeedMultiplierCurve(class UCurveFloat** Curve, float* Duration, bool* autoRemove);
	bool IsApplyingRandomInput();
};


// Class DeadByDaylight.SlasherOutlineUpdateStrategy
// 0x0038 (0x0140 - 0x0108)
class USlasherOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FScriptMulticastDelegate                    OnRevealed;                                               // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FLinearColor                                _nonRevealedColor;                                        // 0x0118(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                _revealedColor;                                           // 0x0128(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SlasherOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.SlasherPlayer
// 0x03A0 (0x16A0 - 0x1300)
class ASlasherPlayer : public ADBDPlayer
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x1300(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnOffensiveAction;                                        // 0x1308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     PutDownTraceLocation;                                     // 0x1318(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       DefaultSlasherPower;                                      // 0x1324(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x1324(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              LoudNoiseDisplayTime;                                     // 0x1330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     TargetPriorityFactor;                                     // 0x1334(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldDisplayAttackZones;                                 // 0x1340(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x1341(0x0007) MISSED OFFSET
	class UClass*                                      CamperExposer;                                            // 0x1348(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EKillerMoodInfluence                               KillerMoodInfluence;                                      // 0x1350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x1351(0x0007) MISSED OFFSET
	TArray<EKillerAbilities>                           KillerAbilities;                                          // 0x1358(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UKillerSoundCuesComponent*                   KillerSoundCuesComponent;                                 // 0x1368(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               ShowKillerPowerDebugInfo;                                 // 0x1370(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasDamagedGeneratorSinceHook;                             // 0x1371(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x1372(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStalkModeChangedEvent;                                  // 0x1378(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCurveFloat*                                 AttackForwardInputSmoothingCurve;                         // 0x1388(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UAkComponent>                 _audioComponent;                                          // 0x1390(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              _slasherLightIntensity;                                   // 0x1398(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0xC];                                       // 0x139C(0x000C) MISSED OFFSET
	TMap<class ADBDPlayer*, struct FTargetFocusTimer>  _stalkTimers;                                             // 0x13A8(0x0050) (ZeroConstructor, Transient)
	class UStillnessTrackerComponent*                  _stillnessTracker;                                        // 0x13F8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData)
	class UAimAssistComponent*                         _aimAssistComponent;                                      // 0x1400(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FDBDTimer                                   _recentlyCloakedTimer;                                    // 0x1408(0x0028) (Transient)
	struct FDBDTimer                                   _flashlightBlindEvasionScoreTimer;                        // 0x1430(0x0028) (Transient)
	struct FDBDTimer                                   _flashlightBurnoutEvasionScoreTimer;                      // 0x1458(0x0028) (Transient)
	class UCurveFloat*                                 AttackFrenzyOnHealthyCurve;                               // 0x1480(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AttackFrenzyOnInjuredCurve;                               // 0x1488(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AttackFrenzyOnBleedoutCurve;                              // 0x1490(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _stalkTierWalkSpeedMultiplier;                            // 0x1498(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              _stalkTierCarrySpeedMultiplier;                           // 0x149C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class USlasherTREmitterComponent*                  _terrorRadiusEmitter;                                     // 0x14A0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x14A8(0x0008) MISSED OFFSET
	class ULoudNoiseHUDIndicator*                      _loudNoiseIndicator;                                      // 0x14B0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UFlashLightReceiverComponent*                _fullBodyFlashLightReceiver;                              // 0x14B8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UChargeableComponent*                        _invisibilityBurnoutChargeableComponent;                  // 0x14C0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class USlasherHitsWhileCarryingTrackerComponent*   _hitsWhileCarryingTracker;                                // 0x14C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              _stealthIncreaseRate;                                     // 0x14D0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              _stealthDecreaseRate;                                     // 0x14D4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FDateTime                                   _stillnessStartTime;                                      // 0x14D8(0x0008) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData07[0x68];                                      // 0x14E0(0x0068) MISSED OFFSET
	struct FTagStateBool                               _isInStalkMode;                                           // 0x1548(0x0030) (Net)
	unsigned char                                      UnknownData08[0x90];                                      // 0x1578(0x0090) MISSED OFFSET
	bool                                               _isKilling;                                               // 0x1608(0x0001) (ZeroConstructor, IsPlainOldData)
	int8_t                                             _allowedKillCount;                                        // 0x1609(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int8_t                                             _allowedKillAfterHookingCount;                            // 0x160A(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _allowedKillLastSurvivor;                                 // 0x160B(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0xC];                                       // 0x160C(0x000C) MISSED OFFSET
	int                                                _cachedBloodlustTier;                                     // 0x1618(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0xC];                                       // 0x161C(0x000C) MISSED OFFSET
	uint32_t                                           _killerPowerDebugFlags;                                   // 0x1628(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _obstructedAttackHasPriority;                             // 0x162C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _removeSnapWhenTargetFound;                               // 0x162D(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                                       // 0x162E(0x0002) MISSED OFFSET
	struct FGameplayTag                                _presenceTag;                                             // 0x1630(0x000C) (Edit)
	bool                                               _enableKillerCrouchInput;                                 // 0x163C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               _canStartAttackWhileCrouched;                             // 0x163D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x163E(0x0002) MISSED OFFSET
	class ACamperPlayer*                               _carriedCamper;                                           // 0x1640(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMoriComponent*                              _moriComponent;                                           // 0x1648(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData13[0x10];                                      // 0x1650(0x0010) MISSED OFFSET
	EAttackType                                        _basicAttackType;                                         // 0x1660(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x7];                                       // 0x1661(0x0007) MISSED OFFSET
	class UArmIKSensorComponent*                       _armIKSensorComponent;                                    // 0x1668(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData15[0x30];                                      // 0x1670(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SlasherPlayer"));

		return ptr;
	}


	bool WasRecentlyCloaked();
	void UpdateRageTierEffect(int* previousTier, int* currentTier);
	void TriggerPutDownAnimation();
	void TriggerPickUpAnimation();
	void SpawnSlasherPower();
	bool ShouldApplyBloodlustSpeedModifier();
	void SetStalkTierWalkSpeedMultiplier(float* stalkTierWalkSpeedMultiplier);
	void SetStalkTierCarrySpeedMultiplier(float* stalkTierCarrySpeedMultiplier);
	void SetLightIntensity(float* Intensity);
	void SetIsKilling(bool* IsKilling);
	void SetGuidedAction(ESlasherGuidedAction* action);
	void SetChainsawSprinting(bool* chainsawSprinting);
	void SetCarriedCamper(class ACamperPlayer** camper);
	void SetBeingWiggled(bool* value);
	void SetAttackDetectionZoneSet(EAttackZoneSet* attackZoneSet);
	void Server_SetLungeType(int* lungeType);
	void Server_SetKillerPowerDebugFlag(uint32_t* flag, bool* value);
	void Server_SendAttackInput(bool* pressed);
	void Server_RemoveSnapWhenTargetFound(bool* enable);
	void Server_ObstructedAttackHasPriority(bool* enable);
	void Server_MergeLockOnDamageZones(bool* enable);
	void Server_DisplayAttackZones(bool* Display);
	void Server_AllowKilling(int8_t* numKills);
	void OnSurvivorsLeftChanged(int* survivorRemaining);
	void OnSurvivorKilled(class ACamperPlayer** playerToKill, bool* consumeKill);
	void OnSuccessfulInterruption(class ACamperPlayer** interruptedSurvivor);
	void OnStealthChanged(bool* stealth);
	void OnStalkModeChangedEvent__DelegateSignature(bool* IsInStalkMode);
	void OnStalkModeChangedCosmetic(bool* stalkMode);
	void OnStalkModeChanged(bool* stalkMode);
	void OnPickupStart_BP();
	void OnPickUpEnd_BP();
	void OnPerformingChargableInteraction(float* Progress);
	void OnLoudNoiseTriggered(class AActor** originator, class AActor** instigatingActor, struct FVector* Location, bool* shouldTrack, float* audibleRange, bool* isQuickAction);
	void OnLoudNoiseIndicatorDestroyed();
	void OnKillerAbilityUpdateActivate(EKillerAbilities* killerAbility, float* percent);
	void OnKillerAbilityEndDeactivate(EKillerAbilities* killerAbility, bool* Forced);
	void OnKillerAbilityEndActivate(EKillerAbilities* killerAbility);
	void OnKillerAbilityBeginDeactivate(EKillerAbilities* killerAbility, bool* Forced);
	void OnKillerAbilityBeginActivate(EKillerAbilities* killerAbility);
	void OnInvisibilityChargeEmptied();
	void OnInvisibilityBurnoutChargeCompletionChanged(bool* COMPLETED, TArray<class AActor*>* instigators);
	void OnDropCamperEnd_BP();
	void OnCamperHitFX(class ACamperPlayer** camper, bool* showBloodSpatter);
	void Multicast_SetLungeType(int* lungeType);
	void Multicast_SetGuidedAction(ESlasherGuidedAction* action);
	void Multicast_SetAttackDetectionZoneSet(EAttackZoneSet* attackZoneSet);
	void Multicast_MergeLockOnDamageZones(bool* enable);
	void Multicast_DisplayAttackZones(bool* Display);
	void Multicast_CamperHitCosmetic_NonLocal(class ACamperPlayer** camper, bool* causedKO, bool* showBloodSpatter);
	void Multicast_CamperHitCosmetic(class ACamperPlayer** camper, bool* causedKO, bool* showBloodSpatter);
	void MergeLockOnDamageZones(bool* enable);
	void Local_RequestAttack(EAttackType* attackType);
	bool Local_CancelAttack();
	bool IsWalkLocked();
	bool IsUncloaking();
	bool IsOfferingAllowingKill(class ACamperPlayer** camper);
	bool IsKilling();
	bool IsInterruptBlocked();
	bool IsInBlinkCooldown();
	bool IsImmuneToObservingPlayerDetection(class ADBDPlayer** observingPlayer);
	bool IsHooking();
	bool IsCrouchAvailable_BP();
	bool IsCloaking();
	bool IsChargingBlink();
	bool IsChainsawSprinting();
	bool IsChainBlinking();
	bool IsCarrying();
	bool IsAttackOpening();
	bool IsASurvivorInTerrorRadius();
	bool IsAllowedToKill(class ACamperPlayer** camper);
	void IncrementInterruptBlock();
	bool HasKillerAbility(EKillerAbilities* killerAbility);
	class USlasherTREmitterComponent* GetTerrorRadiusEmitter();
	struct FDateTime GetStillnessStartTime();
	float GetStealthRatio();
	float GetStalkTierWalkSpeedMultiplier();
	float GetStalkTierCarrySpeedMultplier();
	int GetRageTier();
	struct FVector GetPlayerDropOffPoint();
	class ACamperPlayer* GetObsessionTarget();
	struct FRotator GetLookRotation();
	float GetLightIntensity();
	bool GetIsAttacking();
	class UChargeableComponent* GetInvisibilityBurnoutChargeableComponent();
	ESlasherGuidedAction GetGuidedAction();
	class UChaserCharacterComponent* GetChaserCharacterComponent();
	TArray<struct FName> GetCharacterCustomAnimTags();
	class ACamperPlayer* GetCarriedCamper();
	float GetBlindedPercent();
	float GetAnimDirection();
	void DisplayAttackZones(bool* Display);
	bool DetectObstruction(EDetectionZone* detectionZoneID, class UPhysicalMaterial** physicalMaterialOut, struct FVector* positionOut, struct FVector* normalOut);
	void DecrementInterruptBlock();
	void DBD_WalkLocked(bool* Lock);
	void DBD_SetAttackZones(EAttackZoneSet* attackZoneSet);
	void DBD_RemoveSnapWhenTargetFound(bool* enable);
	void DBD_ObstructedAttackHasPriority(bool* enable);
	void DBD_MergeLockOnDamageZones(bool* enable);
	void DBD_DisplayAttackZones(bool* Display);
	void DBD_AllowKilling();
	void Client_RequestStun(EStunType* stunType, class ADBDPlayer** stunner);
	bool CanSlashAttack_BP();
	bool CanPickupSurvivor();
	bool CanPerformKillerAbility(EKillerAbilities* killerAbility);
	bool CanGainRage();
	bool CanEscapeCarry(class ACamperPlayer** Player);
	bool CancelAttackByInput();
	bool CanAttack_BP();
	bool CanAttack();
	bool CanAffectLocalPlayer();
	void BroadcastOffensiveAction();
	void Authority_SetInStalkMode(bool* stalkMode, bool* Forced);
	void Authority_AllowKilling(int* numKills);
	void Authority_AddInvisibilityBurnoutCharge(class ADBDPlayer** blinder, float* charge, class AActor** effector);
	void AttackInputReleased();
	void AttackInputPressed();
	void ActionKillerReleased();
	void ActionKillerPressed();
};


// Class DeadByDaylight.SlasherStateMachine
// 0x0050 (0x01C0 - 0x0170)
class USlasherStateMachine : public UPlayerStateMachine
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0170(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SlasherStateMachine"));

		return ptr;
	}


	void Server_SetStateStack(TArray<uint16_t>* netStateIDStack);
	void NetIDStackChanged();
	void Multicast_SetStateStack(TArray<uint16_t>* netStateIDStack);
};


// Class DeadByDaylight.TerrorRadiusEmitterComponent
// 0x0010 (0x0280 - 0x0270)
class UTerrorRadiusEmitterComponent : public USceneComponent
{
public:
	bool                                               _imitatesAudioOnly;                                       // 0x0270(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               _generatesChaseMusic;                                     // 0x0271(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               _active;                                                  // 0x0272(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               _isFakeTerrorRadius;                                      // 0x0273(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0274(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TerrorRadiusEmitterComponent"));

		return ptr;
	}


	void SetTerrorRadius(float* Radius);
	void SetSimulatedFixedDistance(float* Distance);
	void SetIsActive(bool* Active);
	void SetImitatesAudioOnly(bool* imitatesAudioOnly);
	void SetGeneratesChaseMusic(bool* generatesChaseMusic);
	void RemoveEmitterFromList();
	bool IsInTerrorRadius(class UTerrorRadiusReceiverComponent** receiver);
	float GetSimulatedFixedDistance();
	float GetRadius();
	bool GetIsActive();
	bool GetImitatesAudioOnly();
	bool GetGeneratesChaseMusic();
};


// Class DeadByDaylight.SlasherTREmitterComponent
// 0x0060 (0x02E0 - 0x0280)
class USlasherTREmitterComponent : public UTerrorRadiusEmitterComponent
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0280(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SlasherTREmitterComponent"));

		return ptr;
	}


	void SetBaseTerrorRadius(float* baseTerrorRadius, bool* progressive);
};


// Class DeadByDaylight.SoftBanManager
// 0x0038 (0x0068 - 0x0030)
class USoftBanManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0030(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SoftBanManager"));

		return ptr;
	}

};


// Class DeadByDaylight.LoadAsyncBankData
// 0x0010 (0x0040 - 0x0030)
class ULoadAsyncBankData : public UObject
{
public:
	class UAkAudioBank*                                Bank;                                                     // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USoundBankLoader*                            SoundBankLoader;                                          // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.LoadAsyncBankData"));

		return ptr;
	}

};


// Class DeadByDaylight.SoundBankLoader
// 0x0048 (0x0078 - 0x0030)
class USoundBankLoader : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET
	TArray<class UAkAudioBank*>                        _audioBanks;                                              // 0x0058(0x0010) (ZeroConstructor, Transient)
	TArray<class ULoadAsyncBankData*>                  _asyncAudioBanksPendingLoadData;                          // 0x0068(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SoundBankLoader"));

		return ptr;
	}

};


// Class DeadByDaylight.SoundIndicatorUtilities
// 0x0000 (0x0030 - 0x0030)
class USoundIndicatorUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SoundIndicatorUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.SoundMarker
// 0x0018 (0x0358 - 0x0340)
class ASoundMarker : public AActor
{
public:
	EHudIndicatorIconType                              HudIndicatorIconType;                                     // 0x0340(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EHudOffscreenIndicatorType                         HudOffscreenIndicatorType;                                // 0x0341(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0342(0x0002) MISSED OFFSET
	struct FFloatRange                                 VisibleDistanceRange;                                     // 0x0344(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0354(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SoundMarker"));

		return ptr;
	}

};


// Class DeadByDaylight.SpawnElement
// 0x0000 (0x0030 - 0x0030)
class USpawnElement : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SpawnElement"));

		return ptr;
	}

};


// Class DeadByDaylight.SpecialEventCurrencyRewardDetailsScreen
// 0x0090 (0x0180 - 0x00F0)
class USpecialEventCurrencyRewardDetailsScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x00F0(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SpecialEventCurrencyRewardDetailsScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.SpecialEventManager
// 0x02B8 (0x02E8 - 0x0030)
class USpecialEventManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0030(0x0080) MISSED OFFSET
	class USpecialEventsContainer*                     _specialEventsContainer;                                  // 0x00B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x230];                                     // 0x00B8(0x0230) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SpecialEventManager"));

		return ptr;
	}


	ESpecialEventStatus STATIC_GetStatus(struct FCombinedSpecialEventData* SpecialEventData);
	bool STATIC_GetSpecialEvent(class UObject** WorldContextObject, struct FName* EventId, struct FCombinedSpecialEventData* outSpecialEventData);
	bool STATIC_GetCurrentSpecialEvent(class UObject** WorldContextObject, struct FCombinedSpecialEventData* outSpecialEventData);
};


// Class DeadByDaylight.SpecialEventsContainer
// 0x00F8 (0x0128 - 0x0030)
class USpecialEventsContainer : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0030(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SpecialEventsContainer"));

		return ptr;
	}

};


// Class DeadByDaylight.SpecialEventSpawnerComponent
// 0x0000 (0x0100 - 0x0100)
class USpecialEventSpawnerComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SpecialEventSpawnerComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.SplashScreen
// 0x0018 (0x0108 - 0x00F0)
class USplashScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00F0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SplashScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.SplashScreenScaleform
// 0x0000 (0x0108 - 0x0108)
class USplashScreenScaleform : public USplashScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SplashScreenScaleform"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.SplashScreenUMG
// 0x0008 (0x0110 - 0x0108)
class USplashScreenUMG : public USplashScreen
{
public:
	class UUMGSplashScreen*                            _splashScreen;                                            // 0x0108(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SplashScreenUMG"));

		return ptr;
	}


	void TriggerAnyKey();
};


// Class DeadByDaylight.StakeOutPerk
// 0x0018 (0x0368 - 0x0350)
class UStakeOutPerk : public UPerk
{
public:
	TArray<int>                                        MaxTokensByLevel;                                         // 0x0350(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              TokenChargeTime;                                          // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0364(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StakeOutPerk"));

		return ptr;
	}


	void Server_ConsumeToken();
	void Local_BroadcastConsumeToken();
};


// Class DeadByDaylight.StalkedComponent
// 0x0078 (0x0178 - 0x0100)
class UStalkedComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnBeingStalkedChanged;                                    // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              _maxStalkPoints;                                          // 0x0110(0x0004) (Edit, Net, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               _stalkableWhileSightingStalker;                           // 0x0114(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               _isBeingStalked;                                          // 0x0115(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0116(0x0002) MISSED OFFSET
	class UChargeableComponent*                        _stalkPointsChargeable;                                   // 0x0118(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x58];                                      // 0x0120(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StalkedComponent"));

		return ptr;
	}


	void OnRep_MaxStalkPoints();
	void OnRep_IsBeingStalked();
	void OnBeingStalkedChanged__DelegateSignature(bool* isBeingStalked);
	bool HasStalkPoints();
};


// Class DeadByDaylight.StalkerComponent
// 0x0078 (0x0178 - 0x0100)
class UStalkerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0100(0x0028) MISSED OFFSET
	bool                                               _distributeStalkRate;                                     // 0x0128(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               _canStalkWhileInChase;                                    // 0x0129(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x012A(0x0006) MISSED OFFSET
	TArray<class UStalkedComponent*>                   _playerStalkedComponents;                                 // 0x0130(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0140(0x0010) MISSED OFFSET
	class UChargeableComponent*                        _stalkPointsChargeable;                                   // 0x0150(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x20];                                      // 0x0158(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StalkerComponent"));

		return ptr;
	}


	void OnStalkPointsAdded__DelegateSignature(float* stalkPoints);
	void OnPlayerDisconnect(class ADBDPlayer** Player);
	void OnPlayerBeingStalkedChanged(bool* isBeingStalked);
	bool IsStalkingSomeone();
	bool HasMaxStalkPoints();
	float GetTotalStalkingPoints();
	float GetScoreMultiplier();
	float GetPercentStalkingPoints();
	float GetMaxStalkingPoints();
	bool CanStalk();
};


// Class DeadByDaylight.StandDisplayable
// 0x0000 (0x0030 - 0x0030)
class UStandDisplayable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StandDisplayable"));

		return ptr;
	}

};


// Class DeadByDaylight.StartScreenBase
// 0x0018 (0x0360 - 0x0348)
class AStartScreenBase : public ALevelScriptActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0348(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StartScreenBase"));

		return ptr;
	}


	void WorldOriginLocationChanged(struct FIntVector* OldOriginLocation, struct FIntVector* NewOriginLocation);
	void SetCinematicMode(bool* bCinematicMode, bool* bHidePlayer, bool* bAffectsHUD, bool* bAffectsMovement, bool* bAffectsTurning);
	bool RemoteEvent(struct FName* EventName);
	void LevelReset();
};


// Class DeadByDaylight.StateTagUtilities
// 0x0000 (0x0030 - 0x0030)
class UStateTagUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StateTagUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.StatusEffectCollectionComponent
// 0x0028 (0x0128 - 0x0100)
class UStatusEffectCollectionComponent : public UActorComponent
{
public:
	TArray<class UStatusEffect*>                       _array;                                                   // 0x0100(0x0010) (ExportObject, Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0110(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StatusEffectCollectionComponent"));

		return ptr;
	}


	void OnRep_Array(TArray<class UStatusEffect*>* oldArray);
};


// Class DeadByDaylight.StatusView
// 0x0070 (0x03B0 - 0x0340)
class AStatusView : public AActor
{
public:
	bool                                               IsActive;                                                 // 0x0340(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0341(0x0003) MISSED OFFSET
	int                                                Level;                                                    // 0x0344(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PercentageFill;                                           // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsClockwiseTimer;                                         // 0x034C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5B];                                      // 0x034D(0x005B) MISSED OFFSET
	class ADBDPlayer*                                  _localDBDPlayer;                                          // 0x03A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StatusView"));

		return ptr;
	}


	void ResetView(class ADBDPlayer** DBDPlayer);
	void FireNotification(struct FStatusViewSource* StatusViewSource);
};


// Class DeadByDaylight.StoreScreen
// 0x0200 (0x02F0 - 0x00F0)
class UStoreScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x200];                                     // 0x00F0(0x0200) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StoreScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.StoreScreenScaleform
// 0x0000 (0x02F0 - 0x02F0)
class UStoreScreenScaleform : public UStoreScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StoreScreenScaleform"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.StoreScreenUMG
// 0x0068 (0x0358 - 0x02F0)
class UStoreScreenUMG : public UStoreScreen
{
public:
	class UUMGCustomizationScreenWidget*               _customizationScreen;                                     // 0x02F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UUMGAtlantaStoreScreen*                      _storeScreen;                                             // 0x02F8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0300(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.StoreScreenUMG"));

		return ptr;
	}

};


// Class DeadByDaylight.SurveillancePerk
// 0x0008 (0x0358 - 0x0350)
class USurveillancePerk : public UPerk
{
public:
	float                                              generatorRegressionStopRevealTime;                        // 0x0350(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0354(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SurveillancePerk"));

		return ptr;
	}


	void HandleGeneratorIsDamagedChanged(class AGenerator** Generator, class ADBDPlayer** Player);
};


// Class DeadByDaylight.SurviveTimerScoreEventComponent
// 0x0030 (0x0130 - 0x0100)
class USurviveTimerScoreEventComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SurviveTimerScoreEventComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.SurvivorCollectableOutlineUpdateStrategy
// 0x0010 (0x0118 - 0x0108)
class USurvivorCollectableOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _outlineColor;                                            // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SurvivorCollectableOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.SurvivorDisconnectionComponent
// 0x0000 (0x0100 - 0x0100)
class USurvivorDisconnectionComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SurvivorDisconnectionComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.SurvivorInteractionAnalytics
// 0x0000 (0x0030 - 0x0030)
class USurvivorInteractionAnalytics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SurvivorInteractionAnalytics"));

		return ptr;
	}

};


// Class DeadByDaylight.SurvivorOutlineUpdateStrategy
// 0x0068 (0x0170 - 0x0108)
class USurvivorOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _inDangerColorForSurvivor;                                // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                _noRecoveryDyingColor;                                    // 0x0118(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                _fullRecoveryDyingColor;                                  // 0x0128(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                _saviourColorForSurvivor;                                 // 0x0138(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                _colorForKiller;                                          // 0x0148(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture*                                    _revealedGradient;                                        // 0x0158(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class UTexture*                                    _nonRevealedGradient;                                     // 0x0160(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               _trappedIconActive;                                       // 0x0168(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0169(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SurvivorOutlineUpdateStrategy"));

		return ptr;
	}


	void SetTrappedIconActive(bool* value);
	bool IsBlockingAuraReadingFromKiller(class ASlasherPlayer** Killer);
	bool STATIC_IsActivelyHidingAuraFromKiller(class ACamperPlayer** Subject, class ASlasherPlayer** witness);
	TArray<class UGameplayModifierContainer*> STATIC_GetEffectsProtectingFromKillerAuraReading(class ACamperPlayer** Subject, class ASlasherPlayer** Killer);
};


// Class DeadByDaylight.SurvivorPlagueEffect
// 0x00A0 (0x0360 - 0x02C0)
class USurvivorPlagueEffect : public UStatusEffect
{
public:
	float                                              _sicknessAmount;                                          // 0x02C0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              _sicknessCap;                                             // 0x02C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              _vomitSlowDuration;                                       // 0x02C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              _vomitSlowAmount;                                         // 0x02CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      _sicknessThresholds;                                      // 0x02D0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FString>                             _nonNauseatingInteractions;                               // 0x02E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x68];                                      // 0x02F0(0x0068) MISSED OFFSET
	bool                                               _debugMode;                                               // 0x0358(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0359(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.SurvivorPlagueEffect"));

		return ptr;
	}


	void Server_SetDebugMode(bool* enable);
	void RefreshSicknessGainValues();
	void OnSurvivorVomit_Aesthetic();
	void OnSurvivorBecomesInfected_Aesthetic();
	void OnSicknessCured_Aesthetic();
	void OnSicknessChanged_Aesthetic(float* newSickness);
	void OnMaxSicknessReached_Aesthetic();
	void Multicast_OnSurvivorVomit();
	void Multicast_OnSurvivorBecomesInfected();
	void Multicast_OnSicknessCured();
	void Multicast_OnSicknessChanged(float* newSickness);
	void Multicast_OnMaxSicknessReached();
	void Multicast_AddOnScreenDebugMessage(uint64_t* Key, float* Duration, struct FColor* DisplayColor, struct FString* debugMessage);
	bool IsInfected();
	bool IsDebugModeActive();
	bool HasMaxLevelSickness();
	TArray<float> GetSicknessThresholds();
	float GetSicknessPercentage();
	unsigned char GetSicknessLevel();
	float GetSicknessAmount();
	unsigned char GetMaxSicknessLevel();
	void Authority_ResetSickness(float* newSickness);
	void Authority_OnHitByVomitProjectile(float* sicknessToAdd);
	void Authority_OnHitBySuperVomitProjectile();
	void Authority_InfectInteractable(class AInteractable** Interactable);
	void Authority_AddSickness(float* sicknessToAdd);
};


// Class DeadByDaylight.TallyScreen
// 0x00D8 (0x01C8 - 0x00F0)
class UTallyScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0xD8];                                      // 0x00F0(0x00D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TallyScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.TallyScreenScaleform
// 0x0000 (0x01C8 - 0x01C8)
class UTallyScreenScaleform : public UTallyScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TallyScreenScaleform"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.TallyScreenUMG
// 0x0008 (0x01D0 - 0x01C8)
class UTallyScreenUMG : public UTallyScreen
{
public:
	class UUMGAtlantaTallyScreen*                      _atlTallyScreen;                                          // 0x01C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TallyScreenUMG"));

		return ptr;
	}

};


// Class DeadByDaylight.TerrorRadiusReceiverComponent
// 0x0068 (0x0168 - 0x0100)
class UTerrorRadiusReceiverComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnIsInTerrorRadiusChanged;                                // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCurveFloat*                                 _trVerticalDistanceFactor;                                // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _heartbeatMasterVolumeInterpolationSpeed;                 // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4C];                                      // 0x011C(0x004C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TerrorRadiusReceiverComponent"));

		return ptr;
	}


	bool IsInTerrorRadiusRange();
	bool IsInTerrorRadius();
};


// Class DeadByDaylight.TheGhostUtilities
// 0x0000 (0x0030 - 0x0030)
class UTheGhostUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TheGhostUtilities"));

		return ptr;
	}

};


// Class DeadByDaylight.TickInEditorSkeletalMesh
// 0x0000 (0x03C8 - 0x03C8)
class ATickInEditorSkeletalMesh : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TickInEditorSkeletalMesh"));

		return ptr;
	}


	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};


// Class DeadByDaylight.TileBank
// 0x00B0 (0x00E0 - 0x0030)
class UTileBank : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0030(0x00A0) MISSED OFFSET
	TArray<class ATile*>                               _allTileBlueprints;                                       // 0x00D0(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TileBank"));

		return ptr;
	}

};


// Class DeadByDaylight.TileMatrix
// 0x0040 (0x0070 - 0x0030)
class UTileMatrix : public UObject
{
public:
	TArray<struct FArrayOfATile>                       _matrix;                                                  // 0x0030(0x0010) (ZeroConstructor, Transient)
	TArray<class ATile*>                               _extraTiles;                                              // 0x0040(0x0010) (ZeroConstructor, Transient)
	TArray<struct FQuadrantInfo>                       _quadInfoArray;                                           // 0x0050(0x0010) (ZeroConstructor, Transient)
	TArray<struct FArrayOfInt32>                       _quadIndexMatrix;                                         // 0x0060(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TileMatrix"));

		return ptr;
	}

};


// Class DeadByDaylight.TileVisitedAnalyticsComponent
// 0x0050 (0x0150 - 0x0100)
class UTileVisitedAnalyticsComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0100(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TileVisitedAnalyticsComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.TimerGate
// 0x0010 (0x0368 - 0x0358)
class ATimerGate : public AGate
{
public:
	float                                              _currentTime;                                             // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x035C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TimerGate"));

		return ptr;
	}


	void Update(float* DeltaTime);
	void SetValues(float* TimerDuration, float* RushGain, float* RushBlockDuration);
	void Rushed(bool* success);
	void Reset();
	void RemoveTime(float* Time);
	void AddTime(float* Time);
};


// Class DeadByDaylight.TimerGateDecrease
// 0x0008 (0x0348 - 0x0340)
class ATimerGateDecrease : public AActor
{
public:
	class ATimerGate*                                  TimerGate;                                                // 0x0340(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TimerGateDecrease"));

		return ptr;
	}


	void Update(float* DeltaTime);
};


// Class DeadByDaylight.DBDTimeTravelManager
// 0x0068 (0x0098 - 0x0030)
class UDBDTimeTravelManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0030(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.DBDTimeTravelManager"));

		return ptr;
	}

};


// Class DeadByDaylight.ToastNotificationScreen
// 0x0048 (0x0138 - 0x00F0)
class UToastNotificationScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x00F0(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ToastNotificationScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ToastNotificationScreenScaleform
// 0x0000 (0x0138 - 0x0138)
class UToastNotificationScreenScaleform : public UToastNotificationScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ToastNotificationScreenScaleform"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.ToastNotificationScreenUMG
// 0x0008 (0x0140 - 0x0138)
class UToastNotificationScreenUMG : public UToastNotificationScreen
{
public:
	class UUMGToastNotificationScreen*                 _toastNotificationScreen;                                 // 0x0138(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ToastNotificationScreenUMG"));

		return ptr;
	}

};


// Class DeadByDaylight.ToolBoxInterface
// 0x0000 (0x0030 - 0x0030)
class UToolBoxInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ToolBoxInterface"));

		return ptr;
	}

};


// Class DeadByDaylight.Totem
// 0x0020 (0x03E8 - 0x03C8)
class ATotem : public AInteractable
{
public:
	struct FName                                       HexPerkID;                                                // 0x03C8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03C8(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	bool                                               IsCleansed;                                               // 0x03D4(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x13];                                      // 0x03D5(0x0013) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Totem"));

		return ptr;
	}


	void OnUnbound();
	void OnBoundToHex();
	bool HasHex();
};


// Class DeadByDaylight.TotemOutlineUpdateStrategy
// 0x0018 (0x0120 - 0x0108)
class UTotemOutlineUpdateStrategy : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                                _revealedColorToSurvivor;                                 // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveLinearColor*                           _revealedColorToKiller;                                   // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TotemOutlineUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.TournamentAccessKeyPopupScreen
// 0x0030 (0x0140 - 0x0110)
class UTournamentAccessKeyPopupScreen : public UGenericPopupScreen
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0110(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TournamentAccessKeyPopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.TournamentsScreen
// 0x00A8 (0x0198 - 0x00F0)
class UTournamentsScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x00F0(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TournamentsScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.TranslucentOutlineRenderStrategy
// 0x0010 (0x0050 - 0x0040)
class UTranslucentOutlineRenderStrategy : public UBaseOutlineRenderStrategy
{
public:
	TArray<class UMaterialInterface*>                  _replacementMaterials;                                    // 0x0040(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TranslucentOutlineRenderStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.TrapPlacementUpdateStrategy
// 0x0020 (0x0050 - 0x0030)
class UTrapPlacementUpdateStrategy : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TrapPlacementUpdateStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.AlwaysUseCurrentLocationPlacementStrategy
// 0x0000 (0x0050 - 0x0050)
class UAlwaysUseCurrentLocationPlacementStrategy : public UTrapPlacementUpdateStrategy
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AlwaysUseCurrentLocationPlacementStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.BufferLastValidLocationTrapPlacementStrategy
// 0x0008 (0x0058 - 0x0050)
class UBufferLastValidLocationTrapPlacementStrategy : public UTrapPlacementUpdateStrategy
{
public:
	float                                              _maxDistanceToOwner;                                      // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.BufferLastValidLocationTrapPlacementStrategy"));

		return ptr;
	}

};


// Class DeadByDaylight.TrapPlacerComponent
// 0x0040 (0x02B0 - 0x0270)
class UTrapPlacerComponent : public USceneComponent
{
public:
	struct FName                                       _socketName;                                              // 0x0270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0270(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              _indicatorOffsetY;                                        // 0x027C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _indicatorOffsetX;                                        // 0x0280(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       _itemTrapId;                                              // 0x0284(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0284(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	bool                                               _showIndicator;                                           // 0x0290(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               _stayActiveWhileItemInUse;                                // 0x0291(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xE];                                       // 0x0292(0x000E) MISSED OFFSET
	class UTrapPlacementUpdateStrategy*                _trapPlacementUpdateStrategy;                             // 0x02A0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, IsPlainOldData)
	class UTrapPlacementValidationStrategy*            _trapPlacementValidationStrategy;                         // 0x02A8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TrapPlacerComponent"));

		return ptr;
	}


	void SetTrapMesh(class UStaticMeshComponent** trapMesh);
	void SetIndicatorOffsetY(float* Y);
	void SetIndicatorOffsetX(float* X);
	bool IsPlacementValid();
	struct FRotator GetTrapPlacementRotation();
	struct FVector GetTrapPlacementLocation();
	void ActivateTrapPlacement(bool* Active);
};


// Class DeadByDaylight.TreatmentComponent
// 0x0030 (0x0130 - 0x0100)
class UTreatmentComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TreatmentComponent"));

		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetIsReplicated(bool* ShouldReplicate);
	void SetComponentTickInterval(float* TickInterval);
	void SetComponentTickEnabled(bool* bEnabled);
	void SetAutoActivate(bool* bNewAutoActivate);
	void SetActive(bool* bNewActive, bool* bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject** Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(struct FName* Tag);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void Activate(bool* bReset);
};


// Class DeadByDaylight.TREmitterFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UTREmitterFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TREmitterFunctionLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.TriggerableWorldObjectComponent
// 0x0098 (0x0198 - 0x0100)
class UTriggerableWorldObjectComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnTriggered;                                              // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTriggerReset;                                           // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              _triggerResetTime;                                        // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _randomChance;                                            // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              _rollFrequency;                                           // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x012C(0x000C) MISSED OFFSET
	TWeakObjectPtr<class UPrimitiveComponent>          _conditionalTriggerVolume;                                // 0x0138(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0140(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.TriggerableWorldObjectComponent._conditionalVolumeOverlappingPlayers
	TWeakObjectPtr<class UPrimitiveComponent>          _guaranteedTriggerVolume;                                 // 0x0190(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TriggerableWorldObjectComponent"));

		return ptr;
	}


	void SetGuaranteedTriggerVolume(class UPrimitiveComponent** Volume);
	void SetConditionalTriggerVolume(class UPrimitiveComponent** Volume);
	void Multicast_OnTriggerReset();
	void Multicast_OnTriggered(class AActor** Instigator, struct FVector* triggerLocation);
	void GetConditionalModifiers(class ADBDPlayer** Player, float* outAdditive, float* outMultiplicative);
	bool CanPlayerTriggerGuaranteed(class ADBDPlayer** Player);
	bool CanPlayerTriggerConditional(class ADBDPlayer** Player);
	void Authority_Trigger(class AActor** Instigator, struct FVector* triggerLocation);
	void Authority_ResetTrigger();
	void Authority_GuaranteedVolumeOverlap(class UPrimitiveComponent** OverlappedComponent, class AActor** Other, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* HitResult);
	void Authority_ConditionalVolumeEndOverlap(class UPrimitiveComponent** OverlappedComponent, class AActor** Other, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void Authority_ConditionalVolumeBeginOverlap(class UPrimitiveComponent** OverlappedComponent, class AActor** Other, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* HitResult);
};


// Class DeadByDaylight.TriplanarDecalComponent
// 0x0040 (0x02B0 - 0x0270)
class UTriplanarDecalComponent : public USceneComponent
{
public:
	float                                              MaskIntensity;                                            // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	class UTexture2D*                                  TopTexture;                                               // 0x0278(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  BottomTexture;                                            // 0x0280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  MaskTexture;                                              // 0x0288(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDetailMode>                           MinQualitySetting;                                        // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0291(0x0007) MISSED OFFSET
	class UDecalComponent*                             _triPlanarDecal;                                          // 0x0298(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UClass*                                      _triPlanarDecalClass;                                     // 0x02A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterial*                                   _decalMaterial;                                           // 0x02A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TriplanarDecalComponent"));

		return ptr;
	}


	void UpdateTriplanarDecal();
};


// Class DeadByDaylight.TutorialAssetLibrary
// 0x0010 (0x00C0 - 0x00B0)
class UTutorialAssetLibrary : public UAssetLibrary
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TutorialAssetLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.TutorialFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UTutorialFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TutorialFunctionLibrary"));

		return ptr;
	}

};


// Class DeadByDaylight.TutorialGameMode
// 0x0018 (0x0498 - 0x0480)
class ATutorialGameMode : public ADBDBaseMatchGameMode
{
public:
	class UTutorialObjectiveController*                _tutorialObjectiveController;                             // 0x0480(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTutorialNotificationController*             _tutorialNotificationController;                          // 0x0488(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTutorialHighlightController*                _tutorialHighlightController;                             // 0x0490(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TutorialGameMode"));

		return ptr;
	}


	void SetEscapeGenerators(TArray<class AGenerator*>* escapeGenerators, int* requiredActivationCount);
	void SetEscapeActivated();
	class UTutorialObjectiveController* GetTutorialObjectiveController();
	class UTutorialNotificationController* GetTutorialNotificationController();
	class UTutorialHighlightController* GetTutorialHighlightController();
};


// Class DeadByDaylight.TutorialGameState
// 0x0050 (0x0898 - 0x0848)
class ATutorialGameState : public ADBDGameState
{
public:
	struct FScriptMulticastDelegate                    OnCurrentTutorialStepChanged;                             // 0x0848(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0858(0x0002) MISSED OFFSET
	bool                                               _forceHatchVisible;                                       // 0x085A(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3D];                                      // 0x085B(0x003D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TutorialGameState"));

		return ptr;
	}


	void TutorialEndReached();
	void SetEscapeRequirementsVisibility(bool* IsVisible);
	void SetCurrentTutorialStep(ETutorialStep* Step);
	void OnCurrentTutorialStepChanged__DelegateSignature(ETutorialStep* Step);
	bool IsTutorialStarted();
	ETutorialStep GetCurrentTutorialStep();
	void CompleteLocallyControlledCharacterIntros();
};


// Class DeadByDaylight.TutorialHighlightController
// 0x0018 (0x0048 - 0x0030)
class UTutorialHighlightController : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TutorialHighlightController"));

		return ptr;
	}

};


// Class DeadByDaylight.TutorialNotificationController
// 0x0080 (0x00B0 - 0x0030)
class UTutorialNotificationController : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnBlockingNotificationDismissedEvent;                     // 0x0030(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x70];                                      // 0x0040(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TutorialNotificationController"));

		return ptr;
	}


	void ShowNotification(struct FName* tutorialNotificationId, float* Duration);
	void ShowBlockingNotification(struct FName* tutorialNotificationId);
	void OnBlockingNotificationDismissedEvent__DelegateSignature(struct FName* tutorialNotificationId);
	void OnBlockingNotificationDismissed();
	void HideNotification();
};


// Class DeadByDaylight.TutorialObjectiveController
// 0x00B0 (0x00E0 - 0x0030)
class UTutorialObjectiveController : public UObject
{
public:
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0030(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TutorialObjectiveController"));

		return ptr;
	}

};


// Class DeadByDaylight.TutorialPopupScreen
// 0x0000 (0x0110 - 0x0110)
class UTutorialPopupScreen : public UGenericPopupScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TutorialPopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.TutorialsUtilities
// 0x0018 (0x0358 - 0x0340)
class ATutorialsUtilities : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnTutorialUIReady;                                        // 0x0340(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0350(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TutorialsUtilities"));

		return ptr;
	}


	class ATutorialsUtilities* STATIC_GetTutorialsUtilities(class UObject** WorldContextObject);
	void STATIC_DestroyAI(class AAIController** AIController);
};


// Class DeadByDaylight.TwitchLinkAccountScreen
// 0x0030 (0x0120 - 0x00F0)
class UTwitchLinkAccountScreen : public UScreenBase
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00F0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.TwitchLinkAccountScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.AnimationWidget
// 0x0008 (0x0268 - 0x0260)
class UAnimationWidget : public UUserWidget
{
public:
	float                                              _playRate;                                                // 0x0260(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0264(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.AnimationWidget"));

		return ptr;
	}


	void SetPlayRate(float* Rate);
	float GetPlayRate();
};


// Class DeadByDaylight.UIController
// 0x0020 (0x0050 - 0x0030)
class UUIController : public UObject
{
public:
	class UGFxObject*                                  m_UIControllerObj;                                        // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UVirtualKeyboard*                            _virtualKeyboard;                                         // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBaseUserWidget*                             _atlantaLoadingWidget;                                    // 0x0040(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UIController"));

		return ptr;
	}

};


// Class DeadByDaylight.UIScreenshotTool
// 0x0290 (0x06C0 - 0x0430)
class AUIScreenshotTool : public ACharacterTool
{
public:
	class APostProcessVolume*                          PostProcessVolume;                                        // 0x0430(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FString                                     ScreenshotFolderPath;                                     // 0x0438(0x0010) (Edit, ZeroConstructor)
	int                                                ScreenshotResolution;                                     // 0x0448(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                IconResolution;                                           // 0x044C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayBeforeTakingScreenshot;                              // 0x0450(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoshopScriptWaitTimeout;                               // 0x0454(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	EScreenShotBatching                                Batching;                                                 // 0x0458(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	struct FName                                       CurrentPart;                                              // 0x045C(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0459(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	ECustomizationCategory                             CurrentPartCategory;                                      // 0x0468(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0469(0x0003) MISSED OFFSET
	struct FName                                       CurrentSetting;                                           // 0x046C(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0469(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	class ACameraActor*                                ScreenshotCamera;                                         // 0x0478(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UpdateCameraFromViewSettings;                             // 0x0480(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0481(0x0003) MISSED OFFSET
	struct FScreenshotViewSetting                      SurvivorHeadView;                                         // 0x0484(0x0028) (Edit)
	struct FScreenshotViewSetting                      SurvivorTorsoView;                                        // 0x04AC(0x0028) (Edit)
	struct FScreenshotViewSetting                      SurvivorLegsView;                                         // 0x04D4(0x0028) (Edit)
	struct FScreenshotViewSetting                      KillerHeadView;                                           // 0x04FC(0x0028) (Edit)
	struct FScreenshotViewSetting                      KillerBodyView;                                           // 0x0524(0x0028) (Edit)
	struct FScreenshotViewSetting                      KillerWeaponView;                                         // 0x054C(0x0028) (Edit)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0574(0x0004) MISSED OFFSET
	TArray<struct FGenderViewSetting>                  GenderViewOverrides;                                      // 0x0578(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCharacterItemCategoryViewSetting>   CharacterViewOverrides;                                   // 0x0588(0x0010) (Edit, ZeroConstructor)
	TArray<struct FItemViewSetting>                    ItemViewOverrides;                                        // 0x0598(0x0010) (Edit, ZeroConstructor)
	TArray<struct FRoleGenderViewSetting>              OutfitView;                                               // 0x05A8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCharacterViewSetting>               OutfitCharacterOverrides;                                 // 0x05B8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FRoleGenderViewSetting>              OutfitTwoPartsView;                                       // 0x05C8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FOutfitViewSetting>                  OutfitOverrides;                                          // 0x05D8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCharacterAnimation>                 AnimationOverrides;                                       // 0x05E8(0x0010) (Edit, ZeroConstructor)
	struct FScreenshotViewSetting                      CharmsView;                                               // 0x05F8(0x0028) (Edit)
	TArray<struct FCharmViewSetting>                   CharmOverrides;                                           // 0x0620(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData06[0x70];                                      // 0x0630(0x0070) MISSED OFFSET
	class AActor*                                      _spawnedCharm;                                            // 0x06A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FNamedButton                                ShowIconHelp;                                             // 0x06A8(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UIScreenshotTool"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGAlertsWidget
// 0x00C0 (0x03C0 - 0x0300)
class UUMGAlertsWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0300(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAlertsWidget.AtlantaScoreAlertComponentClass
	unsigned char                                      UnknownData01[0x30];                                      // 0x0330(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAlertsWidget.AtlantaStatusEffectAlertComponentClass
	class UCanvasPanel*                                CanvasPanelAlerts;                                        // 0x0360(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              IdleTime;                                                 // 0x0368(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x44];                                      // 0x036C(0x0044) MISSED OFFSET
	class UClass*                                      _scoreAlertClass;                                         // 0x03B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      _statusEffectAlertClass;                                  // 0x03B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAlertsWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGAtlantaCreditsPopup
// 0x0020 (0x0320 - 0x0300)
class UUMGAtlantaCreditsPopup : public UBaseUserWidget
{
public:
	class UUMGHtmlRichText*                            RichTitleText;                                            // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGHtmlRichText*                            RichContentText;                                          // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FString                                     _titleDefaultStyle;                                       // 0x0310(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAtlantaCreditsPopup"));

		return ptr;
	}


	void SetCreditTitle(struct FString* Title);
	void SetCreditContent(struct FString* Content);
};


// Class DeadByDaylight.UMGAtlantaFriendListScreen
// 0x02D0 (0x05D0 - 0x0300)
class UUMGAtlantaFriendListScreen : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0300(0x0050) MISSED OFFSET
	class UWidgetSwitcher*                             ListSwitcher;                                             // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             SearchResultSwitcher;                                     // 0x0358(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBaseFriendListElement*                   FriendSearchResult;                                       // 0x0360(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SearchFailureText;                                        // 0x0368(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBaseButtonWidget*                        CloseButton;                                              // 0x0370(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGFriendSearchBarWidget*                   SearchBar;                                                // 0x0378(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UHorizontalBox*                              ButtonTabContainer;                                       // 0x0380(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGFriendListTabWidget*                     FriendListTabWidget;                                      // 0x0388(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGSuggestionsListTabWidget*                SuggestionListTabWidget;                                  // 0x0390(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGRequestsListTabWidget*                   RequestListTabWidget;                                     // 0x0398(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBaseTabButtonWidget*                     FriendsTabButton;                                         // 0x03A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBaseTabButtonWidget*                     SuggestionsTabButton;                                     // 0x03A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBaseTabButtonWidget*                     RequestsTabButton;                                        // 0x03B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBaseFriendListContextualMenuWidget*      InviteToPartyWidget;                                      // 0x03B8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x03C0(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaFriendListScreen.FriendWidget
	unsigned char                                      UnknownData02[0x30];                                      // 0x03F0(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaFriendListScreen.RequestSentWidget
	unsigned char                                      UnknownData03[0x30];                                      // 0x0420(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaFriendListScreen.FriendRequestReceivedWidget
	unsigned char                                      UnknownData04[0x30];                                      // 0x0450(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaFriendListScreen.FriendsSuggestionWidget
	unsigned char                                      UnknownData05[0x30];                                      // 0x0480(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaFriendListScreen.FriendsSuggestion
	unsigned char                                      UnknownData06[0x30];                                      // 0x04B0(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaFriendListScreen.FriendPartyInviteWidgetClass
	unsigned char                                      UnknownData07[0x30];                                      // 0x04E0(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaFriendListScreen.ContextualMenuInvite
	unsigned char                                      UnknownData08[0x20];                                      // 0x0510(0x0020) MISSED OFFSET
	TMap<struct FName, struct FWidgetFriendData>       _existingFriendListWidgets;                               // 0x0530(0x0050) (ZeroConstructor)
	TMap<struct FName, class UUMGBaseFriendListElement*> _existingFriendInvitePartyWidget;                         // 0x0580(0x0050) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAtlantaFriendListScreen"));

		return ptr;
	}


	void HandleTabButtonClicked(unsigned char* tabIndex);
	void HandleSearchInputChanged(struct FText* inputText);
	void HandleSearchButtonClicked();
	void HandleOnActionOnFriendSearchResult(struct FActionOnFriend* actionOnFriendSearchResult);
	void HandleOnActionOnFriend(struct FActionOnFriend* ActionOnFriend);
	void HandleContextualMenuAction(EActionOnFriendType* action);
	void HandleCloseButtonClicked();
};


// Class DeadByDaylight.UMGGenericPopup
// 0x00E8 (0x03E8 - 0x0300)
class UUMGGenericPopup : public UBaseUserWidget
{
public:
	class URichTextBlock*                              Title;                                                    // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class URichTextBlock*                              Message;                                                  // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      TitleBackground;                                          // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      TitleSmoke;                                               // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGPopupButton*                             RegressionPopupButton;                                    // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGPopupButton*                             AlternativePopupButton;                                   // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGPopupButton*                             ProgressionPopupButton;                                   // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FSlateColor                                 ErrorTitleSmokeColor;                                     // 0x0338(0x0028) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                                 ErrorTitleBackgroundColor;                                // 0x0360(0x0028) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                                 DefaultTitleSmokeColor;                                   // 0x0388(0x0028) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                                 DefaultTitleBackgroundColor;                              // 0x03B0(0x0028) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03D8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGGenericPopup"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGAtlantaLevelUpPopup
// 0x0000 (0x03E8 - 0x03E8)
class UUMGAtlantaLevelUpPopup : public UUMGGenericPopup
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAtlantaLevelUpPopup"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGAtlantaNavigationScreen
// 0x0060 (0x0360 - 0x0300)
class UUMGAtlantaNavigationScreen : public UBaseUserWidget
{
public:
	class UUMGBankAndPlayerInfoWidget*                 BankAndPlayerInfoWidget;                                  // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextButtonStart;                                          // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	ESlateVisibility                                   PlayModeSelectionVisibility;                              // 0x0310(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   CharacterInfoVisibility;                                  // 0x0311(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   BackButtonVisibility;                                     // 0x0312(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   MenuButtonsVisibility;                                    // 0x0313(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   ButtonRoleVisibility;                                     // 0x0314(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0315(0x0003) MISSED OFFSET
	class UButton*                                     ButtonRole;                                               // 0x0318(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             BottomRightWidgetSwitcher;                                // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGPartySlotsWidget*                        PartyPlayerSlots;                                         // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBaseCountdownWidget*                     PartyCountdownLarge;                                      // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FPartyMemberUIData>                  _partyMembers;                                            // 0x0338(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0348(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAtlantaNavigationScreen"));

		return ptr;
	}


	TArray<struct FPartyMemberUIData> GetPartyMembersData(int* Index);
	void ButtonClickEvent(ENavigationScreenButton* buttonID);
};


// Class DeadByDaylight.UMGAltantaRitual
// 0x0058 (0x0358 - 0x0300)
class UUMGAltantaRitual : public UBaseUserWidget
{
public:
	struct FText                                       _claimText;                                               // 0x0300(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _claimedText;                                             // 0x0318(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _completedText;                                           // 0x0330(0x0018) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0348(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAltantaRitual"));

		return ptr;
	}


	void SetData(struct FAtlantaRitualUIData* ritual);
	void BroadcastOnClaimRewardsButtonPressed(int* ritualId);
};


// Class DeadByDaylight.UMGAtlantaRitualsScreen
// 0x00F0 (0x03F0 - 0x0300)
class UUMGAtlantaRitualsScreen : public UBaseUserWidget
{
public:
	class UUMGAtlantaRitualTab*                        DailyTab;                                                 // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGAtlantaRitualTab*                        WeeklyTab;                                                // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FText                                       _atlantaRitualTitle;                                      // 0x0310(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _endInLabel;                                              // 0x0328(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _dailyButtonLabel;                                        // 0x0340(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _weeklyButtonLabel;                                       // 0x0358(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _dailyRemainingTime;                                      // 0x0370(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _weeklyRemainingTime;                                     // 0x0388(0x0018) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x50];                                      // 0x03A0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAtlantaRitualsScreen"));

		return ptr;
	}


	void SetNewRitualNumbers(int* newDailyRitualNumber, int* newWeeklyRitualNumber);
	void BroadcastOnClaimRewardButtonPressed(int* ritualId);
	void BroadcastOnBackButtonPressed();
};


// Class DeadByDaylight.UMGAtlantaRitualTab
// 0x0048 (0x0348 - 0x0300)
class UUMGAtlantaRitualTab : public UBaseUserWidget
{
public:
	class UVerticalBox*                                ContainerBox;                                             // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0308(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaRitualTab._itemWidgetClass
	unsigned char                                      UnknownData01[0x10];                                      // 0x0338(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAtlantaRitualTab"));

		return ptr;
	}


	void BroadcastOnClaimRewardsButtonPressed(int* ritualId);
};


// Class DeadByDaylight.UMGAtlantaSettingScreen
// 0x0200 (0x0500 - 0x0300)
class UUMGAtlantaSettingScreen : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0300(0x00B0) MISSED OFFSET
	class UWidgetSwitcher*                             SettingContextSwitcher;                                   // 0x03B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UHorizontalBox*                              SettingTabBox;                                            // 0x03B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UHorizontalBox*                              AlwaysDisplayButtonBox;                                   // 0x03C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x03C8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaSettingScreen._settingTabButtonClass
	unsigned char                                      UnknownData02[0x30];                                      // 0x03F8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaSettingScreen._settingAlwaysDisplayButtonClass
	unsigned char                                      UnknownData03[0x30];                                      // 0x0428(0x0030) UNKNOWN PROPERTY: SoftObjectProperty DeadByDaylight.UMGAtlantaSettingScreen._buttonBoxDividerAsset
	unsigned char                                      UnknownData04[0x50];                                      // 0x0458(0x0050) UNKNOWN PROPERTY: MapProperty DeadByDaylight.UMGAtlantaSettingScreen._overlayContextWidgetMap
	unsigned char                                      UnknownData05[0x58];                                      // 0x04A8(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAtlantaSettingScreen"));

		return ptr;
	}


	void ShowCreditsOrConsentsPopup(struct FString* Title, struct FString* Content);
	void SetRightTopTextInfo(struct FText* Title, struct FString* Content, ESlateVisibility* textVisibility);
	void HandleSurvivorCameraSensitivityChanged(int* value);
	void HandleSettingTabClick(int* tabIndex);
	void HandleLeaveButtonClick();
	void HandleLanguageButtonClick(int* Index);
	void HandleKillerCameraSensitivityChanged(int* value);
	void HandleInvertYToggleClick(bool* toggleValue);
	void HandleInteractionButtonToggleClick(int* Index);
	void HandleHandSideToggleClick(int* Index);
	void HandleContextButtonClickEvent(int* Index);
	void HandleAlwaysDisplayButtonClick(int* tabIndex);
	void HandleAimAssistToggleClick(bool* toggleValue);
};


// Class DeadByDaylight.UMGAtlantaStoreScreen
// 0x0038 (0x0338 - 0x0300)
class UUMGAtlantaStoreScreen : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0300(0x0020) MISSED OFFSET
	class UScaleBox*                                   AuricCellsWidget;                                         // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUniformGridPanel*                           AuricCellsGridPanel;                                      // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0330(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAtlantaStoreScreen"));

		return ptr;
	}


	void SetBank(ECurrencyType* CurrencyType, int* Bank);
	void HandleOnStoreLeft();
	void HandleOnClickedBuyAuricCell(int* cellIndex);
};


// Class DeadByDaylight.UMGAtlantaTallyScreen
// 0x01C8 (0x04C8 - 0x0300)
class UUMGAtlantaTallyScreen : public UBaseUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnTallyLeft;                                              // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTallySpectateClicked;                                   // 0x0310(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTallyAddFriendEvent;                                    // 0x0320(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTallyReportEvent;                                       // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UUMGTallyListWidget*                         TallyScrollWidget;                                        // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0348(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaTallyScreen.TallyScoreboardClass
	unsigned char                                      UnknownData01[0x30];                                      // 0x0378(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaTallyScreen.TallyBloodpointsClass
	unsigned char                                      UnknownData02[0x30];                                      // 0x03A8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaTallyScreen.TallyRankClass
	unsigned char                                      UnknownData03[0x30];                                      // 0x03D8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaTallyScreen.TallyPlayerLevelClass
	unsigned char                                      UnknownData04[0x30];                                      // 0x0408(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGAtlantaTallyScreen.TallyCharacterProgressionClass
	struct FText                                       TextLeaveLobby;                                           // 0x0438(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       SpectateButtonText;                                       // 0x0450(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	EPlayerRole                                        PlayerRole;                                               // 0x0468(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EGameType                                          GameType;                                                 // 0x0469(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x046A(0x0002) MISSED OFFSET
	int                                                PlayerStatus;                                             // 0x046C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               FromSpectateMode;                                         // 0x0470(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	class UUMGTallyScoreboardWidget*                   _scoreboardWidget;                                        // 0x0478(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UUMGTallyBloodpointsWidget*                  _bloodpointsWidget;                                       // 0x0480(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UUMGTallyRankWidget*                         _rankWidget;                                              // 0x0488(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UUMGTallyPlayerLevelWidget*                  _playerLevelWidget;                                       // 0x0490(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UUMGTallyCharacterProgressionWidget*         _characterLevelWidget;                                    // 0x0498(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData07[0x28];                                      // 0x04A0(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAtlantaTallyScreen"));

		return ptr;
	}


	void ShowSpectateButton(bool* show);
	void SetScrollPageSize(struct FGeometry* MyGeometry);
	void HandleTallySpectateClicked();
	void HandleTallyLeave();
	void HandleReportEvent(struct FString* playerID);
	void HandleAddFriendEvent(struct FString* playerID);
};


// Class DeadByDaylight.UMGAtlantaTutorialScreen
// 0x0000 (0x0300 - 0x0300)
class UUMGAtlantaTutorialScreen : public UBaseUserWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGAtlantaTutorialScreen"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.UMGBankAndPlayerInfoWidget
// 0x0030 (0x0330 - 0x0300)
class UUMGBankAndPlayerInfoWidget : public UBaseUserWidget
{
public:
	class UUMGLevelBannerWidget*                       LevelBanner;                                              // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGCharacterPrestigeButton*                 PrestigeButton;                                           // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0310(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBankAndPlayerInfoWidget"));

		return ptr;
	}


	void SetPlayerLevel(int* Level, int* Prestige, int* currentLevelXp, int* totalLevelXp, bool* IsSlasher, bool* playUpdateAnim);
	void SetPlayerInfo(struct FPlayerInfoData* PlayerInfoData);
	void SetCharacterInfoVisibility(ESlateVisibility* newVisibility);
	void SetBank(ECurrencyType* CurrencyType, int* Bank);
	void OnTooltipTriggeredByLevelBannerWidget(struct FTooltipPressedData* TooltipPressedData);
	void OnPrestigeButtonClicked();
};


// Class DeadByDaylight.UMGBaseAlertWidget
// 0x0030 (0x0290 - 0x0260)
class UUMGBaseAlertWidget : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0260(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBaseAlertWidget"));

		return ptr;
	}


	void UnregisterInputComponent();
	void UnbindFromAnimationStarted(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void UnbindFromAnimationFinished(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void UnbindAllFromAnimationStarted(class UWidgetAnimation** Animation);
	void UnbindAllFromAnimationFinished(class UWidgetAnimation** Animation);
	void Tick(struct FGeometry* MyGeometry, float* InDeltaTime);
	void StopListeningForInputAction(struct FName* ActionName, TEnumAsByte<EInputEvent>* EventType);
	void StopListeningForAllInputActions();
	void StopAnimationsAndLatentActions();
	void StopAnimation(class UWidgetAnimation** InAnimation);
	void StopAllAnimations();
	void SetPositionInViewport(struct FVector2D* Position, bool* bRemoveDPIScale);
	void SetPlaybackSpeed(class UWidgetAnimation** InAnimation, float* PlaybackSpeed);
	void SetPadding(struct FMargin* InPadding);
	void SetOwningPlayer(class APlayerController** LocalPlayerController);
	void SetNumLoopsToPlay(class UWidgetAnimation** InAnimation, int* NumLoopsToPlay);
	void SetInputActionPriority(int* NewPriority);
	void SetInputActionBlocking(bool* bShouldBlock);
	void SetForegroundColor(struct FSlateColor* InForegroundColor);
	void SetDesiredSizeInViewport(struct FVector2D* Size);
	void SetColorAndOpacity(struct FLinearColor* InColorAndOpacity);
	void SetAnchorsInViewport(struct FAnchors* Anchors);
	void SetAlignmentInViewport(struct FVector2D* Alignment);
	void ReverseAnimation(class UWidgetAnimation** InAnimation);
	void RemoveFromViewport();
	void RegisterInputComponent();
	void PreConstruct(bool* IsDesignTime);
	void PlaySound(class USoundBase** SoundToPlay);
	class UUMGSequencePlayer* PlayAnimationTimeRange(class UWidgetAnimation** InAnimation, float* StartAtTime, float* EndAtTime, int* NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode>* PlayMode, float* PlaybackSpeed);
	class UUMGSequencePlayer* PlayAnimationReverse(class UWidgetAnimation** InAnimation, float* PlaybackSpeed);
	class UUMGSequencePlayer* PlayAnimationForward(class UWidgetAnimation** InAnimation, float* PlaybackSpeed);
	class UUMGSequencePlayer* PlayAnimation(class UWidgetAnimation** InAnimation, float* StartAtTime, int* NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode>* PlayMode, float* PlaybackSpeed);
	float PauseAnimation(class UWidgetAnimation** InAnimation);
	struct FEventReply OnTouchStarted(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	struct FEventReply OnTouchMoved(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	struct FEventReply OnTouchGesture(struct FGeometry* MyGeometry, struct FPointerEvent* GestureEvent);
	struct FEventReply OnTouchForceChanged(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	struct FEventReply OnTouchEnded(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	void OnRemovedFromFocusPath(struct FFocusEvent* InFocusEvent);
	struct FEventReply OnPreviewMouseButtonDown(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnPreviewKeyDown(struct FGeometry* MyGeometry, struct FKeyEvent* InKeyEvent);
	void OnPaint(struct FPaintContext* Context);
	struct FEventReply OnMouseWheel(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnMouseMove(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	void OnMouseLeave(struct FPointerEvent* MouseEvent);
	void OnMouseEnter(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	void OnMouseCaptureLost();
	struct FEventReply OnMouseButtonUp(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnMouseButtonDown(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnMouseButtonDoubleClick(struct FGeometry* InMyGeometry, struct FPointerEvent* InMouseEvent);
	struct FEventReply OnMotionDetected(struct FGeometry* MyGeometry, struct FMotionEvent* InMotionEvent);
	struct FEventReply OnKeyUp(struct FGeometry* MyGeometry, struct FKeyEvent* InKeyEvent);
	struct FEventReply OnKeyDown(struct FGeometry* MyGeometry, struct FKeyEvent* InKeyEvent);
	struct FEventReply OnKeyChar(struct FGeometry* MyGeometry, struct FCharacterEvent* InCharacterEvent);
	void OnInitialized();
	struct FEventReply OnFocusReceived(struct FGeometry* MyGeometry, struct FFocusEvent* InFocusEvent);
	void OnFocusLost(struct FFocusEvent* InFocusEvent);
	bool OnDrop(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	bool OnDragOver(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragLeave(struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragEnter(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragDetected(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragCancelled(struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnAnimationStarted(class UWidgetAnimation** Animation);
	void OnAnimationFinished(class UWidgetAnimation** Animation);
	struct FEventReply OnAnalogValueChanged(struct FGeometry* MyGeometry, struct FAnalogInputEvent* InAnalogInputEvent);
	void OnAddedToFocusPath(struct FFocusEvent* InFocusEvent);
	void ListenForInputAction(struct FName* ActionName, TEnumAsByte<EInputEvent>* EventType, bool* bConsume, struct FScriptDelegate* callback);
	bool IsPlayingAnimation();
	bool IsListeningForInputAction(struct FName* ActionName);
	bool IsInViewport();
	bool IsInteractable();
	bool IsAnyAnimationPlaying();
	bool IsAnimationPlayingForward(class UWidgetAnimation** InAnimation);
	bool IsAnimationPlaying(class UWidgetAnimation** InAnimation);
	class APawn* GetOwningPlayerPawn();
	bool GetIsVisible();
	float GetAnimationCurrentTime(class UWidgetAnimation** InAnimation);
	struct FAnchors GetAnchorsInViewport();
	struct FVector2D GetAlignmentInViewport();
	void Destruct();
	void Construct();
	void CancelLatentActions();
	void BindToAnimationStarted(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void BindToAnimationFinished(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void BindToAnimationEvent(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate, EWidgetAnimationEvent* AnimationEvent, struct FName* UserTag);
	void AddToViewport(int* ZOrder);
	bool AddToPlayerScreen(int* ZOrder);
};


// Class DeadByDaylight.UMGBaseButtonWidget
// 0x00D0 (0x03D0 - 0x0300)
class UUMGBaseButtonWidget : public UBaseUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnBaseButtonClickedEvent;                                 // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UButton*                                     Button;                                                   // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      IconPicture;                                              // 0x0318(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ButtonLabel;                                              // 0x0320(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FSlateBrush                                 ButtonPictureBrush;                                       // 0x0328(0x0090) (Edit, DisableEditOnTemplate)
	struct FText                                       ButtonText;                                               // 0x03B8(0x0018) (Edit, DisableEditOnTemplate)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBaseButtonWidget"));

		return ptr;
	}


	void OnBaseButtonClicked__DelegateSignature();
	void HandleButtonClickedEvent();
};


// Class DeadByDaylight.UMGBaseCountdownWidget
// 0x0068 (0x0368 - 0x0300)
class UUMGBaseCountdownWidget : public UBaseUserWidget
{
public:
	class UTextBlock*                                  TimerTextBlock;                                           // 0x0300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                _timerThreshold;                                          // 0x0308(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x030C(0x0004) MISSED OFFSET
	struct FSlateColor                                 _timerColorBelowThreshold;                                // 0x0310(0x0028) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 _timerColorBeyondThreshold;                               // 0x0338(0x0028) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0360(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBaseCountdownWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGBaseFriendListContextualMenuWidget
// 0x0018 (0x0318 - 0x0300)
class UUMGBaseFriendListContextualMenuWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0300(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBaseFriendListContextualMenuWidget"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.UMGBaseFriendListElement
// 0x0050 (0x0350 - 0x0300)
class UUMGBaseFriendListElement : public UBaseUserWidget
{
public:
	class UImage*                                      StatusPicture;                                            // 0x0300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  FriendName;                                               // 0x0308(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  FriendStatus;                                             // 0x0310(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                SelectionHighlight;                                       // 0x0318(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     ItemSelectionButton;                                      // 0x0320(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UNamedSlot*                                  ContextualMenuPosition;                                   // 0x0328(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FAtlantaFriendUIData                        _cachedFriendData;                                        // 0x0330(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0331(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBaseFriendListElement"));

		return ptr;
	}


	void TriggerActionOnThisFriend(EActionOnFriendType* ActionType);
};


// Class DeadByDaylight.UMGBaseTabButtonWidget
// 0x0068 (0x0368 - 0x0300)
class UUMGBaseTabButtonWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0300(0x0018) MISSED OFFSET
	class UButton*                                     Button;                                                   // 0x0318(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TabLabel;                                                 // 0x0320(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  NotificationCountText;                                    // 0x0328(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                NotificationPanel;                                        // 0x0330(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      TabButtonSelected;                                        // 0x0338(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      tabIndex;                                                 // 0x0340(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0341(0x0007) MISSED OFFSET
	struct FText                                       TitleOfTab;                                               // 0x0348(0x0018) (Edit, DisableEditOnTemplate)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0360(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBaseTabButtonWidget"));

		return ptr;
	}


	void HandleButtonClickedEvent();
};


// Class DeadByDaylight.UMGBaseTabListWidget
// 0x0000 (0x0300 - 0x0300)
class UUMGBaseTabListWidget : public UBaseUserWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBaseTabListWidget"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.UMGBaseToastWidget
// 0x0068 (0x0368 - 0x0300)
class UUMGBaseToastWidget : public UBaseUserWidget
{
public:
	class UImage*                                      ToastIcon;                                                // 0x0300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ToastText;                                                // 0x0308(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UProgressBar*                                TimeToastProgression;                                     // 0x0310(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0318(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBaseToastWidget"));

		return ptr;
	}


	void TriggerToastInput(int* inputCode);
	void OnTimerFinished();
};


// Class DeadByDaylight.UMGBloodStoreArrayWidget
// 0x0070 (0x0370 - 0x0300)
class UUMGBloodStoreArrayWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET
	class UUMGBloodStoreRowWidget*                     FirstBloodStoreRowWidget;                                 // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBloodStoreRowWidget*                     SecondBloodStoreRowWidget;                                // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBloodStoreRowWidget*                     ThirdBloodStoreRowWidget;                                 // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBloodStoreRowWidget*                     FourthBloodStoreRowWidget;                                // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBloodStoreRowWidget*                     FifthBloodStoreRowWidget;                                 // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0338(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBloodStoreArrayWidget"));

		return ptr;
	}


	void BroadcastBloodNodeSelected(struct FString* ID);
};


// Class DeadByDaylight.UMGBloodStoreItemPreviewWidget
// 0x0108 (0x0408 - 0x0300)
class UUMGBloodStoreItemPreviewWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0300(0x0030) MISSED OFFSET
	struct FText                                       _itemName;                                                // 0x0330(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _itemDescription;                                         // 0x0348(0x0018) (BlueprintVisible, BlueprintReadOnly)
	int                                                _itemPrice;                                               // 0x0360(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0364(0x0004) MISSED OFFSET
	struct FText                                       _refreshPrice;                                            // 0x0368(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _nodeStatusText;                                          // 0x0380(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _refreshTitle;                                            // 0x0398(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _itemSelectionTitle;                                      // 0x03B0(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _itemSelectionText;                                       // 0x03C8(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _purchaseTitle;                                           // 0x03E0(0x0018) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x10];                                      // 0x03F8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBloodStoreItemPreviewWidget"));

		return ptr;
	}


	void UnselectItem();
	void ShowRefreshButton(bool* ShowRefreshButton, bool* isRefreshFree);
	void ShowPurchaseButton(bool* ShowPurchaseButton);
	void DisplayItem(bool* isItemPurchaseable, bool* isItemAffordable);
	void BroadcastUnselectPressed();
	void BroadcastRefreshPressed();
	void BroadcastPurchasePressed();
};


// Class DeadByDaylight.UMGBloodStoreItemWidget
// 0x0080 (0x0380 - 0x0300)
class UUMGBloodStoreItemWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET
	class UImage*                                      NodeImage;                                                // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      BackgroundImage;                                          // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      RarityBackground;                                         // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ItemPanel;                                                // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                MysteryBoxPanel;                                          // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      MysteryBoxRarityBackground;                               // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                CollectedPanel;                                           // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ConsumedPanel;                                            // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	EBloodwebNodeContentType                           _contentType;                                             // 0x0350(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               _isMysteryBox;                                            // 0x0351(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0352(0x0002) MISSED OFFSET
	struct FVector2D                                   _bigItemScale;                                            // 0x0354(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   _normalItemScale;                                         // 0x035C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              _consumedOpacity;                                         // 0x0364(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0368(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBloodStoreItemWidget"));

		return ptr;
	}


	void UnFocusNode();
	void SetSelectedVisibilities(bool* isSelected);
	void SetBackgroundImages();
	void PlayConsumedAnimation(bool* skipIntro);
	void FocusNode();
	void ConsumeNode();
	void CollectNode();
	void BroadcastBloodNodeSelected();
};


// Class DeadByDaylight.UMGBloodStoreMysteryBoxPopup
// 0x0078 (0x0460 - 0x03E8)
class UUMGBloodStoreMysteryBoxPopup : public UUMGGenericPopup
{
public:
	class UUMGBloodStoreItemWidget*                    MysteryItem;                                              // 0x03E8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FText                                       _itemDisplayName;                                         // 0x03F0(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _itemRarityName;                                          // 0x0408(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FSlateColor                                 _itemRarityColor;                                         // 0x0420(0x0028) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _addedToInventory;                                        // 0x0448(0x0018) (BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBloodStoreMysteryBoxPopup"));

		return ptr;
	}


	void StartRevealSequence();
};


// Class DeadByDaylight.UMGBloodStoreRowWidget
// 0x0098 (0x0398 - 0x0300)
class UUMGBloodStoreRowWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET
	class UHorizontalBox*                              ItemContainer;                                            // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                LockStatusPanel;                                          // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                HardLockedStatusPanel;                                    // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                _purchasedItemsNbr;                                       // 0x0328(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                _requiredItemNbr;                                         // 0x032C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EBloodStoreRowStyle                                _rowStyle;                                                // 0x0330(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0331(0x0003) MISSED OFFSET
	struct FMargin                                     _itemPadding;                                             // 0x0334(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0344(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData03[0x30];                                      // 0x0344(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGBloodStoreRowWidget._itemWidgetClass
	unsigned char                                      UnknownData04[0x20];                                      // 0x0378(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBloodStoreRowWidget"));

		return ptr;
	}


	void UnlockRow(bool* PlayAnim);
	void LockRow(bool* PlayAnim);
	void BroadcastUnlockAnimationFinished();
	void BroadcastBloodNodeSelected(struct FString* ID);
};


// Class DeadByDaylight.UMGBloodStoreSubMenu
// 0x0030 (0x0330 - 0x0300)
class UUMGBloodStoreSubMenu : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0300(0x0020) MISSED OFFSET
	class UUMGBloodStoreTimer*                         SurvivorTimer;                                            // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBloodStoreTimer*                         KillerTimer;                                              // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBloodStoreSubMenu"));

		return ptr;
	}


	void SetFaction(bool* IsKiller);
	void BroadcastExpiredBloodWeb();
	void BroadcastCharacterRoleButtonClicked();
};


// Class DeadByDaylight.UMGBloodStoreTimer
// 0x0088 (0x0388 - 0x0300)
class UUMGBloodStoreTimer : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET
	struct FSlateColor                                 _normalColor;                                             // 0x0310(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSlateColor                                 _warningColor;                                            // 0x0338(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UTextBlock*                                  RemainingTimeTextBlock;                                   // 0x0360(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      RefreshImage;                                             // 0x0368(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0370(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBloodStoreTimer"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGBloodStoreWidget
// 0x00C0 (0x03C0 - 0x0300)
class UUMGBloodStoreWidget : public UBaseUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnBloodNodeSelected;                                      // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBloodNodePurchase;                                      // 0x0310(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBloodStoreRegenerate;                                   // 0x0320(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterRoleButtonClicked;                             // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UUMGBloodStoreArrayWidget*                   BloodStoreArrayWidget;                                    // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBloodStoreItemPreviewWidget*             ItemPreviewWidget;                                        // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBloodStoreSubMenu*                       BloodStoreSubMenuWidget;                                  // 0x0350(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FText                                       _bloodStoreTitle;                                         // 0x0358(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _killersTitle;                                            // 0x0370(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _survivorsTitle;                                          // 0x0388(0x0018) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x20];                                      // 0x03A0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGBloodStoreWidget"));

		return ptr;
	}


	void UnselectNode();
	void SwitchRole();
	void SetSelectedNode(struct FString* selectedId);
	void SetFaction(bool* IsKiller);
	void RegenerateBloodStore();
	void PurchaseSelectedNode();
};


// Class DeadByDaylight.UMGCharacterButton
// 0x0158 (0x0458 - 0x0300)
class UUMGCharacterButton : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET
	class UImage*                                      PortraitIcon;                                             // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                CharacterSelectedPanel;                                   // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0320(0x0008) MISSED OFFSET
	class UCanvasPanel*                                LevelPanel;                                               // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CharacterLevelText;                                       // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  OwnedCustomizationText;                                   // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TotalCustomizationText;                                   // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                PricePanel;                                               // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGCharacterPrice*                          CellPrice;                                                // 0x0350(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGCharacterPrice*                          ShardPrice;                                               // 0x0358(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FCharacterSlotData                          CharacterSlotData;                                        // 0x0360(0x00F8) (BlueprintVisible, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCharacterButton"));

		return ptr;
	}


	void SetIsSelected(bool* isSelected);
	void SetCharacterData(struct FCharacterSlotData* CharacterData);
	void BroadcastClickedEvent(int* CharacterIndex);
};


// Class DeadByDaylight.UMGCharacterInfoWidget
// 0x0110 (0x0410 - 0x0300)
class UUMGCharacterInfoWidget : public UBaseUserWidget
{
public:
	class UScrollBox*                                  CharacterInfoScrollBox;                                   // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGCharacterScrollingInfoWidget*            CharacterScrollingInfoWidget;                             // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                CharacterDLCPanel;                                        // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FString                                     _characterNameText;                                       // 0x0318(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FText                                       _characterDifficultyText;                                 // 0x0328(0x0018) (Edit, BlueprintVisible, NoClear)
	struct FString                                     _characterDLCText;                                        // 0x0340(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               _isKiller;                                                // 0x0350(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0351(0x0007) MISSED OFFSET
	struct FSlateColor                                 _easyColor;                                               // 0x0358(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSlateColor                                 _intermediaryColor;                                       // 0x0380(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSlateColor                                 _hardColor;                                               // 0x03A8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSlateColor                                 _currentColor;                                            // 0x03D0(0x0028) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _characterDLCTitle;                                       // 0x03F8(0x0018) (Edit, BlueprintVisible, NoClear)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCharacterInfoWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGPageScrollWidget
// 0x00C0 (0x03C0 - 0x0300)
class UUMGPageScrollWidget : public UBaseUserWidget
{
public:
	float                                              ItemWidth;                                                // 0x0300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ItemHeight;                                               // 0x0304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                RowCount;                                                 // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ColumnCount;                                              // 0x030C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ItemGapDistance;                                          // 0x0310(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TotalPageCount;                                           // 0x0314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ButtonWidth;                                              // 0x0318(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x031C(0x0004) MISSED OFFSET
	class UCanvasPanel*                                ContainerPanel;                                           // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UHorizontalBox*                              ButtonsPanel;                                             // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0330(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGPageScrollWidget._pageButtonWidgetClass
	TArray<class UCanvasPanel*>                        _itemArray;                                               // 0x0360(0x0010) (ExportObject, ZeroConstructor, Transient)
	int                                                _currentPageIndex;                                        // 0x0370(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4C];                                      // 0x0374(0x004C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGPageScrollWidget"));

		return ptr;
	}


	void HandlePageButtonClicked(int* pageIndex);
};


// Class DeadByDaylight.UMGGridPageScrollWidget
// 0x0008 (0x03C8 - 0x03C0)
class UUMGGridPageScrollWidget : public UUMGPageScrollWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGGridPageScrollWidget"));

		return ptr;
	}


	void HandlePageButtonClicked(int* pageIndex);
};


// Class DeadByDaylight.UMGCharacterPageScrollWidget
// 0x00A8 (0x0470 - 0x03C8)
class UUMGCharacterPageScrollWidget : public UUMGGridPageScrollWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03C8(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData01[0x30];                                      // 0x03C8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGCharacterPageScrollWidget._characterButtonWidgetClass
	TArray<struct FCharacterSlotData>                  _charactersData;                                          // 0x0408(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	bool                                               _isKiller;                                                // 0x0418(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0419(0x0007) MISSED OFFSET
	struct FText                                       _charactersTitleText;                                     // 0x0420(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _killersTitleText;                                        // 0x0438(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _survivorsTitleText;                                      // 0x0450(0x0018) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCharacterPageScrollWidget"));

		return ptr;
	}


	void HandleCharacterClicked(int* CharacterIndex);
};


// Class DeadByDaylight.UMGCharacterPrestigeIcon
// 0x0008 (0x0308 - 0x0300)
class UUMGCharacterPrestigeIcon : public UBaseUserWidget
{
public:
	class UImage*                                      PrestigeImage;                                            // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCharacterPrestigeIcon"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGCharacterPrestigeButton
// 0x0020 (0x0328 - 0x0308)
class UUMGCharacterPrestigeButton : public UUMGCharacterPrestigeIcon
{
public:
	class UButton*                                     PrestigeButton;                                           // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                PrestigeAnimationCanvas;                                  // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0318(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCharacterPrestigeButton"));

		return ptr;
	}


	void SetCharacterPrestigeData(bool* CanPrestige, int* PrestigeLevel, EPlayerRole* Role);
	void OnPrestigeButtonClicked();
};


// Class DeadByDaylight.UMGCharacterPrice
// 0x0010 (0x0310 - 0x0300)
class UUMGCharacterPrice : public UBaseUserWidget
{
public:
	class UTextBlock*                                  PriceTextBlock;                                           // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FColor                                      AffordableColor;                                          // 0x0308(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      UnaffordableColor;                                        // 0x030C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCharacterPrice"));

		return ptr;
	}


	void SetCurrencyData(struct FPurchaseCurrencyData* currencyData);
};


// Class DeadByDaylight.UMGCharacterScrollingInfoWidget
// 0x0110 (0x0410 - 0x0300)
class UUMGCharacterScrollingInfoWidget : public UBaseUserWidget
{
public:
	class UUMGTeachablePerkButton*                     FirstTeachablePerk;                                       // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGTeachablePerkButton*                     SecondTeachablePerk;                                      // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGTeachablePerkButton*                     ThirdTeachablePerk;                                       // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                KillerInfoPanel;                                          // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGInventoryItemButton*                     KillerPower;                                              // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FText                                       _killerPowerName;                                         // 0x0328(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _killerSpeedText;                                         // 0x0340(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _killerTerrorRadiusText;                                  // 0x0358(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _killerHeightText;                                        // 0x0370(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _characterBioText;                                        // 0x0388(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _perksTitle;                                              // 0x03A0(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _teachablesTitle;                                         // 0x03B8(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _powerTitle;                                              // 0x03D0(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       _attributesTitle;                                         // 0x03E8(0x0018) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0400(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCharacterScrollingInfoWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGCharacterSelectionWidget
// 0x0058 (0x0358 - 0x0300)
class UUMGCharacterSelectionWidget : public UBaseUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnCharacterSelected;                                      // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterRoleButtonClicked;                             // 0x0310(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterInfoButtonClicked;                             // 0x0320(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UUMGCharacterPageScrollWidget*               CharacterPageScrollWidget;                                // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGCharacterSelectSubmenu*                  CharacterSelectSubMenu;                                   // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGCharacterInfoWidget*                     CharacterInfoWidget;                                      // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             CharacterSwitcher;                                        // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               _isKiller;                                                // 0x0350(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0351(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCharacterSelectionWidget"));

		return ptr;
	}


	void SwitchPanel();
	void BroadcastSelectedCharacter(int* CharacterIndex);
	void BroadcastRoleButtonClicked();
};


// Class DeadByDaylight.UMGCharacterSelectSubmenu
// 0x0020 (0x0320 - 0x0300)
class UUMGCharacterSelectSubmenu : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0300(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCharacterSelectSubmenu"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.UMGCharacterSlideShowWidget
// 0x0070 (0x0370 - 0x0300)
class UUMGCharacterSlideShowWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0300(0x0050) UNKNOWN PROPERTY: MapProperty DeadByDaylight.UMGCharacterSlideShowWidget._perkCategoriesIcons
	float                                              SecondsBeforeNextSlide;                                   // 0x0350(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0354(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCharacterSlideShowWidget"));

		return ptr;
	}


	void WaitAndFadeOut();
	void SwitchCharacterSlide();
	void FadeOut();
	void FadeIn();
	void DisplayCharacterSlide(struct FCharacterSlideData* characterSlide);
};


// Class DeadByDaylight.UMGChargeableInteractionWidget
// 0x0028 (0x0328 - 0x0300)
class UUMGChargeableInteractionWidget : public UBaseUserWidget
{
public:
	class UImage*                                      ItemIcon;                                                 // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	ESlateVisibility                                   InteractionIconVisibility;                                // 0x0308(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   ItemChargeVisibility;                                     // 0x0309(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   InteractionHudVisibility;                                 // 0x030A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1D];                                      // 0x030B(0x001D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGChargeableInteractionWidget"));

		return ptr;
	}


	void SetSecondaryMessage(struct FString* secondMessage);
	void SetProgressbarValue(float* value);
	void SetProgressBarColor(EBarColor* barColor);
	void SetProficiencyData(int* Index, struct FStatusEffectSlotData* proficiencyData);
	void SetOpacity(float* Opacity);
	void SetMessage(struct FString* Message);
	void SetItemChargeValue(float* value);
	void SetItemChargeColor(EBarColor* barColor);
	void ClearProficienciesData();
};


// Class DeadByDaylight.UMGCommandDebugButton
// 0x0020 (0x0320 - 0x0300)
class UUMGCommandDebugButton : public UBaseUserWidget
{
public:
	class UTextBlock*                                  CommandLabel;                                             // 0x0300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     CommandButton;                                            // 0x0308(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FString                                     CommandName;                                              // 0x0310(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCommandDebugButton"));

		return ptr;
	}


	void TriggerCommand();
};


// Class DeadByDaylight.UMGCustomizationCategoriesBar
// 0x0010 (0x0310 - 0x0300)
class UUMGCustomizationCategoriesBar : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCustomizationCategoriesBar"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.UMGCustomizationItemPriceWidget
// 0x0100 (0x0400 - 0x0300)
class UUMGCustomizationItemPriceWidget : public UBaseUserWidget
{
public:
	class UTextBlock*                                  CurrencyValue;                                            // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  DiscountPercentageContainer;                              // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  DiscountPercentage;                                       // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      CurrencyIcon;                                             // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0320(0x0050) UNKNOWN PROPERTY: MapProperty DeadByDaylight.UMGCustomizationItemPriceWidget.CurrencyTextures
	struct FSlateColor                                 AffordableCurrencyTextColor;                              // 0x0370(0x0028) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 AffordableSpecialCurrencyTextColor;                       // 0x0398(0x0028) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 NonAffordableCurrencyTextColor;                           // 0x03C0(0x0028) (Edit, DisableEditOnInstance)
	struct FString                                     _itemId;                                                  // 0x03E8(0x0010) (ZeroConstructor, Transient)
	ECurrencyType                                      _currencyType;                                            // 0x03F8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _hasDiscountPercentage;                                   // 0x03F9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03FA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCustomizationItemPriceWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGCustomizationItemBuyButton
// 0x0088 (0x0488 - 0x0400)
class UUMGCustomizationItemBuyButton : public UUMGCustomizationItemPriceWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0400(0x0010) MISSED OFFSET
	class UImage*                                      CurrencyColorStripe;                                      // 0x0410(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<ECurrencyType, struct FColor>                 _currencyStripeColors;                                    // 0x0418(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                                _disabledOpacity;                                         // 0x0468(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                _enabledOpacity;                                          // 0x0478(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCustomizationItemBuyButton"));

		return ptr;
	}


	void BroadcastUnlockWithCurrency();
};


// Class DeadByDaylight.UMGCustomizationItemWidget
// 0x00A0 (0x03A0 - 0x0300)
class UUMGCustomizationItemWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET
	class UImage*                                      RarityBackground;                                         // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PaintOverlay;                                             // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      Icon;                                                     // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                NewIndicator;                                             // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                OutfitIndicator;                                          // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UVerticalBox*                                PricesContainer;                                          // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ItemSelectedBorder;                                       // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                EquippedContainer;                                        // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0350(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGCustomizationItemWidget._customizationItemPriceWidgetClass
	TArray<class UUMGCustomizationItemPriceWidget*>    _priceWidgets;                                            // 0x0380(0x0010) (ExportObject, ZeroConstructor, Transient)
	int                                                _itemIndex;                                               // 0x0390(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       _itemId;                                                  // 0x0394(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0394(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCustomizationItemWidget"));

		return ptr;
	}


	void BroadcastAvailableItemSelected();
};


// Class DeadByDaylight.UMGCustomizationPageScrollWidget
// 0x0068 (0x0430 - 0x03C8)
class UUMGCustomizationPageScrollWidget : public UUMGGridPageScrollWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03C8(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData01[0x30];                                      // 0x03C8(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGCustomizationPageScrollWidget._customizationItemWidgetClass
	TArray<struct FStoreItemSlotData>                  _availableItemsData;                                      // 0x0408(0x0010) (ZeroConstructor, Transient)
	TArray<class UUMGCustomizationItemWidget*>         _itemWidgets;                                             // 0x0418(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0428(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCustomizationPageScrollWidget"));

		return ptr;
	}


	void OnAvailableItemSelectedCallback(int* itemIndex);
};


// Class DeadByDaylight.UMGCustomizationScreenWidget
// 0x00B0 (0x03B0 - 0x0300)
class UUMGCustomizationScreenWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0300(0x0030) MISSED OFFSET
	class UUMGCustomizationPageScrollWidget*           PageScrollWidget;                                         // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGCustomizationCategoriesBar*              CustomizationCategoriesBar;                               // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CategoryLabel;                                            // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CurrentlyEquippedLabel;                                   // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                AvailableInOutfitsContainer;                              // 0x0350(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                UnlockItemContainer;                                      // 0x0358(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGCustomizationItemWidget*                 OutfitItem;                                               // 0x0360(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UVerticalBox*                                PriceContainer;                                           // 0x0368(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0370(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGCustomizationScreenWidget.PriceButtonWidgetClass
	unsigned char                                      UnknownData02[0x4];                                       // 0x03A0(0x0004) MISSED OFFSET
	struct FName                                       _currentSelectedItem;                                     // 0x03A4(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03A0(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGCustomizationScreenWidget"));

		return ptr;
	}


	void SetCategoryLabel(ECustomizationCategory* Category);
	void BroadcastUnlockWithCurrencyEvent(int* currencyId, struct FString* combinedItem);
	void BroadcastCustomizationCategoryButtonPressed(int* categoryIndex);
	void BroadcastAvailableItemSelectedEvent(int* itemIndex, struct FStoreItemSlotData* selectedItem, struct FStoreItemSlotData* parentItem);
};


// Class DeadByDaylight.UMGDownloadProgressionWidget
// 0x0018 (0x0318 - 0x0300)
class UUMGDownloadProgressionWidget : public UBaseUserWidget
{
public:
	class UProgressBar*                                ProgressBar;                                              // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  DownloadPercentage;                                       // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  DownloadDescription;                                      // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGDownloadProgressionWidget"));

		return ptr;
	}


	void UpdateProgression(struct FDownloadProgression* DownloadProgression);
};


// Class DeadByDaylight.UMGEndGameCollapseProgressWidget
// 0x0040 (0x0340 - 0x0300)
class UUMGEndGameCollapseProgressWidget : public UBaseUserWidget
{
public:
	class UProgressBar*                                ProgressBar;                                              // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                MarkerLeftCanvas;                                         // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                MarkerRightCanvas;                                        // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UHorizontalBoxSlot*                          _markerLeftBox;                                           // 0x0318(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UHorizontalBoxSlot*                          _markerRightBox;                                          // 0x0320(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0328(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGEndGameCollapseProgressWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGEndGameCollapseWidget
// 0x0080 (0x0380 - 0x0300)
class UUMGEndGameCollapseWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0300(0x0008) MISSED OFFSET
	float                                              _progressBarInterpSpeed;                                  // 0x0308(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               _slowMode;                                                // 0x030C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x030D(0x0003) MISSED OFFSET
	class UCanvasPanel*                                NormalBar;                                                // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                SlowBar;                                                  // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGEndGameCollapseProgressWidget*           NormalProgressBar;                                        // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGEndGameCollapseProgressWidget*           SlowProgressBar;                                          // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0330(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGEndGameCollapseWidget"));

		return ptr;
	}


	void PlayToZeroAnimation();
};


// Class DeadByDaylight.UMGExpandableListWidget
// 0x0038 (0x0338 - 0x0300)
class UUMGExpandableListWidget : public UBaseUserWidget
{
public:
	class UVerticalBox*                                ItemContainer;                                            // 0x0300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CategorieName;                                            // 0x0308(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  itemCount;                                                // 0x0310(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FText                                       HeaderTitle;                                              // 0x0318(0x0018) (Edit, DisableEditOnTemplate)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0330(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGExpandableListWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGFogWidget
// 0x0008 (0x0308 - 0x0300)
class UUMGFogWidget : public UBaseUserWidget
{
public:
	class UUMGBankAndPlayerInfoWidget*                 BankAndPlayerInfoWidget;                                  // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGFogWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGFriendElementWidget
// 0x01D0 (0x0520 - 0x0350)
class UUMGFriendElementWidget : public UUMGBaseFriendListElement
{
public:
	class UImage*                                      FavoriteSlot;                                             // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     FavoriteButton;                                           // 0x0358(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      SelectionImage;                                           // 0x0360(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      SelectedPicture;                                          // 0x0368(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FSlateBrush                                 UnFavoriteBrush;                                          // 0x0370(0x0090) (Edit, DisableEditOnInstance)
	struct FSlateBrush                                 FavoriteBrush;                                            // 0x0400(0x0090) (Edit, DisableEditOnInstance)
	struct FSlateBrush                                 MutedBrush;                                               // 0x0490(0x0090) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGFriendElementWidget"));

		return ptr;
	}


	void HandleSelectionButton();
	void HandleFavoriteButtonClicked();
};


// Class DeadByDaylight.UMGFriendListTabWidget
// 0x0020 (0x0320 - 0x0300)
class UUMGFriendListTabWidget : public UUMGBaseTabListWidget
{
public:
	class UUMGExpandableListWidget*                    SentInviteToParty;                                        // 0x0300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGExpandableListWidget*                    ConnectedFriendsExpandableList;                           // 0x0308(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGExpandableListWidget*                    DisconnectedFriendsExpandableList;                        // 0x0310(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGExpandableListWidget*                    PendingExpandableList;                                    // 0x0318(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGFriendListTabWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGFriendPartyListElementWidget
// 0x0138 (0x0658 - 0x0520)
class UUMGFriendPartyListElementWidget : public UUMGFriendElementWidget
{
public:
	class UWidgetSwitcher*                             ButtonOrStatusSwitcher;                                   // 0x0520(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     CancelInviteButton;                                       // 0x0528(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PartyStatusImage;                                         // 0x0530(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FSlateBrush                                 IconNotReady;                                             // 0x0538(0x0090) (Edit, DisableEditOnInstance)
	struct FSlateBrush                                 IconReady;                                                // 0x05C8(0x0090) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGFriendPartyListElementWidget"));

		return ptr;
	}


	void HandleCancelInviteButtonClicked();
};


// Class DeadByDaylight.UMGFriendSearchBarWidget
// 0x0040 (0x0340 - 0x0300)
class UUMGFriendSearchBarWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0300(0x0030) MISSED OFFSET
	class UEditableTextBox*                            InputTextField;                                           // 0x0330(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     SearchButton;                                             // 0x0338(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGFriendSearchBarWidget"));

		return ptr;
	}


	void HandleTextInputChanged(struct FText* textInput);
	void HandleSearchButtonClicked();
};


// Class DeadByDaylight.UMGGameplayAlertWidget
// 0x0000 (0x0290 - 0x0290)
class UUMGGameplayAlertWidget : public UUMGBaseAlertWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGGameplayAlertWidget"));

		return ptr;
	}


	void UnregisterInputComponent();
	void UnbindFromAnimationStarted(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void UnbindFromAnimationFinished(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void UnbindAllFromAnimationStarted(class UWidgetAnimation** Animation);
	void UnbindAllFromAnimationFinished(class UWidgetAnimation** Animation);
	void Tick(struct FGeometry* MyGeometry, float* InDeltaTime);
	void StopListeningForInputAction(struct FName* ActionName, TEnumAsByte<EInputEvent>* EventType);
	void StopListeningForAllInputActions();
	void StopAnimationsAndLatentActions();
	void StopAnimation(class UWidgetAnimation** InAnimation);
	void StopAllAnimations();
	void SetPositionInViewport(struct FVector2D* Position, bool* bRemoveDPIScale);
	void SetPlaybackSpeed(class UWidgetAnimation** InAnimation, float* PlaybackSpeed);
	void SetPadding(struct FMargin* InPadding);
	void SetOwningPlayer(class APlayerController** LocalPlayerController);
	void SetNumLoopsToPlay(class UWidgetAnimation** InAnimation, int* NumLoopsToPlay);
	void SetInputActionPriority(int* NewPriority);
	void SetInputActionBlocking(bool* bShouldBlock);
	void SetForegroundColor(struct FSlateColor* InForegroundColor);
	void SetDesiredSizeInViewport(struct FVector2D* Size);
	void SetColorAndOpacity(struct FLinearColor* InColorAndOpacity);
	void SetAnchorsInViewport(struct FAnchors* Anchors);
	void SetAlignmentInViewport(struct FVector2D* Alignment);
	void ReverseAnimation(class UWidgetAnimation** InAnimation);
	void RemoveFromViewport();
	void RegisterInputComponent();
	void PreConstruct(bool* IsDesignTime);
	void PlaySound(class USoundBase** SoundToPlay);
	class UUMGSequencePlayer* PlayAnimationTimeRange(class UWidgetAnimation** InAnimation, float* StartAtTime, float* EndAtTime, int* NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode>* PlayMode, float* PlaybackSpeed);
	class UUMGSequencePlayer* PlayAnimationReverse(class UWidgetAnimation** InAnimation, float* PlaybackSpeed);
	class UUMGSequencePlayer* PlayAnimationForward(class UWidgetAnimation** InAnimation, float* PlaybackSpeed);
	class UUMGSequencePlayer* PlayAnimation(class UWidgetAnimation** InAnimation, float* StartAtTime, int* NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode>* PlayMode, float* PlaybackSpeed);
	float PauseAnimation(class UWidgetAnimation** InAnimation);
	struct FEventReply OnTouchStarted(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	struct FEventReply OnTouchMoved(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	struct FEventReply OnTouchGesture(struct FGeometry* MyGeometry, struct FPointerEvent* GestureEvent);
	struct FEventReply OnTouchForceChanged(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	struct FEventReply OnTouchEnded(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	void OnRemovedFromFocusPath(struct FFocusEvent* InFocusEvent);
	struct FEventReply OnPreviewMouseButtonDown(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnPreviewKeyDown(struct FGeometry* MyGeometry, struct FKeyEvent* InKeyEvent);
	void OnPaint(struct FPaintContext* Context);
	struct FEventReply OnMouseWheel(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnMouseMove(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	void OnMouseLeave(struct FPointerEvent* MouseEvent);
	void OnMouseEnter(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	void OnMouseCaptureLost();
	struct FEventReply OnMouseButtonUp(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnMouseButtonDown(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnMouseButtonDoubleClick(struct FGeometry* InMyGeometry, struct FPointerEvent* InMouseEvent);
	struct FEventReply OnMotionDetected(struct FGeometry* MyGeometry, struct FMotionEvent* InMotionEvent);
	struct FEventReply OnKeyUp(struct FGeometry* MyGeometry, struct FKeyEvent* InKeyEvent);
	struct FEventReply OnKeyDown(struct FGeometry* MyGeometry, struct FKeyEvent* InKeyEvent);
	struct FEventReply OnKeyChar(struct FGeometry* MyGeometry, struct FCharacterEvent* InCharacterEvent);
	void OnInitialized();
	struct FEventReply OnFocusReceived(struct FGeometry* MyGeometry, struct FFocusEvent* InFocusEvent);
	void OnFocusLost(struct FFocusEvent* InFocusEvent);
	bool OnDrop(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	bool OnDragOver(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragLeave(struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragEnter(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragDetected(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragCancelled(struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnAnimationStarted(class UWidgetAnimation** Animation);
	void OnAnimationFinished(class UWidgetAnimation** Animation);
	struct FEventReply OnAnalogValueChanged(struct FGeometry* MyGeometry, struct FAnalogInputEvent* InAnalogInputEvent);
	void OnAddedToFocusPath(struct FFocusEvent* InFocusEvent);
	void ListenForInputAction(struct FName* ActionName, TEnumAsByte<EInputEvent>* EventType, bool* bConsume, struct FScriptDelegate* callback);
	bool IsPlayingAnimation();
	bool IsListeningForInputAction(struct FName* ActionName);
	bool IsInViewport();
	bool IsInteractable();
	bool IsAnyAnimationPlaying();
	bool IsAnimationPlayingForward(class UWidgetAnimation** InAnimation);
	bool IsAnimationPlaying(class UWidgetAnimation** InAnimation);
	class APawn* GetOwningPlayerPawn();
	bool GetIsVisible();
	float GetAnimationCurrentTime(class UWidgetAnimation** InAnimation);
	struct FAnchors GetAnchorsInViewport();
	struct FVector2D GetAlignmentInViewport();
	void Destruct();
	void Construct();
	void CancelLatentActions();
	void BindToAnimationStarted(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void BindToAnimationFinished(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void BindToAnimationEvent(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate, EWidgetAnimationEvent* AnimationEvent, struct FName* UserTag);
	void AddToViewport(int* ZOrder);
	bool AddToPlayerScreen(int* ZOrder);
};


// Class DeadByDaylight.UMGGhostfaceSpecific
// 0x0010 (0x0310 - 0x0300)
class UUMGGhostfaceSpecific : public UBaseUserWidget
{
public:
	class UImage*                                      LeftLeanImage;                                            // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      RightLeanImage;                                           // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGGhostfaceSpecific"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGHtmlRichText
// 0x0000 (0x0430 - 0x0430)
class UUMGHtmlRichText : public URichTextBlock
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGHtmlRichText"));

		return ptr;
	}


	void SetText(struct FText* InText);
	class URichTextBlockDecorator* GetDecoratorByClass(class UClass** DecoratorClass);
};


// Class DeadByDaylight.UMGHtmlTextDecorator
// 0x0000 (0x0030 - 0x0030)
class UUMGHtmlTextDecorator : public URichTextBlockDecorator
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGHtmlTextDecorator"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGInboxMessageEntryWidget
// 0x0068 (0x02C8 - 0x0260)
class UUMGInboxMessageEntryWidget : public UUserWidget
{
public:
	struct FInboxMessageUIData                         _messageData;                                             // 0x0260(0x0060) (BlueprintVisible)
	bool                                               _isCurrentSelection;                                      // 0x02C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGInboxMessageEntryWidget"));

		return ptr;
	}


	void UpdateMessageData(struct FInboxMessageUIData* messageData);
	void SetMessageData(struct FInboxMessageUIData* messageData);
	struct FInboxMessageElapsedTime GetElapsedTime();
};


// Class DeadByDaylight.UMGInboxScreen
// 0x00A8 (0x03A8 - 0x0300)
class UUMGInboxScreen : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0300(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGInboxScreen"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.UMGInventoryItemButton
// 0x0000 (0x04D0 - 0x04D0)
class UUMGInventoryItemButton : public UUMGLoadoutItemButton
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGInventoryItemButton"));

		return ptr;
	}


	void UpdateWidgetByState(EInventoryButtonState* State);
	void UpdateWidgetByData(struct FInventorySlotData* SlotData);
	void UpdateImageColor(EItemRarity* Rarity, EStatusEffectType* EffectType);
	void SetIsSelected(bool* isSelected);
	void SetIconImageByPath(struct FString* IconPath);
	void OnLockedButtonClicked();
	void InitializationForLoadoutWidget();
	void InitializationForCharacterInfoWidget();
	struct FName GetLoadoutItemID();
	void BroadcastLongPressEvent(struct FName* ItemId);
	void BroadcastClickedEvent(struct FName* ItemId);
};


// Class DeadByDaylight.UmgPlayerHud
// 0x00F8 (0x0358 - 0x0260)
class UUmgPlayerHud : public UUserWidget
{
public:
	class UAtlantaSkillCheckWidget*                    SkillCheckWidget;                                         // 0x0260(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGAlertsWidget*                            AtlantaAlertsWidget;                                      // 0x0268(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGObjectivesWidget*                        AtlantaObjectivesWidget;                                  // 0x0270(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPerkHudWidget*                              AtlantaPerksWidget;                                       // 0x0278(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGStatusEffectsWidget*                     AtlantaStatusEffectsWidget;                               // 0x0280(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGChargeableInteractionWidget*             AtlantaInteractionWidget;                                 // 0x0288(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAtlantaPromptWidget*                        AtlantaPromptWidget;                                      // 0x0290(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAtlantaPromptWidget*                        AtlantaTutorialPromptWidget;                              // 0x0298(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGPlayersStatusWidget*                     AtlantaPlayersStatusWidget;                               // 0x02A0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UVerticalBox*                                AtlantaObjectivesContainer;                               // 0x02A8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPerkSoundHudWidget*                         PerkSoundHudWidget;                                       // 0x02B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBaseUserWidget*                             CenterInteractionButton;                                  // 0x02B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGEndGameCollapseWidget*                   EndGameCollapseWidget;                                    // 0x02C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPerkClickedEvent;                                       // 0x02C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTutorialLeaveClickedEvent;                              // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTutorialNextClickedEvent;                               // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSettingsClickedEvent;                                   // 0x02F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ADBDPlayerController*                        LocalController;                                          // 0x0308(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UAtlantaHudDirectionalStick*                 AtlantaDirectionalStick;                                  // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0318(0x0010) MISSED OFFSET
	class UTexture2D*                                  _unlockedVirtualJoystickThumbImage;                       // 0x0328(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  _lockedVirtualJoystickThumbImage;                         // 0x0330(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0338(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UmgPlayerHud"));

		return ptr;
	}


	void TutorialTallyNextSelected();
	void TutorialTallyLeaveSelected();
	void SetVirtualJoystickThumbImage(class ADBDPlayerController** Controller, bool* locked);
	void OnSettingsButtonPressed();
	void OnPerkClicked(struct FName* PerkId);
	void OnInitializeHUD();
	bool IsInteractionAvailable(EInputInteractionType* InteractionType);
	bool IsInitialized();
	void InitializeHUD();
	void GetInteractionIconByType(EInputInteractionType* interactionInputType);
	bool CanInitialize();
};


// Class DeadByDaylight.UmgKillerHud
// 0x0038 (0x0390 - 0x0358)
class UUmgKillerHud : public UUmgPlayerHud
{
public:
	class UPowerButton*                                PowerButton;                                              // 0x0358(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UActionButton*                               SecondAbilityButton;                                      // 0x0360(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UActionButton*                               AttackButton;                                             // 0x0368(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGGhostfaceSpecific*                       GhostfaceSpecific;                                        // 0x0370(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ASlasherPlayer*                              Killer;                                                   // 0x0378(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0380(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UmgKillerHud"));

		return ptr;
	}


	void UpdatePowerButtonTier(int* previousTier, int* currentTier, bool* IsFirstTime);
	bool ShouldShowPowerHighlight();
	void OnSecondAbilityButtonPressed();
	void OnPowerButtonReleased();
	void OnPowerButtonPressed();
	void OnCancelButtonReleased();
	void OnCancelButtonPressed();
	void OnAttackButtonReleased();
	void OnAttackButtonPressed();
	bool IsPowerButtonAvailable();
	bool IsCancelPowerButtonAvailable();
	bool IsAttackButtonVisible();
	bool IsAttackButtonAvailable();
	class UInteractionDefinition* GetCurrentPowerUseInteraction();
};


// Class DeadByDaylight.UMGLevelBannerWidget
// 0x0018 (0x0318 - 0x0300)
class UUMGLevelBannerWidget : public UBaseUserWidget
{
public:
	class UButton*                                     TooltipButton;                                            // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0308(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLevelBannerWidget"));

		return ptr;
	}


	void SetProgressValue(float* Progress);
	void SetInfo(int* PlayerLevel, int* playerPrestige, int* currentExperience, int* nextLevelExperience);
	void SetExperienceVisibility(bool* isExperienceVisible, bool* isBig);
	void OnTooltipButtonLongPressEvent();
};


// Class DeadByDaylight.UMGLoadingScreenWidget
// 0x0030 (0x0330 - 0x0300)
class UUMGLoadingScreenWidget : public UBaseUserWidget
{
public:
	class UTextBlock*                                  Description;                                              // 0x0300(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData)
	class UImage*                                      HintIcon;                                                 // 0x0308(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData)
	class UProgressBar*                                LoadingBar;                                               // 0x0310(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                KillerPanel;                                              // 0x0318(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                SurvivorPanel;                                            // 0x0320(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  Title;                                                    // 0x0328(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLoadingScreenWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGLoadoutBaseWidget
// 0x0058 (0x0358 - 0x0300)
class UUMGLoadoutBaseWidget : public UBaseUserWidget
{
public:
	class UUMGLoadoutItemButton*                       ItemOrPowerButton;                                        // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGLoadoutItemButton*                       AddonFirstButton;                                         // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGLoadoutItemButton*                       AddonSecondButton;                                        // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGLoadoutItemButton*                       OfferingButton;                                           // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGLoadoutItemButton*                       PerkFirstButton;                                          // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGLoadoutItemButton*                       PerkSecondButton;                                         // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGLoadoutItemButton*                       PerkThirdButton;                                          // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGLoadoutItemButton*                       PerkFourthButton;                                         // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UUMGLoadoutItemButton*>               LoadoutItemButtons;                                       // 0x0340(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient)
	bool                                               usingMatchRules;                                          // 0x0350(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               perkSlotsLockedByAdmin;                                   // 0x0351(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsSlasher;                                                // 0x0352(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0353(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLoadoutBaseWidget"));

		return ptr;
	}


	void SetLoadoutData(TArray<struct FInventorySlotData>* loadoutData, bool* usingMatchRules, bool* perkSlotsLockedByAdmin, ELoadoutSlot* LoadoutSlot, bool* IsSlasher);
	void SetIsSelectedLoadoutItemButton(ELoadoutSlot* LoadoutSlot);
	void SetDividerImageColor(struct FLinearColor* Color);
};


// Class DeadByDaylight.UMGLoadoutFilterButton
// 0x0028 (0x0328 - 0x0300)
class UUMGLoadoutFilterButton : public UBaseUserWidget
{
public:
	class UButton*                                     ActionButton;                                             // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnLoadoutFilterButtonClicked;                             // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0318(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLoadoutFilterButton"));

		return ptr;
	}


	void SetIsSelected(bool* isSelected);
	void SetIcon();
	void OnActionButtonClick();
	void InitFilterButton(struct FName* filterName);
};


// Class DeadByDaylight.UMGLoadoutFilterWidget
// 0x0078 (0x0378 - 0x0300)
class UUMGLoadoutFilterWidget : public UBaseUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnLoadoutFilterClicked;                                   // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0310(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGLoadoutFilterWidget.AtlantaLoadoutFilterButtonClass
	class UHorizontalBox*                              FilterContainerBox;                                       // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FName>                               Filters;                                                  // 0x0348(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UUMGLoadoutFilterButton*>             FilterButtons;                                            // 0x0358(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient)
	class UUMGLoadoutFilterButton*                     SelectedFilterButton;                                     // 0x0368(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0370(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLoadoutFilterWidget"));

		return ptr;
	}


	void OnFilterButtonClicked(struct FName* filterName);
	void InitFilterWidget();
	void ClearSelectedFilter();
};


// Class DeadByDaylight.UMGLoadoutPageScrollWidget
// 0x0118 (0x04D8 - 0x03C0)
class UUMGLoadoutPageScrollWidget : public UUMGPageScrollWidget
{
public:
	bool                                               ShouldResizeWidget;                                       // 0x03C0(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03C1(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData01[0x30];                                      // 0x03C1(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGLoadoutPageScrollWidget._itemWidgetClass
	EInventoryGridFormat                               _gridFormat;                                              // 0x03F8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET
	TArray<struct FInventorySlotData>                  _inventoryData;                                           // 0x0400(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<int>                                        _inventorySelectedItemIndexes;                            // 0x0410(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	struct FString                                     _subtitle;                                                // 0x0420(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0xA8];                                      // 0x0430(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLoadoutPageScrollWidget"));

		return ptr;
	}


	void SetItemWidgetClass();
	void SetItemIsSelected(int* Index, bool* isSelected);
	void SetInventoryData(EInventoryGridFormat* gridFormat, TArray<struct FInventorySlotData>* InventoryData, TArray<int>* selectedItemsIndexes, struct FString* trackingItemName, struct FString* Subtitle);
	void HandleItemClicked(struct FName* ItemId);
};


// Class DeadByDaylight.UMGLoadoutWidget
// 0x0068 (0x03C0 - 0x0358)
class UUMGLoadoutWidget : public UUMGLoadoutBaseWidget
{
public:
	struct FText                                       InventoryItemTypeText;                                    // 0x0358(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       InventoryFilterText;                                      // 0x0370(0x0018) (BlueprintVisible, Transient)
	class UUMGLoadoutPageScrollWidget*                 PageScrollWidget;                                         // 0x0388(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FText                                       LoadoutTitleText;                                         // 0x0390(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       InventoryPanelTitleText;                                  // 0x03A8(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLoadoutWidget"));

		return ptr;
	}


	void SetInventoryData(EInventoryGridFormat* gridFormat, TArray<struct FInventorySlotData>* InventoryData, TArray<int>* selectedItemsIndexes, struct FString* trackingItemName, struct FString* Subtitle);
};


// Class DeadByDaylight.UMGLobbyJoinedWidget
// 0x0068 (0x0368 - 0x0300)
class UUMGLobbyJoinedWidget : public UBaseUserWidget
{
public:
	struct FText                                       TextLeaveLobby;                                           // 0x0300(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       TextPlayerNotReadyYet;                                    // 0x0318(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       TextWaitingPlayers;                                       // 0x0330(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       TextToBeReady;                                            // 0x0348(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	class UHorizontalBox*                              CommandButtonsContainer;                                  // 0x0360(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLobbyJoinedWidget"));

		return ptr;
	}


	void UpdatePlayersLatency(TMap<int, float>* playersLatency, bool* isHost);
	void SetWidgetsVisibility(bool* widgetsVisibilty);
	void SetReadyStatus(TArray<struct FPlayerReadyStatusData>* playersReadyStatusData);
	void SetLocalPlayerInfo(struct FPlayerInfoData* PlayerInfoData);
	void SetLobbyTimer(int* Seconds);
	void SetLoadoutDataForLocalPlayer(TArray<struct FInventorySlotData>* loadoutData, bool* usingMatchRules, bool* perkSlotsLockedByAdmin, bool* IsSlasher);
	void RemovePlayersInfo(int* playerID);
	void AddPlayerInfo(int* playerID, struct FPlayerInfoData* PlayerInfoData, bool* IsPlayerReady, TArray<struct FInventorySlotData>* loadoutData);
};


// Class DeadByDaylight.UMGLobbyOfferingItemWidget
// 0x0000 (0x0300 - 0x0300)
class UUMGLobbyOfferingItemWidget : public UBaseUserWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLobbyOfferingItemWidget"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.UMGLobbyOfferingWidget
// 0x0060 (0x0360 - 0x0300)
class UUMGLobbyOfferingWidget : public UBaseUserWidget
{
public:
	class UCanvasPanel*                                CanvasOffering;                                           // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0308(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGLobbyOfferingWidget.LobbyOfferingItemClass
	unsigned char                                      UnknownData01[0x28];                                      // 0x0338(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLobbyOfferingWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGLobbyScreen
// 0x0048 (0x0348 - 0x0300)
class UUMGLobbyScreen : public UBaseUserWidget
{
public:
	class UUMGLobbySearchingWidget*                    LobbySearchingWidget;                                     // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnJoinedLobbyLeaved;                                      // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSearchingLobbyCancelled;                                // 0x0318(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UWidgetSwitcher*                             LobbySwitcher;                                            // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGLobbyJoinedWidget*                       LobbyJoinedWidget;                                        // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGLobbyOfferingWidget*                     OfferingWidget;                                           // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGFogWidget*                               FogWidget;                                                // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLobbyScreen"));

		return ptr;
	}


	void HandleSearchingLobbyCancel();
	void HandleJoinedLobbyLeave();
};


// Class DeadByDaylight.UMGLobbySearchingWidget
// 0x0098 (0x03F0 - 0x0358)
class UUMGLobbySearchingWidget : public UUMGLoadoutBaseWidget
{
public:
	class UUMGBankAndPlayerInfoWidget*                 BankAndPlayerInfoWidget;                                  // 0x0358(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FText                                       ItemOrPowerText;                                          // 0x0360(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       AddonText;                                                // 0x0378(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       OfferingText;                                             // 0x0390(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       PerksText;                                                // 0x03A8(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       TextWaitingForPlayers;                                    // 0x03C0(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       TextEstimatedTimeTitle;                                   // 0x03D8(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGLobbySearchingWidget"));

		return ptr;
	}


	void SetWaitingTimer(int* Seconds);
	void SetLockedOutTimer(int* Seconds);
	void SetEstimatedWaitingTimer(int* Seconds);
};


// Class DeadByDaylight.UMGObjectivesWidget
// 0x0008 (0x0308 - 0x0300)
class UUMGObjectivesWidget : public UBaseUserWidget
{
public:
	ESlateVisibility                                   PanelEscapeRequirementsVisibility;                        // 0x0300(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   PanelGeneratorVisibility;                                 // 0x0301(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   PanelFindExitVisibility;                                  // 0x0302(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ESlateVisibility                                   PanelHatchVisibility;                                     // 0x0303(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0304(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGObjectivesWidget"));

		return ptr;
	}


	void UpdateTextMessage(struct FText* textFind, struct FText* textExit, struct FText* textOr);
	void UpdateGeneratorCount(int* Count);
};


// Class DeadByDaylight.UMGPartyPlayerSlotWidget
// 0x0050 (0x0420 - 0x03D0)
class UUMGPartyPlayerSlotWidget : public UUMGBaseButtonWidget
{
public:
	class UTextBlock*                                  PlayerName;                                               // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CharacterName;                                            // 0x03D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      FriendIcon;                                               // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x03E8(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGPartyPlayerSlotWidget"));

		return ptr;
	}


	void SetVisualsFromState(EPartyPlayerSlotWidgetState* widgetState);
};


// Class DeadByDaylight.UMGPartySlotsWidget
// 0x0018 (0x0318 - 0x0300)
class UUMGPartySlotsWidget : public UBaseUserWidget
{
public:
	class UPanelWidget*                                PartyPlayerSlotsContainer;                                // 0x0300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UUMGPartyPlayerSlotWidget*>           _partySlots;                                              // 0x0308(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGPartySlotsWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGPerkSelectionPopup
// 0x0088 (0x0470 - 0x03E8)
class UUMGPerkSelectionPopup : public UUMGGenericPopup
{
public:
	class UPerkSelectionSlotWidget*                    LargePerkSelectionSlot;                                   // 0x03E8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPerkSelectionSlotWidget*                    FirstSmallSlot;                                           // 0x03F0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPerkSelectionSlotWidget*                    SecondSmallSlot;                                          // 0x03F8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PictureCharacterBackground;                               // 0x0400(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                SelectablePerksContainer;                                 // 0x0408(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0410(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGPerkSelectionPopup.UMGPerkSelectionSlotWidget
	class UVerticalBox*                                SmallSlotContainer;                                       // 0x0440(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class URichTextBlock*                              RewardSubTitle;                                           // 0x0448(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class URichTextBlock*                              PerkSelectionTitle;                                       // 0x0450(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UPerkSelectionSlotWidget*>            _selectablePerk;                                          // 0x0458(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGPerkSelectionPopup"));

		return ptr;
	}


	void OnSlotSelected(int* Index);
};


// Class DeadByDaylight.UMGPlayersStatusWidget
// 0x00E0 (0x03E0 - 0x0300)
class UUMGPlayersStatusWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0300(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGPlayersStatusWidget.PlayerStatusIconClass
	class UHorizontalBox*                              playersContainer;                                         // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<int, class UUMGPlayerStatusIcon*>             playerIcons;                                              // 0x0338(0x0050) (ExportObject, ZeroConstructor, Transient)
	TMap<struct FString, class UUMGPlayerStatusIcon*>  playerIconsByName;                                        // 0x0388(0x0050) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGPlayersStatusWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGPlayerStatusIcon
// 0x0100 (0x0400 - 0x0300)
class UUMGPlayerStatusIcon : public UBaseUserWidget
{
public:
	class UProgressBar*                                HealthBar;                                                // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UProgressBar*                                TimerBar;                                                 // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                HealthBarContainer;                                       // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                TimerBarContainer;                                        // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  PlayerName;                                               // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      StatusIconBloodTop;                                       // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      StatusIconBloodBottom;                                    // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      StatusIcon;                                               // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ObsessionCanvas;                                          // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                BrokenIndicatorCanvas;                                    // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                AfflictionCanvas;                                         // 0x0350(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                AfflictionIntroCanvas;                                    // 0x0358(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                SleepCanvas;                                              // 0x0360(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ReverseBearTrapCanvas;                                    // 0x0368(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ReverseBearTrapArrow;                                     // 0x0370(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTexture2D*                                  _hookedTexture;                                           // 0x0378(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _hookedBloodTexture;                                      // 0x0380(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _trappedTexture;                                          // 0x0388(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _trappedBloodTexture;                                     // 0x0390(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _deadTexture;                                             // 0x0398(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _deadBloodTexture;                                        // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _escapedTexture;                                          // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _injuredTexture;                                          // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _injuredBloodTexture;                                     // 0x03B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _crawlingTexture;                                         // 0x03C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _crawlingBloodTexture;                                    // 0x03C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _sacrificedTexture;                                       // 0x03D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _sacrificedBloodTexture;                                  // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _disconnectedTexture;                                     // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  _defaultTexture;                                          // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                _maxNumberCharacterInName;                                // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x03F4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGPlayerStatusIcon"));

		return ptr;
	}


	void SetReverseTrapProgressionTimer(float* Seconds);
};


// Class DeadByDaylight.UMGPopupButton
// 0x0030 (0x0330 - 0x0300)
class UUMGPopupButton : public UBaseUserWidget
{
public:
	class UTextBlock*                                  Label;                                                    // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     UmgButton;                                                // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0310(0x0014) MISSED OFFSET
	float                                              DisabledOpacity;                                          // 0x0324(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnabledOpacity;                                           // 0x0328(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x032C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGPopupButton"));

		return ptr;
	}


	void OnButtonClick();
};


// Class DeadByDaylight.UMGRankBanner
// 0x0010 (0x0310 - 0x0300)
class UUMGRankBanner : public UBaseUserWidget
{
public:
	class UImage*                                      Frame;                                                    // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  Label;                                                    // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGRankBanner"));

		return ptr;
	}


	void SetData(int* Rank, EPlayerRole* PlayerRole);
};


// Class DeadByDaylight.UMGRequestsListTabWidget
// 0x0008 (0x0308 - 0x0300)
class UUMGRequestsListTabWidget : public UUMGBaseTabListWidget
{
public:
	class UUMGExpandableListWidget*                    FriendRequestExpandableList;                              // 0x0300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGRequestsListTabWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGRoleSelectionScreen
// 0x0020 (0x0320 - 0x0300)
class UUMGRoleSelectionScreen : public UBaseUserWidget
{
public:
	int                                                _newInboxMessageCount;                                    // 0x0300(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0304(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGRoleSelectionScreen"));

		return ptr;
	}


	void ButtonClickEvent(ERoleSelectionScreenButton* buttonID);
};


// Class DeadByDaylight.UMGScoreAlertWidget
// 0x0000 (0x0290 - 0x0290)
class UUMGScoreAlertWidget : public UUMGBaseAlertWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGScoreAlertWidget"));

		return ptr;
	}


	void UnregisterInputComponent();
	void UnbindFromAnimationStarted(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void UnbindFromAnimationFinished(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void UnbindAllFromAnimationStarted(class UWidgetAnimation** Animation);
	void UnbindAllFromAnimationFinished(class UWidgetAnimation** Animation);
	void Tick(struct FGeometry* MyGeometry, float* InDeltaTime);
	void StopListeningForInputAction(struct FName* ActionName, TEnumAsByte<EInputEvent>* EventType);
	void StopListeningForAllInputActions();
	void StopAnimationsAndLatentActions();
	void StopAnimation(class UWidgetAnimation** InAnimation);
	void StopAllAnimations();
	void SetPositionInViewport(struct FVector2D* Position, bool* bRemoveDPIScale);
	void SetPlaybackSpeed(class UWidgetAnimation** InAnimation, float* PlaybackSpeed);
	void SetPadding(struct FMargin* InPadding);
	void SetOwningPlayer(class APlayerController** LocalPlayerController);
	void SetNumLoopsToPlay(class UWidgetAnimation** InAnimation, int* NumLoopsToPlay);
	void SetInputActionPriority(int* NewPriority);
	void SetInputActionBlocking(bool* bShouldBlock);
	void SetForegroundColor(struct FSlateColor* InForegroundColor);
	void SetDesiredSizeInViewport(struct FVector2D* Size);
	void SetColorAndOpacity(struct FLinearColor* InColorAndOpacity);
	void SetAnchorsInViewport(struct FAnchors* Anchors);
	void SetAlignmentInViewport(struct FVector2D* Alignment);
	void ReverseAnimation(class UWidgetAnimation** InAnimation);
	void RemoveFromViewport();
	void RegisterInputComponent();
	void PreConstruct(bool* IsDesignTime);
	void PlaySound(class USoundBase** SoundToPlay);
	class UUMGSequencePlayer* PlayAnimationTimeRange(class UWidgetAnimation** InAnimation, float* StartAtTime, float* EndAtTime, int* NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode>* PlayMode, float* PlaybackSpeed);
	class UUMGSequencePlayer* PlayAnimationReverse(class UWidgetAnimation** InAnimation, float* PlaybackSpeed);
	class UUMGSequencePlayer* PlayAnimationForward(class UWidgetAnimation** InAnimation, float* PlaybackSpeed);
	class UUMGSequencePlayer* PlayAnimation(class UWidgetAnimation** InAnimation, float* StartAtTime, int* NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode>* PlayMode, float* PlaybackSpeed);
	float PauseAnimation(class UWidgetAnimation** InAnimation);
	struct FEventReply OnTouchStarted(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	struct FEventReply OnTouchMoved(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	struct FEventReply OnTouchGesture(struct FGeometry* MyGeometry, struct FPointerEvent* GestureEvent);
	struct FEventReply OnTouchForceChanged(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	struct FEventReply OnTouchEnded(struct FGeometry* MyGeometry, struct FPointerEvent* InTouchEvent);
	void OnRemovedFromFocusPath(struct FFocusEvent* InFocusEvent);
	struct FEventReply OnPreviewMouseButtonDown(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnPreviewKeyDown(struct FGeometry* MyGeometry, struct FKeyEvent* InKeyEvent);
	void OnPaint(struct FPaintContext* Context);
	struct FEventReply OnMouseWheel(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnMouseMove(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	void OnMouseLeave(struct FPointerEvent* MouseEvent);
	void OnMouseEnter(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	void OnMouseCaptureLost();
	struct FEventReply OnMouseButtonUp(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnMouseButtonDown(struct FGeometry* MyGeometry, struct FPointerEvent* MouseEvent);
	struct FEventReply OnMouseButtonDoubleClick(struct FGeometry* InMyGeometry, struct FPointerEvent* InMouseEvent);
	struct FEventReply OnMotionDetected(struct FGeometry* MyGeometry, struct FMotionEvent* InMotionEvent);
	struct FEventReply OnKeyUp(struct FGeometry* MyGeometry, struct FKeyEvent* InKeyEvent);
	struct FEventReply OnKeyDown(struct FGeometry* MyGeometry, struct FKeyEvent* InKeyEvent);
	struct FEventReply OnKeyChar(struct FGeometry* MyGeometry, struct FCharacterEvent* InCharacterEvent);
	void OnInitialized();
	struct FEventReply OnFocusReceived(struct FGeometry* MyGeometry, struct FFocusEvent* InFocusEvent);
	void OnFocusLost(struct FFocusEvent* InFocusEvent);
	bool OnDrop(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	bool OnDragOver(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragLeave(struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragEnter(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragDetected(struct FGeometry* MyGeometry, struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnDragCancelled(struct FPointerEvent* PointerEvent, class UDragDropOperation** Operation);
	void OnAnimationStarted(class UWidgetAnimation** Animation);
	void OnAnimationFinished(class UWidgetAnimation** Animation);
	struct FEventReply OnAnalogValueChanged(struct FGeometry* MyGeometry, struct FAnalogInputEvent* InAnalogInputEvent);
	void OnAddedToFocusPath(struct FFocusEvent* InFocusEvent);
	void ListenForInputAction(struct FName* ActionName, TEnumAsByte<EInputEvent>* EventType, bool* bConsume, struct FScriptDelegate* callback);
	bool IsPlayingAnimation();
	bool IsListeningForInputAction(struct FName* ActionName);
	bool IsInViewport();
	bool IsInteractable();
	bool IsAnyAnimationPlaying();
	bool IsAnimationPlayingForward(class UWidgetAnimation** InAnimation);
	bool IsAnimationPlaying(class UWidgetAnimation** InAnimation);
	class APawn* GetOwningPlayerPawn();
	bool GetIsVisible();
	float GetAnimationCurrentTime(class UWidgetAnimation** InAnimation);
	struct FAnchors GetAnchorsInViewport();
	struct FVector2D GetAlignmentInViewport();
	void Destruct();
	void Construct();
	void CancelLatentActions();
	void BindToAnimationStarted(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void BindToAnimationFinished(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate);
	void BindToAnimationEvent(class UWidgetAnimation** Animation, struct FScriptDelegate* Delegate, EWidgetAnimationEvent* AnimationEvent, struct FName* UserTag);
	void AddToViewport(int* ZOrder);
	bool AddToPlayerScreen(int* ZOrder);
};


// Class DeadByDaylight.UMGScrollListPageButton
// 0x0028 (0x0328 - 0x0300)
class UUMGScrollListPageButton : public UBaseUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnClicked;                                                // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                pageIndex;                                                // 0x0310(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0314(0x0004) MISSED OFFSET
	class UButton*                                     ActionButton;                                             // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      SelectedImage;                                            // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGScrollListPageButton"));

		return ptr;
	}


	void SetIsSelected(bool* selected);
	void HandleActionButtonClick();
};


// Class DeadByDaylight.UMGSettingContextWidget
// 0x0018 (0x0318 - 0x0300)
class UUMGSettingContextWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0300(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGSettingContextWidget"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.UMGSettingAboutContextWidget
// 0x0010 (0x0328 - 0x0318)
class UUMGSettingAboutContextWidget : public UUMGSettingContextWidget
{
public:
	class UUMGSettingContextButton*                    EULAButton;                                               // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGSettingContextButton*                    CreditsButton;                                            // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGSettingAboutContextWidget"));

		return ptr;
	}


	void SetVersionNumber(struct FString* VersionNumber);
};


// Class DeadByDaylight.UMGSettingContextButton
// 0x0018 (0x0318 - 0x0300)
class UUMGSettingContextButton : public UBaseUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnSettingContextButtonClickEvent;                         // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0310(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGSettingContextButton"));

		return ptr;
	}


	void SetIsSelected(bool* isSelected);
	void SetContextButtonData(int* buttonID);
	void SetButtonText(struct FString* ButtonText);
	void HandleSettingContextButtonClick();
	int GetContextButtonData();
};


// Class DeadByDaylight.UMGSettingControlsContextWidget
// 0x0090 (0x03A8 - 0x0318)
class UUMGSettingControlsContextWidget : public UUMGSettingContextWidget
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0318(0x0060) MISSED OFFSET
	bool                                               AimAssist;                                                // 0x0378(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	int                                                HandSide;                                                 // 0x037C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                InteractionButton;                                        // 0x0380(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InvertY;                                                  // 0x0384(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0385(0x0003) MISSED OFFSET
	float                                              KillerCameraSensitivity;                                  // 0x0388(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SurvivorCameraSensitivity;                                // 0x038C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0390(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGSettingControlsContextWidget"));

		return ptr;
	}


	void HandleSurvivorCameraSensitivityChanged(float* sliderValue);
	void HandleKillerCameraSensitivityChanged(float* sliderValue);
	void HandleInvertYToggleClick(bool* toggleValue);
	void HandleInteractionButtonToggleClick(int* Index);
	void HandleHandSideToggleClick(int* Index);
	void HandleAimAssistToggleClick(bool* toggleValue);
};


// Class DeadByDaylight.UMGSettingLanguageContextWidget
// 0x0048 (0x0360 - 0x0318)
class UUMGSettingLanguageContextWidget : public UUMGSettingContextWidget
{
public:
	class UScrollBox*                                  LanguageScrollBox;                                        // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0320(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGSettingLanguageContextWidget._languageButtonClass
	int                                                _languageListRowGap;                                      // 0x0350(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0354(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGSettingLanguageContextWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGSettingMenuButton
// 0x0018 (0x0318 - 0x0300)
class UUMGSettingMenuButton : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0300(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGSettingMenuButton"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.UMGSplashScreen
// 0x0070 (0x0370 - 0x0300)
class UUMGSplashScreen : public UBaseUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnSaveGamePopupCompleteEvent;                             // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnScreenTouched;                                          // 0x0310(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCanvasPanel*                                SavePopup;                                                // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  GameVersion;                                              // 0x0328(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  LoadingState;                                             // 0x0330(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  PressKey;                                                 // 0x0338(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     TapButton;                                                // 0x0340(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SaveGameTitle;                                            // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SaveGameDescription;                                      // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGDownloadProgressionWidget*               DownloadProgression;                                      // 0x0358(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGCharacterSlideShowWidget*                CharacterSlideShow;                                       // 0x0360(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGSplashScreen"));

		return ptr;
	}


	void OnTapButtonClicked();
	void OnSaveGamePopupComplete();
};


// Class DeadByDaylight.UMGStatusEffectIcon
// 0x0048 (0x0518 - 0x04D0)
class UUMGStatusEffectIcon : public UUMGLoadoutItemButton
{
public:
	struct FStatusEffectSlotData                       statusEffectData;                                         // 0x04D0(0x0048) (BlueprintVisible, BlueprintReadOnly, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGStatusEffectIcon"));

		return ptr;
	}


	void UpdateWidget();
	void UpdatePercentageFill(float* percentage);
};


// Class DeadByDaylight.UMGStatusEffectsWidget
// 0x0090 (0x0390 - 0x0300)
class UUMGStatusEffectsWidget : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0300(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGStatusEffectsWidget.AtlantaStatusEffectIconClass
	class UHorizontalBox*                              StatusEffectsBox;                                         // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<struct FName, class UUMGStatusEffectIcon*>    _statusEffectsMap;                                        // 0x0338(0x0050) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0388(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGStatusEffectsWidget"));

		return ptr;
	}


	void RemoveExistingStatusEffect(struct FString* statusEffectId);
};


// Class DeadByDaylight.UMGStoreAuricCellButton
// 0x0078 (0x0378 - 0x0300)
class UUMGStoreAuricCellButton : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET
	struct FCurrencyPurchaseData                       CurrencyPurchaseData;                                     // 0x0310(0x0058) (BlueprintVisible, BlueprintReadOnly, Transient)
	class UTextBlock*                                  AuricCellTitleText;                                       // 0x0368(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0370(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGStoreAuricCellButton"));

		return ptr;
	}


	void UpdateWidget();
	void HandleButtonClicked();
};


// Class DeadByDaylight.UMGSuggestionsListTabWidget
// 0x0010 (0x0310 - 0x0300)
class UUMGSuggestionsListTabWidget : public UUMGBaseTabListWidget
{
public:
	class UUMGExpandableListWidget*                    PlayedWithFriendsExpandableList;                          // 0x0300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGExpandableListWidget*                    SocialFriendsExpandableList;                              // 0x0308(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGSuggestionsListTabWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UmgSurvivorHud
// 0x0080 (0x03D8 - 0x0358)
class UUmgSurvivorHud : public UUmgPlayerHud
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0358(0x0008) MISSED OFFSET
	class UActionButton*                               CrouchButton;                                             // 0x0360(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ACamperPlayer*                               Survivor;                                                 // 0x0368(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0370(0x0008) MISSED OFFSET
	class UTexture2D*                                  _unpressedLookBackJoystickThumbImage;                     // 0x0378(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  _pressedLookBackJoystickThumbImage;                       // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0388(0x0020) MISSED OFFSET
	class UTexture2D*                                  _unpressedLookBackJoystickBackgroundImage;                // 0x03A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  _pressedLookBackJoystickBackgroundImage;                  // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x20];                                      // 0x03B8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UmgSurvivorHud"));

		return ptr;
	}


	void SetNonRestrictedControlsVisibility(bool* visible);
	void SetLookBackJoystickPosition(struct FVector2D* Position);
	void SetLookBackJoystickImage(bool* pressed);
	void RespondToVirtualJoystickPressChanged(int* controlIndex, bool* pressed);
	void LookBackJoystickPressChanged(bool* pressed);
	struct FVector2D GetLookBackJoystickNormalizedOffset();
	bool GetLookBackJoystickIsPressed();
};


// Class DeadByDaylight.UMGSwitcherScreen
// 0x00B0 (0x03B0 - 0x0300)
class UUMGSwitcherScreen : public UBaseUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnLoadoutWidgetSlotClicked;                               // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLoadoutWidgetInventoryItemSelected;                     // 0x0310(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLoadoutWidgetInventoryItemUnselected;                   // 0x0320(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x60];                                      // 0x0330(0x0060) MISSED OFFSET
	class UWidgetSwitcher*                             ContainerWidgetSwitcher;                                  // 0x0390(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGBloodStoreWidget*                        BloodStoreWidget;                                         // 0x0398(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGLoadoutWidget*                           LoadoutWidget;                                            // 0x03A0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGCharacterSelectionWidget*                CharacterSelectionWidget;                                 // 0x03A8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGSwitcherScreen"));

		return ptr;
	}


	void BroadcastSlotClickedEvent(int* LoadoutSlot);
	void BroadcastItemUnSelectedEvent(int* itemIndex);
	void BroadcastItemSelectedEvent(int* itemIndex);
	void BroadcastCharacterSelectedEvent(int* CharacterIndex);
	void BroadcastCharacterRoleButtonClickedEvent();
	void BroadcastCharacterInfoButtonClickedEvent();
	void BroadcastBloodStoreRegenerate(int* characterId);
	void BroadcastBloodNodeSelected(int* characterId, int* nodeID, int* nodeDepth);
	void BroadcastBloodNodePurchase(int* characterId);
};


// Class DeadByDaylight.UMGTallyBloodpointsScoreWidget
// 0x0000 (0x0300 - 0x0300)
class UUMGTallyBloodpointsScoreWidget : public UBaseUserWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyBloodpointsScoreWidget"));

		return ptr;
	}


	void TutorialAnimationFinished();
	void TryBroadcastOnHighlightWidgetClicked();
	void TriggerTutorialVisuals();
	void PropagateOnHighlightWidgetClicked(struct FName* onBoardingID);
	void OnSynchronizeProperties();
	bool IsInTutorialState();
};


// Class DeadByDaylight.UMGTallyListElementWidget
// 0x0010 (0x0310 - 0x0300)
class UUMGTallyListElementWidget : public UBaseUserWidget
{
public:
	int                                                ElementIndex;                                             // 0x0300(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector2D                                   WidgetSize;                                               // 0x0304(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x030C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyListElementWidget"));

		return ptr;
	}


	void OnPlayInAnimation();
	void OnPageVisibilityChanged(bool* IsVisible, bool* wasInAnimationPlayed);
	void OnInAnimationFinished();
};


// Class DeadByDaylight.UMGTallyBloodpointsWidget
// 0x01A0 (0x04B0 - 0x0310)
class UUMGTallyBloodpointsWidget : public UUMGTallyListElementWidget
{
public:
	ESlateVisibility                                   _itemBoxVisibility;                                       // 0x0310(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0311(0x0007) MISSED OFFSET
	struct FText                                       _labelTotalScore;                                         // 0x0318(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       _labelItemTitle;                                          // 0x0330(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       _labelItemAddOnTitle;                                     // 0x0348(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FLinearColor                                _labelItemTitleColor;                                     // 0x0360(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UHorizontalBox*                              BoxScoreCategory;                                         // 0x0370(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<EDBDScoreCategory, struct FScoreCategoryUIExtraData> _scoreCategoryExtraDataMap;                               // 0x0378(0x0050) (Edit, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0xE8];                                      // 0x03C8(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyBloodpointsWidget"));

		return ptr;
	}


	void UpdateTallyTotalBloodpoints(int* totalValue);
	void UpdateTallyRewardWidget(struct FString* rewardName, int* existReward, int* addReward);
	void UpdateTallyItemWidget(struct FTallyItemChangedData* Data);
	void ShowTallyItemWidget(bool* isShow);
};


// Class DeadByDaylight.UMGTallyCharacterProgressionBar
// 0x0028 (0x0328 - 0x0300)
class UUMGTallyCharacterProgressionBar : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0300(0x0020) MISSED OFFSET
	class UProgressBar*                                ProgressBar;                                              // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyCharacterProgressionBar"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGTallyCharacterProgressionWidget
// 0x0088 (0x0398 - 0x0310)
class UUMGTallyCharacterProgressionWidget : public UUMGTallyListElementWidget
{
public:
	class UUMGTallyCharacterProgressionBar*            CharacterProgressionBar;                                  // 0x0310(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextCharacterCurrentExperience;                           // 0x0318(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextExperienceForNextLevel;                               // 0x0320(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextExperienceEarned;                                     // 0x0328(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextCurrentLevel;                                         // 0x0330(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      CharacterPicture;                                         // 0x0338(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PrestigeIcon;                                             // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextCharacterName;                                        // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                ExperiencePerSecond;                                      // 0x0350(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x44];                                      // 0x0354(0x0044) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyCharacterProgressionWidget"));

		return ptr;
	}


	void StartSequence();
	void StartNewLevel();
	void SetWidgetToFinalState();
	void OnFullBarOut();
	void OnFullBarIn();
};


// Class DeadByDaylight.UMGTallyEmblemWidget
// 0x0060 (0x0360 - 0x0300)
class UUMGTallyEmblemWidget : public UBaseUserWidget
{
public:
	TMap<EEmblemQuality, class UTexture2D*>            _emblemBackgrounds;                                       // 0x0300(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UImage*                                      BackgroundImage;                                          // 0x0350(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      IconImage;                                                // 0x0358(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyEmblemWidget"));

		return ptr;
	}


	void PlayFadeInAnimation();
};


// Class DeadByDaylight.UMGTallyListWidget
// 0x00F0 (0x04B0 - 0x03C0)
class UUMGTallyListWidget : public UUMGPageScrollWidget
{
public:
	struct FText                                       TopLeftText;                                              // 0x03C0(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       TopRightText;                                             // 0x03D8(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	class UCanvasPanel*                                ListBGPanel;                                              // 0x03F0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	EPlayerRole                                        _playerRole;                                              // 0x03F8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData01[0x50];                                      // 0x03F9(0x0050) UNKNOWN PROPERTY: SetProperty DeadByDaylight.UMGTallyListWidget._inAnimationPlayedPages
	TMap<ETallyListPageID, class UUMGTallyListElementWidget*> _listItemWidgets;                                         // 0x0450(0x0050) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x10];                                      // 0x04A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyListWidget"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGTallyPip
// 0x0008 (0x0308 - 0x0300)
class UUMGTallyPip : public UBaseUserWidget
{
public:
	class UImage*                                      Filling;                                                  // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyPip"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGTallyPlayerLevelWidget
// 0x0048 (0x0358 - 0x0310)
class UUMGTallyPlayerLevelWidget : public UUMGTallyListElementWidget
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0310(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyPlayerLevelWidget"));

		return ptr;
	}


	void OnPlayInAnimation();
	void OnPageVisibilityChanged(bool* IsVisible, bool* wasInAnimationPlayed);
	void OnInAnimationFinished();
};


// Class DeadByDaylight.UMGTallyProgressBar
// 0x0028 (0x0328 - 0x0300)
class UUMGTallyProgressBar : public UBaseUserWidget
{
public:
	class UProgressBar*                                ProgressBar;                                              // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                PipsContainer;                                            // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0310(0x0010) UNKNOWN PROPERTY: ArrayProperty DeadByDaylight.UMGTallyProgressBar._pipsClasses
	struct FVector2D                                   _pipsAlignment;                                           // 0x0320(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyProgressBar"));

		return ptr;
	}


	void SetPercent(float* value);
	int GetPipsCount();
};


// Class DeadByDaylight.UMGTallyRankBanner
// 0x0040 (0x0340 - 0x0300)
class UUMGTallyRankBanner : public UBaseUserWidget
{
public:
	class UHorizontalBox*                              PipsContainer;                                            // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGRankBanner*                              RankBanner;                                               // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0310(0x0010) UNKNOWN PROPERTY: ArrayProperty DeadByDaylight.UMGTallyRankBanner._pipsClasses
	struct FMargin                                     _pipsPadding;                                             // 0x0320(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UUMGTallyPip*>                        Pips;                                                     // 0x0330(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyRankBanner"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGTallyRankWidget
// 0x00A0 (0x03B0 - 0x0310)
class UUMGTallyRankWidget : public UUMGTallyListElementWidget
{
public:
	struct FMargin                                     _emblemsPadding;                                          // 0x0310(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0320(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGTallyRankWidget.EmblemWidgetClass
	class UHorizontalBox*                              EmblemsContainer;                                         // 0x0350(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGTallyProgressBar*                        ProgressBar;                                              // 0x0358(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGTallyRankBanner*                         RankBanner;                                               // 0x0360(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  RankProgressLabel;                                        // 0x0368(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UUMGTallyEmblemWidget*>               _emblems;                                                 // 0x0370(0x0010) (ExportObject, ZeroConstructor, Transient)
	struct FTallyScorePipsData                         _scoreData;                                               // 0x0380(0x0030) (Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyRankWidget"));

		return ptr;
	}


	struct FTallyScorePipsData GetScoreData();
	TArray<class UUMGTallyEmblemWidget*> GetEmblems();
};


// Class DeadByDaylight.UMGTallyScoreboardPlayerInfoWidget
// 0x02A8 (0x0600 - 0x0358)
class UUMGTallyScoreboardPlayerInfoWidget : public UUMGLoadoutBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnTallyScoreboardAddFriendEvent;                          // 0x0358(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTallyScoreboardReportEvent;                             // 0x0368(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UImage*                                      ImageHorizontalSeparation;                                // 0x0378(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FTallyPlayerResultData                      PlayerResultData;                                         // 0x0380(0x0278) (BlueprintVisible, BlueprintReadOnly, Transient)
	bool                                               LoadoutIsBlocked;                                         // 0x05F8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x05F9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyScoreboardPlayerInfoWidget"));

		return ptr;
	}


	void UpdateWidget();
	void UpdateReported();
	void UpdateLoadout();
	void SetPlayerScoreData(struct FTallyPlayerResultData* resultData);
	void SetPlayerReported(bool* isReport);
	void SetPlayerLoadoutBlocked(bool* isBlock);
	void HandleReportEvent(struct FName* buttonID);
	void HandleAddFriendEvent(struct FName* buttonID);
};


// Class DeadByDaylight.UMGTallyScoreboardWidget
// 0x00A0 (0x03B0 - 0x0310)
class UUMGTallyScoreboardWidget : public UUMGTallyListElementWidget
{
public:
	struct FScriptMulticastDelegate                    OnTallyScoreboardAddFriendEvent;                          // 0x0310(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTallyScoreboardReportEvent;                             // 0x0320(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FText                                       LabelTextRank;                                            // 0x0330(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       LabelTextScore;                                           // 0x0348(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       LabelTextStatus;                                          // 0x0360(0x0018) (BlueprintVisible, BlueprintReadOnly, Transient)
	class UUMGTallyScoreboardPlayerInfoWidget*         KillerWidget;                                             // 0x0378(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGTallyScoreboardPlayerInfoWidget*         FirstSurvivorWidget;                                      // 0x0380(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGTallyScoreboardPlayerInfoWidget*         SecondSurvivorWidget;                                     // 0x0388(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGTallyScoreboardPlayerInfoWidget*         ThirdSurvivorWidget;                                      // 0x0390(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUMGTallyScoreboardPlayerInfoWidget*         FourthSurvivorWidget;                                     // 0x0398(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTallyScoreboardWidget"));

		return ptr;
	}


	void SetFadeOut();
	void HandleReportEvent(struct FString* playerID);
	void HandleAddFriendEvent(struct FString* playerID);
};


// Class DeadByDaylight.UMGTeachablePerkButton
// 0x0010 (0x0310 - 0x0300)
class UUMGTeachablePerkButton : public UBaseUserWidget
{
public:
	class UPerkActionButton*                           TeachablePerkButton;                                      // 0x0300(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      LockedStatusIcon;                                         // 0x0308(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGTeachablePerkButton"));

		return ptr;
	}

};


// Class DeadByDaylight.UMGToastNotificationScreen
// 0x0170 (0x0470 - 0x0300)
class UUMGToastNotificationScreen : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0300(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGToastNotificationScreen.NotificationToast
	unsigned char                                      UnknownData01[0x30];                                      // 0x0330(0x0030) UNKNOWN PROPERTY: SoftClassProperty DeadByDaylight.UMGToastNotificationScreen.InvitationPartyToast
	class UVerticalBox*                                ToastsContainer;                                          // 0x0360(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0368(0x0030) MISSED OFFSET
	TMap<uint32_t, class UUMGBaseToastWidget*>         _toastsDisplayedOnScreen;                                 // 0x0398(0x0050) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData03[0x88];                                      // 0x03E8(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UMGToastNotificationScreen"));

		return ptr;
	}


	void HandleOnPromptSelected(int* notificationId);
	void HandleOnNotificationDisplayEnd(int* notificationId);
	void HandleOnButtonSelected(int* buttonID, int* notificationId);
};


// Class DeadByDaylight.UnlockPersonalPerksPopupScreen
// 0x0000 (0x0110 - 0x0110)
class UUnlockPersonalPerksPopupScreen : public UGenericPopupScreen
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.UnlockPersonalPerksPopupScreen"));

		return ptr;
	}


	void SetFadesOut(bool* fadesOut);
	void OnTextInputMouseClicked();
	void OnStart();
	void OnNavKey(struct FString* navKey);
	void OnEscape();
	void OnBack();
	void OnAtlantaBack();
	void OnAnyKey(float* code);
	void OnAnimationUpdate(int* isAnimationDone);
	void BroadcastOnHighlightedElementClickedEvent(struct FName* onBoardingID);
};


// Class DeadByDaylight.VaultableComponent
// 0x0020 (0x0120 - 0x0100)
class UVaultableComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnVault;                                                  // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0110(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.VaultableComponent"));

		return ptr;
	}


	void SignalVault(class ADBDPlayer** Survivor, float* InteractionTime);
	void OnChaseEnded(class ADBDPlayer** Survivor, float* chaseTimer);
};


// Class DeadByDaylight.VideoNativePlayer
// 0x0030 (0x0370 - 0x0340)
class AVideoNativePlayer : public AActor
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0340(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.VideoNativePlayer"));

		return ptr;
	}


	bool WasRecentlyRendered(float* Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor** InParentActor, struct FName* InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup>* NewTickGroup);
	void SetTickableWhenPaused(bool* bTickableWhenPaused);
	void SetReplicates(bool* bInReplicates);
	void SetReplicateMovement(bool* bInReplicateMovement);
	void SetOwner(class AActor** NewOwner);
	void SetNetDormancy(TEnumAsByte<ENetDormancy>* NewDormancy);
	void SetLifeSpan(float* InLifespan);
	void SetActorTickInterval(float* TickInterval);
	void SetActorTickEnabled(bool* bEnabled);
	void SetActorScale3D(struct FVector* NewScale3D);
	void SetActorRelativeScale3D(struct FVector* NewRelativeScale);
	void SetActorHiddenInGame(bool* bNewHidden);
	void SetActorEnableCollision(bool* bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor** PrerequisiteActor);
	void ReceiveTick(float* DeltaSeconds);
	void ReceiveRadialDamage(float* DamageReceived, class UDamageType** DamageType, struct FVector* Origin, struct FHitResult* HitInfo, class AController** InstigatedBy, class AActor** DamageCauser);
	void ReceivePointDamage(float* Damage, class UDamageType** DamageType, struct FVector* HitLocation, struct FVector* HitNormal, class UPrimitiveComponent** HitComponent, struct FName* BoneName, struct FVector* ShotFromDirection, class AController** InstigatedBy, class AActor** DamageCauser, struct FHitResult* HitInfo);
	void ReceiveHit(class UPrimitiveComponent** MyComp, class AActor** Other, class UPrimitiveComponent** OtherComp, bool* bSelfMoved, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* NormalImpulse, struct FHitResult* Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason>* EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float* Damage, class UDamageType** DamageType, class AController** InstigatedBy, class AActor** DamageCauser);
	void ReceiveActorOnReleased(struct FKey* ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex>* FingerIndex);
	void ReceiveActorOnClicked(struct FKey* ButtonPressed);
	void ReceiveActorEndOverlap(class AActor** OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor** OtherActor);
	void ReceiveActorBeginCursorOver();
	void PrestreamTextures(float* Seconds, bool* bEnableStreaming, int* CinematicTextureGroups);
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float* Loudness, class APawn** NoiseInstigator, struct FVector* NoiseLocation, float* MaxRange, struct FName* Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface** Parent);
	bool K2_TeleportTo(struct FVector* DestLocation, struct FRotator* DestRotation);
	bool K2_SetActorTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(struct FRotator* NewRotation, bool* bTeleportPhysics);
	void K2_SetActorRelativeTransform(struct FTransform* NewRelativeTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(struct FRotator* NewRelativeRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(struct FVector* NewRelativeLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(struct FVector* NewLocation, struct FRotator* NewRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(struct FVector* NewLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController** PC);
	void K2_OnBecomeViewTarget(class APlayerController** PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor(EDetachmentRule* LocationRule, EDetachmentRule* RotationRule, EDetachmentRule* ScaleRule);
	void K2_DestroyComponent(class UActorComponent** Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent** Parent, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor** ParentActor, struct FName* SocketName, EAttachmentRule* LocationRule, EAttachmentRule* RotationRule, EAttachmentRule* ScaleRule, bool* bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor** InParentActor, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachLocationType, bool* bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent** InParent, struct FName* InSocketName, TEnumAsByte<EAttachLocation>* AttachLocationType, bool* bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(struct FTransform* DeltaTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(struct FTransform* NewTransform, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(struct FRotator* DeltaRotation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(struct FVector* DeltaLocation, bool* bSweep, bool* bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor** Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor** OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor** OtherActor);
	TEnumAsByte<ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass** ClassFilter, TArray<class AActor*>* OverlappingActors);
	TEnumAsByte<ENetRole> GetLocalRole();
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(struct FKey* InputAxisKey);
	float GetInputAxisValue(struct FName* InputAxisName);
	float GetInputAxisKeyValue(struct FKey* InputAxisKey);
	float GetHorizontalDotProductTo(class AActor** OtherActor);
	float GetHorizontalDistanceTo(class AActor** OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor** OtherActor);
	float GetDistanceTo(class AActor** OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass** ComponentClass, struct FName* Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass** ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass** ComponentClass);
	struct FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool* bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool* bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController** PlayerController);
	void DisableInput(class APlayerController** PlayerController);
	void DetachRootComponentFromParent(bool* bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent** PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor** PrerequisiteActor);
	class UActorComponent* AddComponent(struct FName* TemplateName, bool* bManualAttachment, struct FTransform* RelativeTransform, class UObject** ComponentTemplateContext);
	bool ActorHasTag(struct FName* Tag);
};


// Class DeadByDaylight.VideoPlayer
// 0x0000 (0x0030 - 0x0030)
class UVideoPlayer : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.VideoPlayer"));

		return ptr;
	}

};


// Class DeadByDaylight.VideoThumbnailPlayer
// 0x0098 (0x03D8 - 0x0340)
class AVideoThumbnailPlayer : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0340(0x0020) MISSED OFFSET
	class UMediaPlayer*                                MediaPlayer;                                              // 0x0360(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UMediaSoundComponent*                        SoundComponent;                                           // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UUserWidget*                                 VideoPlayerWidget;                                        // 0x0370(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             _audioComponent;                                          // 0x0378(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0380(0x0018) MISSED OFFSET
	unsigned char                                      UnknownData02[0x30];                                      // 0x0380(0x0030) UNKNOWN PROPERTY: SoftObjectProperty DeadByDaylight.VideoThumbnailPlayer._source
	unsigned char                                      UnknownData03[0x10];                                      // 0x03C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.VideoThumbnailPlayer"));

		return ptr;
	}


	void OnVideoAssetLoaded();
	void OnMediaOpened(struct FString* OpenedUrl);
	void OnMediaClosed();
	void OnEndReached();
};


// Class DeadByDaylight.VirtualKeyboard
// 0x0010 (0x0040 - 0x0030)
class UVirtualKeyboard : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.VirtualKeyboard"));

		return ptr;
	}

};


// Class DeadByDaylight.VomitStateComponent
// 0x0038 (0x0138 - 0x0100)
class UVomitStateComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET
	struct FTagStateBool                               _isCharging;                                              // 0x0108(0x0030)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.VomitStateComponent"));

		return ptr;
	}


	void SetVomitState(ELinkedVomitState* newVomitState);
	void SetObjectState(class UGameplayTagContainerComponent** objectState);
	bool IsVomiting();
	ELinkedVomitState getVomitState();
};


// Class DeadByDaylight.WakerObject
// 0x0028 (0x03F0 - 0x03C8)
class AWakerObject : public AInteractable
{
public:
	class UCamperDreamworldComponent*                  _linkedCamperDreamworldComponent;                         // 0x03C8(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               IsInteracting;                                            // 0x03D0(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               _chargeComplete;                                          // 0x03D1(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1E];                                      // 0x03D2(0x001E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.WakerObject"));

		return ptr;
	}


	void UpdateVisibilityAndOutline();
	void SetChargeComplete(bool* complete);
	void OnRep_LinkedCamperChanged(class UCamperDreamworldComponent** Previous);
	void OnNewLinkedCamper(class UCamperDreamworldComponent** dreamworldComponent);
	void OnLinkedCamperDreamStateChanged(bool* IsInDreamworld, bool* locallyObservedChanged);
	void OnAnyCamperDreamStateChanged(bool* IsInDreamworld, bool* locallyObservedChanged);
	void LinkCampersOnLevelReadyToPlay();
	bool IsLinkedToCamper(class ADBDPlayer** camper);
	bool HasLinkedCamper();
	float GetInteractionPercentComplete();
	bool GetChargeComplete();
	bool CanWakeUpCamper(class ADBDPlayer** camper);
	void BindToCamperDreamStateChanged(class ADBDPlayer** Player);
};


// Class DeadByDaylight.WalletHandler
// 0x0070 (0x00A0 - 0x0030)
class UWalletHandler : public UObject
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0030(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.WalletHandler"));

		return ptr;
	}

};


// Class DeadByDaylight.WeightedElement
// 0x0000 (0x0030 - 0x0030)
class UWeightedElement : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.WeightedElement"));

		return ptr;
	}

};


// Class DeadByDaylight.Window
// 0x00E0 (0x04A8 - 0x03C8)
class AWindow : public AInteractable
{
public:
	struct FNativeBlockIndicatorData                   NativeSmokeOtherIndicatorData;                            // 0x03C8(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FNativeBlockIndicatorData                   NativeEntityIndicatorData;                                // 0x03E0(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FNativeBlockIndicatorData                   NativeSmokeSelfIndicatorData;                             // 0x03F8(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	class UChildActorComponent*                        _entityAssets;                                            // 0x0410(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UMaterialHelper*                             _materialHelper;                                          // 0x0418(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAkComponent*                                _akAudioWindow;                                           // 0x0420(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAkAudioEvent*                               akAudioEventWindowsBlocStart;                             // 0x0428(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               akAudioEventWindowsBlocStop;                              // 0x0430(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<class ACamperPlayer*, struct FVaultData>      _survivorVaultData;                                       // 0x0438(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0488(0x0008) MISSED OFFSET
	class ULocalPlayerTrackerComponent*                _localPlayerTracker;                                      // 0x0490(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBlockableComponent*                         _blockableComponent;                                      // 0x0498(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.Window"));

		return ptr;
	}


	void OnLocallyObservedChanged();
	void OnFastVault(class ADBDPlayer** Player, class UInteractionDefinition** Interaction);
	void NotifyOnFastVault(class ADBDPlayer** Player, class UInteractionDefinition** Interaction);
	bool IsWindowVaultBlockedFor(class ADBDPlayer** Player);
	class UMaterialHelper* GetMaterialHelper();
	class UChildActorComponent* GetEntityAssets();
	class UAkComponent* GetAudioComponent();
	void Authority_OnVaultInternal(class ADBDPlayer** Player, bool* canBlockVault);
};


// Class DeadByDaylight.ZoneDetectorComponent
// 0x0038 (0x0138 - 0x0100)
class UZoneDetectorComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0100(0x0018) MISSED OFFSET
	TArray<class UPrimitiveComponent*>                 _zones;                                                   // 0x0118(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<struct FName>                               _tags;                                                    // 0x0128(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class DeadByDaylight.ZoneDetectorComponent"));

		return ptr;
	}


	void OnOverlapExit(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void OnOverlapEnter(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
